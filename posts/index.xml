<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ephz3nt</title><link>https://painso.com/posts/</link><description>Recent content in Posts on ephz3nt</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 11 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://painso.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Java ExcelUtil 库导出Excel表格报错问题</title><link>https://painso.com/posts/tech/2020/java-in-docker-alpine-font-issue/</link><pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate><guid>https://painso.com/posts/tech/2020/java-in-docker-alpine-font-issue/</guid><description>环境信息 运行环境: Docker 使用镜像: adoptopenjdk/openjdk11:alpine 问题概述 同事新写的接口，功能大概是访问提供某些参数会返回一个 Excel 表格。在本机测试正常，但是部署到测试环境下载下来的表格内容是
{&amp;ldquo;code&amp;rdquo;:500 data&amp;rdquo;:null,&amp;ldquo;message&amp;rdquo;:&amp;ldquo;Handler dispatch failed; nested exception is java.lang.InternalError: java.lang.reflect.InvocationTargetException&amp;rdquo;} 控制台报错信息 org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.InternalError: java.lang.reflect.InvocationTargetException at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.</description><content type="html"><![CDATA[<h3 id="环境信息">环境信息</h3>
<ul>
<li>运行环境: Docker</li>
<li>使用镜像: adoptopenjdk/openjdk11:alpine</li>
</ul>
<h3 id="问题概述">问题概述</h3>
<p>同事新写的接口，功能大概是访问提供某些参数会返回一个 Excel 表格。在本机测试正常，但是部署到测试环境下载下来的表格内容是</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>{&ldquo;code&rdquo;:500</td>
<td>data&rdquo;:null,&ldquo;message&rdquo;:&ldquo;Handler dispatch failed; nested exception is java.lang.InternalError: java.lang.reflect.InvocationTargetException&rdquo;}</td>
</tr>
</tbody>
</table>
<h4 id="控制台报错信息">控制台报错信息</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">NestedServletException</span><span class="o">:</span> <span class="n">Handler</span> <span class="n">dispatch</span> <span class="n">failed</span><span class="o">;</span> <span class="n">nested</span> <span class="n">exception</span> <span class="n">is</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">InternalError</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">InvocationTargetException</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">DispatcherServlet</span><span class="o">.</span><span class="na">doDispatch</span><span class="o">(</span><span class="n">DispatcherServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">1055</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">DispatcherServlet</span><span class="o">.</span><span class="na">doService</span><span class="o">(</span><span class="n">DispatcherServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">943</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">FrameworkServlet</span><span class="o">.</span><span class="na">processRequest</span><span class="o">(</span><span class="n">FrameworkServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">1006</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">FrameworkServlet</span><span class="o">.</span><span class="na">doGet</span><span class="o">(</span><span class="n">FrameworkServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">898</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServlet</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">HttpServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">634</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">FrameworkServlet</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">FrameworkServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">883</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServlet</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">HttpServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">741</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">231</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">websocket</span><span class="o">.</span><span class="na">server</span><span class="o">.</span><span class="na">WsFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">WsFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">53</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">websocket</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">brave</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">TracingFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">TracingFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">65</span><span class="o">)</span> <span class="o">~[</span><span class="n">brave</span><span class="o">-</span><span class="n">instrumentation</span><span class="o">-</span><span class="n">servlet</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">RequestContextFilter</span><span class="o">.</span><span class="na">doFilterInternal</span><span class="o">(</span><span class="n">RequestContextFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">100</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">OncePerRequestFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">OncePerRequestFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">119</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">FormContentFilter</span><span class="o">.</span><span class="na">doFilterInternal</span><span class="o">(</span><span class="n">FormContentFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">93</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">OncePerRequestFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">OncePerRequestFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">119</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">cloud</span><span class="o">.</span><span class="na">sleuth</span><span class="o">.</span><span class="na">instrument</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">ExceptionLoggingFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ExceptionLoggingFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">50</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">cloud</span><span class="o">-</span><span class="n">sleuth</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">brave</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">TracingFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">TracingFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">82</span><span class="o">)</span> <span class="o">~[</span><span class="n">brave</span><span class="o">-</span><span class="n">instrumentation</span><span class="o">-</span><span class="n">servlet</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">cloud</span><span class="o">.</span><span class="na">sleuth</span><span class="o">.</span><span class="na">instrument</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">LazyTracingFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">TraceWebServletAutoConfiguration</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">138</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">cloud</span><span class="o">-</span><span class="n">sleuth</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">actuate</span><span class="o">.</span><span class="na">metrics</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">WebMvcMetricsFilter</span><span class="o">.</span><span class="na">doFilterInternal</span><span class="o">(</span><span class="n">WebMvcMetricsFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">108</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">actuator</span><span class="o">-</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">OncePerRequestFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">OncePerRequestFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">119</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">CharacterEncodingFilter</span><span class="o">.</span><span class="na">doFilterInternal</span><span class="o">(</span><span class="n">CharacterEncodingFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">201</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">OncePerRequestFilter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">OncePerRequestFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">119</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">internalDoFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">193</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ApplicationFilterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">ApplicationFilterChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">166</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardWrapperValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardWrapperValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">202</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardContextValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardContextValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">96</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">authenticator</span><span class="o">.</span><span class="na">AuthenticatorBase</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">AuthenticatorBase</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">526</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardHostValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardHostValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">139</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">valves</span><span class="o">.</span><span class="na">ErrorReportValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">ErrorReportValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">92</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngineValve</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">StandardEngineValve</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">74</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">CoyoteAdapter</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">CoyoteAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">343</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">Http11Processor</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">Http11Processor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">367</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">AbstractProcessorLight</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">AbstractProcessorLight</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">65</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">AbstractProtocol$ConnectionHandler</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">AbstractProtocol</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">860</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">NioEndpoint$SocketProcessor</span><span class="o">.</span><span class="na">doRun</span><span class="o">(</span><span class="n">NioEndpoint</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">1591</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketProcessorBase</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">SocketProcessorBase</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">49</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="o">.</span><span class="na">runWorker</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">1128</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor$Worker</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">628</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">threads</span><span class="o">.</span><span class="na">TaskThread$WrappingRunnable</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">TaskThread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">61</span><span class="o">)</span> <span class="o">~[</span><span class="n">tomcat</span><span class="o">-</span><span class="n">embed</span><span class="o">-</span><span class="n">core</span><span class="o">-</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">9</span><span class="o">.</span><span class="na">0</span><span class="o">.</span><span class="na">29</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">834</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
<span class="n">Caused</span> <span class="n">by</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">InternalError</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">InvocationTargetException</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">FontManagerFactory$1</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">FontManagerFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">86</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">FontManagerFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">FontManagerFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">74</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Font</span><span class="o">.</span><span class="na">getFont2D</span><span class="o">(</span><span class="n">Font</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">497</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Font</span><span class="o">.</span><span class="na">canDisplayUpTo</span><span class="o">(</span><span class="n">Font</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">2250</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">TextLayout</span><span class="o">.</span><span class="na">singleFont</span><span class="o">(</span><span class="n">TextLayout</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">469</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">TextLayout</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">TextLayout</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">530</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">poi</span><span class="o">.</span><span class="na">ss</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">SheetUtil</span><span class="o">.</span><span class="na">getDefaultCharWidth</span><span class="o">(</span><span class="n">SheetUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">275</span><span class="o">)</span> <span class="o">~[</span><span class="n">poi</span><span class="o">-</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">poi</span><span class="o">.</span><span class="na">ss</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">SheetUtil</span><span class="o">.</span><span class="na">getColumnWidth</span><span class="o">(</span><span class="n">SheetUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">250</span><span class="o">)</span> <span class="o">~[</span><span class="n">poi</span><span class="o">-</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">poi</span><span class="o">.</span><span class="na">ss</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">SheetUtil</span><span class="o">.</span><span class="na">getColumnWidth</span><span class="o">(</span><span class="n">SheetUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">235</span><span class="o">)</span> <span class="o">~[</span><span class="n">poi</span><span class="o">-</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">poi</span><span class="o">.</span><span class="na">hssf</span><span class="o">.</span><span class="na">usermodel</span><span class="o">.</span><span class="na">HSSFSheet</span><span class="o">.</span><span class="na">autoSizeColumn</span><span class="o">(</span><span class="n">HSSFSheet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">2165</span><span class="o">)</span> <span class="o">~[</span><span class="n">poi</span><span class="o">-</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">poi</span><span class="o">.</span><span class="na">hssf</span><span class="o">.</span><span class="na">usermodel</span><span class="o">.</span><span class="na">HSSFSheet</span><span class="o">.</span><span class="na">autoSizeColumn</span><span class="o">(</span><span class="n">HSSFSheet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">2147</span><span class="o">)</span> <span class="o">~[</span><span class="n">poi</span><span class="o">-</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">3</span><span class="o">.</span><span class="na">17</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sargeraswang</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ExcelUtil</span><span class="o">.</span><span class="na">ExcelUtil</span><span class="o">.</span><span class="na">write2Sheet</span><span class="o">(</span><span class="n">ExcelUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">315</span><span class="o">)</span> <span class="o">~[</span><span class="n">excel</span><span class="o">-</span><span class="n">util</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">1</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sargeraswang</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ExcelUtil</span><span class="o">.</span><span class="na">ExcelUtil</span><span class="o">.</span><span class="na">exportExcel</span><span class="o">(</span><span class="n">ExcelUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">157</span><span class="o">)</span> <span class="o">~[</span><span class="n">excel</span><span class="o">-</span><span class="n">util</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">1</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">sargeraswang</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ExcelUtil</span><span class="o">.</span><span class="na">ExcelUtil</span><span class="o">.</span><span class="na">exportExcel</span><span class="o">(</span><span class="n">ExcelUtil</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">136</span><span class="o">)</span> <span class="o">~[</span><span class="n">excel</span><span class="o">-</span><span class="n">util</span><span class="o">-</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">1</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">fz</span><span class="o">.</span><span class="na">jgj</span><span class="o">.</span><span class="na">report</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">GiftCardGeneratorController</span><span class="o">.</span><span class="na">exportCdks</span><span class="o">(</span><span class="n">GiftCardGeneratorController</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">87</span><span class="o">)</span> <span class="o">~[</span><span class="n">classes</span><span class="o">!/:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">jdk</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke0</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">jdk</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">62</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">jdk</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">43</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Method</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">566</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">InvocableHandlerMethod</span><span class="o">.</span><span class="na">doInvoke</span><span class="o">(</span><span class="n">InvocableHandlerMethod</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">190</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">InvocableHandlerMethod</span><span class="o">.</span><span class="na">invokeForRequest</span><span class="o">(</span><span class="n">InvocableHandlerMethod</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">138</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">ServletInvocableHandlerMethod</span><span class="o">.</span><span class="na">invokeAndHandle</span><span class="o">(</span><span class="n">ServletInvocableHandlerMethod</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">106</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMappingHandlerAdapter</span><span class="o">.</span><span class="na">invokeHandlerMethod</span><span class="o">(</span><span class="n">RequestMappingHandlerAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">888</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMappingHandlerAdapter</span><span class="o">.</span><span class="na">handleInternal</span><span class="o">(</span><span class="n">RequestMappingHandlerAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">793</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">AbstractHandlerMethodAdapter</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">AbstractHandlerMethodAdapter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">87</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">DispatcherServlet</span><span class="o">.</span><span class="na">doDispatch</span><span class="o">(</span><span class="n">DispatcherServlet</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">1040</span><span class="o">)</span> <span class="o">~[</span><span class="n">spring</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">.</span><span class="na">jar</span><span class="o">!/:</span><span class="n">5</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">2</span><span class="o">.</span><span class="na">RELEASE</span><span class="o">]</span>
        <span class="o">...</span> <span class="n">53</span> <span class="n">common</span> <span class="n">frames</span> <span class="n">omitted</span>
<span class="n">Caused</span> <span class="n">by</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">InvocationTargetException</span><span class="o">:</span> <span class="kc">null</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">jdk</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeConstructorAccessorImpl</span><span class="o">.</span><span class="na">newInstance0</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">jdk</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeConstructorAccessorImpl</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">NativeConstructorAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">62</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">jdk</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">DelegatingConstructorAccessorImpl</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">DelegatingConstructorAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">45</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">Constructor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">490</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">FontManagerFactory$1</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">FontManagerFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">84</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="o">...</span> <span class="n">79</span> <span class="n">common</span> <span class="n">frames</span> <span class="n">omitted</span>
<span class="n">Caused</span> <span class="n">by</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span><span class="o">:</span> <span class="kc">null</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">FontConfiguration</span><span class="o">.</span><span class="na">getVersion</span><span class="o">(</span><span class="n">FontConfiguration</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">1262</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">FontConfiguration</span><span class="o">.</span><span class="na">readFontConfigFile</span><span class="o">(</span><span class="n">FontConfiguration</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">225</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">FontConfiguration</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">FontConfiguration</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">107</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">X11FontManager</span><span class="o">.</span><span class="na">createFontConfiguration</span><span class="o">(</span><span class="n">X11FontManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">719</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">SunFontManager$2</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">SunFontManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">379</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">base</span><span class="o">/</span><span class="n">java</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">font</span><span class="o">.</span><span class="na">SunFontManager</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">SunFontManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">324</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">FcFontManager</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">FcFontManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">35</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">desktop</span><span class="o">/</span><span class="n">sun</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">X11FontManager</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;(</span><span class="n">X11FontManager</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="n">56</span><span class="o">)</span> <span class="o">~[</span><span class="n">na</span><span class="o">:</span><span class="n">na</span><span class="o">]</span>
        <span class="o">...</span> <span class="n">84</span> <span class="n">common</span> <span class="n">frames</span> <span class="n">omitted</span>
</code></pre></div><h3 id="找到问题">找到问题</h3>
<p>根据报错信息搜索<code>java.lang.InternalError: java.lang.reflect.InvocationTargetException</code>，发现大致为字体原因。知道问题后面就比较好处理了，为镜像包安装一下字体然后重新提交作为基础镜像成功解决。</p>
<div class="highlight"><pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> adoptopenjdk/openjdk11:alpine</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> sed -i <span class="s1">&#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#39;</span> /etc/apk/repositories <span class="o">&amp;&amp;</span> apk update <span class="o">&amp;&amp;</span> apk upgrade <span class="o">&amp;&amp;</span> apk add ttf-dejavu --no-cache <span class="o">&amp;&amp;</span> rm -rf /var/cache/apk/*<span class="err">
</span><span class="err"></span><span class="k">MAINTAINER</span><span class="s"> ephz3nt</span><span class="err">
</span><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 8080/tcp</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> ./example-web/target/example-web.jar .<span class="err">
</span><span class="err"></span><span class="k">ENV</span> TZ Asia/Shanghai<span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;java&#34;</span><span class="p">,</span><span class="s2">&#34;-Dfile.encoding=utf-8&#34;</span><span class="p">,</span><span class="s2">&#34;-Xms1g&#34;</span><span class="p">,</span><span class="s2">&#34;-Xmx1g&#34;</span><span class="p">,</span><span class="s2">&#34;-Djava.security.egd=file:/dev/./urandom&#34;</span><span class="p">,</span><span class="s2">&#34;-jar&#34;</span><span class="p">,</span><span class="s2">&#34;example-web.jar&#34;</span><span class="p">,</span><span class="s2">&#34;--spring.profiles.active=test&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div>]]></content></item><item><title>记一次小程序请求PHP后端报错</title><link>https://painso.com/posts/tech/2020/wechat-miniprogram-issues/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://painso.com/posts/tech/2020/wechat-miniprogram-issues/</guid><description>小程序业务有外接一套商城，由于需要部署一套测试环境，所以在公司内网服务器使用 K8S 跑了一套。 但是问题来了，线上的没有问题，测试环境小程序调用 PHP 后端接口貌似出现了问题，无法获取用户信息。 数据库是直接从线上导出来的，PHP 代码除了配置文件不同，其他都没有变动。
使用Charles抓包看了下报错
&amp;quot;status&amp;quot;: 400, &amp;quot;msg&amp;quot;: &amp;quot;系统出现异常&amp;quot;, &amp;quot;data&amp;quot;: { &amp;quot;message&amp;quot;: &amp;quot;SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'token' at row 1&amp;quot;, &amp;quot;file&amp;quot;: &amp;quot;\/var\/www\/html\/vendor\/topthink\/think-orm\/src\/db\/PDOConnection.php&amp;quot;, &amp;quot;code&amp;quot;: 10501, &amp;quot;line&amp;quot;: 713, &amp;quot;trace&amp;quot;: [{ &amp;quot;file&amp;quot;: &amp;quot;\/var\/www\/html\/vendor\/topthink\/think-orm\/src\/db\/PDOConnection.php&amp;quot;, &amp;quot;line&amp;quot;: 769, &amp;quot;function&amp;quot;: &amp;quot;getPDOStatement&amp;quot;, &amp;quot;class&amp;quot;: &amp;quot;think\\db\\PDOConnection&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;-&amp;gt;&amp;quot;, &amp;quot;args&amp;quot;: [&amp;quot;INSERT INTO `user_token` SET `uid` = :ThinkBind_1_1689079_ , `token` = :ThinkBind_2_1472105804_ , `expires_time` = :ThinkBind_3_1500549319_ , `create_time` = :ThinkBind_4_1947827158_ , `login_ip` = :ThinkBind_5_2004432133_ &amp;quot;, { &amp;quot;ThinkBind_1_1689079_&amp;quot;: [1, 1], &amp;quot;ThinkBind_2_1472105804_&amp;quot;: [&amp;quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.</description><content type="html"><![CDATA[<p>小程序业务有外接一套商城，由于需要部署一套测试环境，所以在公司内网服务器使用 K8S 跑了一套。
但是问题来了，线上的没有问题，测试环境小程序调用 PHP 后端接口貌似出现了问题，无法获取用户信息。
数据库是直接从线上导出来的，PHP 代码除了配置文件不同，其他都没有变动。</p>
<p>使用<code>Charles</code>抓包看了下报错</p>
<pre><code>	&quot;status&quot;: 400,
	&quot;msg&quot;: &quot;系统出现异常&quot;,
	&quot;data&quot;: {
		&quot;message&quot;: &quot;SQLSTATE[22001]: String data, right truncated: 1406 Data too long for column 'token' at row 1&quot;,
		&quot;file&quot;: &quot;\/var\/www\/html\/vendor\/topthink\/think-orm\/src\/db\/PDOConnection.php&quot;,
		&quot;code&quot;: 10501,
		&quot;line&quot;: 713,
		&quot;trace&quot;: [{
			&quot;file&quot;: &quot;\/var\/www\/html\/vendor\/topthink\/think-orm\/src\/db\/PDOConnection.php&quot;,
			&quot;line&quot;: 769,
			&quot;function&quot;: &quot;getPDOStatement&quot;,
			&quot;class&quot;: &quot;think\\db\\PDOConnection&quot;,
			&quot;type&quot;: &quot;-&gt;&quot;,
			&quot;args&quot;: [&quot;INSERT INTO `user_token` SET `uid` = :ThinkBind_1_1689079_ , `token` = :ThinkBind_2_1472105804_ , `expires_time` = :ThinkBind_3_1500549319_ , `create_time` = :ThinkBind_4_1947827158_ , `login_ip` = :ThinkBind_5_2004432133_ &quot;, {
				&quot;ThinkBind_1_1689079_&quot;: [1, 1],
				&quot;ThinkBind_2_1472105804_&quot;: [&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzaG9wLmNsaWVudC50ZXN0LmRkamdqLf4wao1MDAwNiIsImF1ZCI6InNob3AuY2xpZW50LnRlc3QuZGRqZ2ouY29tOjUwMDA2IiwiaWF0IjoxNjA2NzE4MjMyLCJuYmYiOjE2MDY3MTgyMzIsImV4cCI6MTYwNjcyOTAzMiwianRpIjp7ImlkIjoxLCJ0eXBlIjoicm91dGluZSJ9fQ.gTxWWSCKTx7d3KjUz3YniGJx3D4Hp4DlixwEMpS6iY8&quot;, 2],
				&quot;ThinkBind_3_1500549319_&quot;: [&quot;2020-11-30 17:37:12&quot;, 2],
				&quot;ThinkBind_4_1947827158_&quot;: [&quot;2020-11-30 14:37:12.001472&quot;, 2],
				&quot;ThinkBind_5_2004432133_&quot;: [&quot;172.100.0.99&quot;, 2]
			},
			true, false]
		}
        ...
</code></pre><p>其实这个错误，我好几天前就发现了，并且找到通过使用</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SET</span> <span class="o">@@</span><span class="k">global</span><span class="p">.</span><span class="n">sql_mode</span><span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</code></pre></div><p>即可修复。
但是又出现了新问题，现在访问 PHP 后端的话，小程序客户端会出现无限调用 PHP 后端授权接口的情况，由于小程序对接 PHP 后端部分也是外包的，我自己也没有开发经验，也有联系对方排查，但无奈效率太低，而且对方也不太想处理这种因环境导致的问题。</p>
<p>今天看到上面的报错，发现有一段 SQL 语句，于是手动提取出来去 MySQL 执行</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">user_token</span><span class="o">`</span> <span class="k">SET</span> <span class="o">`</span><span class="n">uid</span><span class="o">`</span> <span class="o">=</span> <span class="s2">&#34;1&#34;</span> <span class="p">,</span> <span class="o">`</span><span class="n">token</span><span class="o">`</span> <span class="o">=</span> <span class="s2">&#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzaG9wLmNsaWVudC50ZXN0LmRkamdqLf4wao1MDAwNiIsImF1ZCI6InNob3AuY2xpZW50LnRlc3QuZGRqZ2ouY29tOjUwMDA2IiwiaWF0IjoxNjA2NzE2OTcyLCJuYmYiOjE2MDY3MTY5NzIsImV4cCI6MTYwNjcyNzc3MiwianRpIjp7ImlkIjoxLCJ0eXBlIjoicm91dGluZSJ9fQ.hQcnb8ERndq_N7njCeKFmQp0YEZOtMoxZXwonIAzfUM&#34;</span> <span class="p">,</span> <span class="o">`</span><span class="n">expires_time</span><span class="o">`</span> <span class="o">=</span> <span class="s2">&#34;2020-11-30 17:16:12&#34;</span> <span class="p">,</span> <span class="o">`</span><span class="n">create_time</span><span class="o">`</span> <span class="o">=</span> <span class="s2">&#34;2020-11-30 14:16:12.782399&#34;</span> <span class="p">,</span> <span class="o">`</span><span class="n">login_ip</span><span class="o">`</span> <span class="o">=</span> <span class="s2">&#34;1.1.1.1&#34;</span><span class="p">;</span>
</code></pre></div><p>获得同样的报错
<code>Data too long for column 'token' at row 1</code>，于是去 Google 了一下，无意中看到<code>StackOverFlow</code>的一个问答<a href="https://stackoverflow.com/a/34353155">https://stackoverflow.com/a/34353155</a>,于是尝试将<code>token</code>字段的<code>varchar</code>修改成<code>longtext</code>，重新尝试调用竟然成功解决了问题！</p>
<p>最终步骤</p>
<ol>
<li>
<p>设置 SQL_MODE</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SET</span> <span class="o">@@</span><span class="k">global</span><span class="p">.</span><span class="n">sql_mode</span><span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</code></pre></div></li>
<li>
<p>将出错的字段类型修改成<code>longtext</code></p>
</li>
</ol>
]]></content></item><item><title>Vue上传阿里云OSS问题</title><link>https://painso.com/posts/tech/2020/vue-upload-aliyun-oss-issue/</link><pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate><guid>https://painso.com/posts/tech/2020/vue-upload-aliyun-oss-issue/</guid><description>前段时间部署前端同事的 Vue 代码遇到的，记录一下。
问题概述 前端同事在vue.config.js配置了 OSS 的 proxy
&amp;#34;/ossUpload&amp;#34;: { target: &amp;#34;https://xxx-proj.oss-cn-shanghai.aliyuncs.com&amp;#34;, changeOrigin: true, ws: true, pathRewrite: { &amp;#34;^/ossUpload&amp;#34;: &amp;#34;&amp;#34;, }, }, 由于 Vue 编译后为纯静态文件，导致我部署到 Nginx 访问不到这个/ossUpload路径，于是只能加个proxy_pass规则。
location ^~/ossUpload { proxy_pass https://xxx-proj.oss-cn-shanghai.aliyuncs.com/; 加上后发现上传报错，直接在 Vue 启动开发模式发现上传 OSS 的状态码是204, 看到这个想到websocket的配置需要设置http_upgrade的一些配置，于是配置上去正常上传了。 最终 Nginx 配置如下
location ^~/ossUpload { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-NginX-Proxy true; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;quot;upgrade&amp;quot;; proxy_pass https://xxx-proj.oss-cn-shanghai.aliyuncs.com/; 时间过去比较久， 一些细节忘记了 - -</description><content type="html"><![CDATA[<p>前段时间部署前端同事的 Vue 代码遇到的，记录一下。</p>
<h3 id="问题概述">问题概述</h3>
<p>前端同事在<code>vue.config.js</code>配置了 OSS 的 proxy</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="s2">&#34;/ossUpload&#34;</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">target</span><span class="o">:</span> <span class="s2">&#34;https://xxx-proj.oss-cn-shanghai.aliyuncs.com&#34;</span><span class="p">,</span>
        <span class="nx">changeOrigin</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">ws</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="nx">pathRewrite</span><span class="o">:</span> <span class="p">{</span>
            <span class="s2">&#34;^/ossUpload&#34;</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
</code></pre></div><p>由于 Vue 编译后为纯静态文件，导致我部署到 Nginx 访问不到这个<code>/ossUpload</code>路径，于是只能加个<code>proxy_pass</code>规则。</p>
<pre><code>      location ^~/ossUpload {
        proxy_pass https://xxx-proj.oss-cn-shanghai.aliyuncs.com/;
</code></pre><p>加上后发现上传报错，直接在 Vue 启动开发模式发现上传 OSS 的状态码是<code>204</code>, 看到这个想到<code>websocket</code>的配置需要设置<code>http_upgrade</code>的一些配置，于是配置上去正常上传了。
最终 Nginx 配置如下</p>
<pre><code>      location ^~/ossUpload {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-NginX-Proxy true;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;upgrade&quot;;
        proxy_pass https://xxx-proj.oss-cn-shanghai.aliyuncs.com/;
</code></pre><blockquote>
<p>时间过去比较久， 一些细节忘记了 - -</p>
</blockquote>
]]></content></item><item><title>Google SRE 运维解密笔记</title><link>https://painso.com/posts/tech/2020/google-sre-how/</link><pubDate>Wed, 23 Sep 2020 11:00:43 +0800</pubDate><guid>https://painso.com/posts/tech/2020/google-sre-how/</guid><description>本书对于 SRE 的定义
我们认为如果软件工程师主要专注于设计和构建软件系统，那么应该有另外一种职业专注于整个软件系统的生命周期管理。从其设计一直到部署，历经不断改进，最后顺利退役。这样一种职业必须具备非常广泛的技能，但是和其他职业的专注点都不同。Google 将这个职业称为站点可靠性工程师(SRE: Site Reliability Engineering)。
&amp;ldquo;无论对一个软件系统运行原理掌握得多么彻底，也不能阻止人犯意外错误。&amp;rdquo;
只有靠着对细节的不懈关注，做好充足的灾难预案和准备工作，时刻警惕着，不放过一切机会去避免灾难发生。这就是 SRE 最重要的理念！
第一章：介绍 不能将碰运气当成战略。 - SRE 俗语
SRE 团队要承担以下几类职责
可用性改进 延迟优化 性能优化 效率优化 变更管理 监控 紧急事务处理 容量规划与管理 在保障服务 SLO 的前提下最大化迭代速度 在企业中，最主要的矛盾就是迭代创新的速度与产品稳定程度之间的矛盾。 在 SRE 模型中，我们选择正面面对这种矛盾，使用的工具是错误预算。
&amp;ldquo;错误预算&amp;quot;起源于这样一个理念： 任何产品都不是，也不应该做到 100%可靠(显然这并不适用于心脏起博器和防抱死系统等)。因为对最终用户来说，99.999%和 100%的可用性是没有实质区别的。
多少才是？
基于用户的使用习惯，服务可靠性要达到什么程度用户才会满意？ 如果这项服务的可靠程度不够，用户是否有其他的替代选择？ 服务的可靠程度是否会影响用户对这项服务的使用模式？ 如果一个服务的可靠性目标是 99.99%，那么错误预算就是 0.01%。这意味着产品研发部门和 SRE 部门可以在这个范围内将预算用于新功能上线或产品创新等任何事情。
监控系统 监控系统是 SRE 团队监控服务质量和可用性的一个主要手段。
一个需要人工阅读邮件和分析警报来决定目前是否需要采取某种行动的系统本质上就是错误的。监控系统不应该依赖人来分析警报信息，而是应该由系统自动分析，仅当需要用户执行某种操作时，才需要通知用户。
一个监控系统应该只有三类输出
紧急警报 - alert 意味着收到警报的用户需要立即执行某种操作，目标是解决某种已经发生的问题，或者是避免即将发生的问题。</description><content type="html"><![CDATA[<p>本书对于 SRE 的定义</p>
<blockquote>
<p>我们认为如果软件工程师主要专注于设计和构建软件系统，那么应该有另外一种职业专注于整个软件系统的生命周期管理。从其设计一直到部署，历经不断改进，最后顺利退役。这样一种职业必须具备非常广泛的技能，但是和其他职业的专注点都不同。Google 将这个职业称为站点可靠性工程师(SRE: Site Reliability Engineering)。</p>
</blockquote>
<p>&ldquo;无论对一个软件系统运行原理掌握得多么彻底，也不能阻止人犯意外错误。&rdquo;</p>
<p><strong>只有靠着对细节的不懈关注，做好充足的灾难预案和准备工作，时刻警惕着，不放过一切机会去避免灾难发生。这就是 SRE 最重要的理念！</strong></p>
<h2 id="第一章介绍">第一章：介绍</h2>
<blockquote>
<p>不能将碰运气当成战略。 - SRE 俗语</p>
</blockquote>
<p>SRE 团队要承担以下几类职责</p>
<ul>
<li>可用性改进</li>
<li>延迟优化</li>
<li>性能优化</li>
<li>效率优化</li>
<li>变更管理</li>
<li>监控</li>
<li>紧急事务处理</li>
<li>容量规划与管理</li>
</ul>
<h3 id="在保障服务-slo-的前提下最大化迭代速度">在保障服务 SLO 的前提下最大化迭代速度</h3>
<p>在企业中，最主要的矛盾就是迭代创新的速度与产品稳定程度之间的矛盾。
在 SRE 模型中，我们选择正面面对这种矛盾，使用的工具是<code>错误预算</code>。</p>
<blockquote>
<p>&ldquo;错误预算&quot;起源于这样一个理念： 任何产品都不是，也不应该做到 100%可靠(显然这并不适用于心脏起博器和防抱死系统等)。因为对最终用户来说，99.999%和 100%的可用性是没有实质区别的。</p>
</blockquote>
<p>多少才是？</p>
<ul>
<li>基于用户的使用习惯，服务可靠性要达到什么程度用户才会满意？</li>
<li>如果这项服务的可靠程度不够，用户是否有其他的替代选择？</li>
<li>服务的可靠程度是否会影响用户对这项服务的使用模式？</li>
</ul>
<p>如果一个服务的可靠性目标是 99.99%，那么错误预算就是 0.01%。这意味着产品研发部门和 SRE 部门可以在这个范围内将预算用于新功能上线或产品创新等任何事情。</p>
<h3 id="监控系统">监控系统</h3>
<p>监控系统是 SRE 团队监控服务质量和可用性的一个主要手段。</p>
<blockquote>
<p>一个需要人工阅读邮件和分析警报来决定目前是否需要采取某种行动的系统本质上就是错误的。监控系统不应该依赖人来分析警报信息，而是应该由系统自动分析，仅当需要用户执行某种操作时，才需要通知用户。</p>
</blockquote>
<p>一个监控系统应该只有三类输出</p>
<ul>
<li>紧急警报 - alert
<blockquote>
<p>意味着收到警报的用户需要立即执行某种操作，目标是解决某种已经发生的问题，或者是避免即将发生的问题。</p>
</blockquote>
</li>
<li>工单 - ticket
<blockquote>
<p>意味着接受工单的用户应该执行某种操作，但是并非立即执行。系统并不能自动解决目前的情况，但是如果一个用户在几天内执行这项操作，系统不会受到任何影响。</p>
</blockquote>
</li>
<li>日志 - logging
<blockquote>
<p>平时没有人需要关注日志信息，但是日志信息依然被收集起来以备调试和事后分析时使用。正确的做法是平时没人会去主动阅读日志，除非有特殊需要。</p>
</blockquote>
</li>
</ul>
<h3 id="变更管理">变更管理</h3>
<p>大概 70%的生产事故由某种部署的变更而触发。变更管理的最佳实践是使用自动化来完成以下几个项目</p>
<ul>
<li>采用渐进式发布机制</li>
<li>迅速而准确地检测到问题的发生</li>
<li>当出现问题时，安全迅速地回退改动</li>
</ul>
<h3 id="需求预测和容量规划">需求预测和容量规划</h3>
<p>自然增长 - 随着用户使用量上升，资源用量也上升。
非自然增长 - 新功能的发布、商业推广以及其他商业因素在内。</p>
<p>容量规划有几个步骤是必需的</p>
<ul>
<li>必须有一个准确的自然增长需求预测模型，需求预测的时间应该超过资源获取的时间</li>
<li>规划中必须有准确的非自然增长的需求来源的统计</li>
<li>必须有周期性压力测试，以便准确地将系统原始资源信息与业务容量对应起来</li>
</ul>
<h2 id="第二章google-生产环境-sre-视角">第二章：Google 生产环境： SRE 视角</h2>
<p>为了区分物理服务器和软件服务器的概念，本书采用以下两种说法</p>
<ul>
<li>物理服务器 - machine
<blockquote>
<p>代表具体的硬件(有时候也代表一个 VM 虚拟机)</p>
</blockquote>
</li>
<li>软件服务器 - server
<blockquote>
<p>代表一个对外提供服务的软件系统</p>
</blockquote>
</li>
</ul>
<p>一个典型的 Google 数据中心的拓扑结构</p>
<ul>
<li>约 10 台物理服务器组成一个<code>机柜 - Rack</code></li>
<li>数台机柜组成一个机柜<code>排 - Row</code></li>
<li>一排或多排机柜组成了一个<code>集群 - Cluster</code></li>
<li>一般来说，一个<code>数据中心 - Datacenter</code>包含多个集群</li>
<li>多个相邻的数据中心组成了一个<code>园区 - Campus</code></li>
</ul>
<h3 id="存储">存储</h3>
<ul>
<li>Lustre</li>
<li>HDFS</li>
</ul>
<h3 id="网络">网络</h3>
<p>带宽控制器(Bandwidth Enforcer， BwE)负责管理所有可用带宽。优化带宽的使用的目的不仅仅是降低成本。利用中心化的路由计算，可以解决以前在分布式路由模式下难以解决的流量迁移问题。</p>
<h3 id="研发环境">研发环境</h3>
<p>除了一些开源项目之外(Android 和 Chrome 等)，其他 Google 软件工程师全部使用同一个共享软件仓库开发。这同时也对日常工作流带来一些挑战</p>
<ul>
<li>如果一个工程师遇到了他工作的项目之外的一个基础组件问题，他可以直接修改这个问题，向管理者提交一份改动申请(changelist, CL)，等待代码评审，最后直接提交。</li>
<li>任何对自己项目代码的改动也需要代码评审。</li>
</ul>
<h3 id="任务和数据的组织方式">任务和数据的组织方式</h3>
<p>假设压力测试的结果现实，我们的软件服务器可以每秒处理大概 100 个请求(100 QPS)。通过对用户进行的调查显示，我们预计峰值流量会达到 3470 QPS，为了处理这些流量，至少需要 35 个任务实例。但是，由于以下几点考量，我们最终决定至少采用 37 个实例，也就是<code>N+2</code>模式</p>
<ul>
<li>在更新过程中，有一个任务实例将会短暂不可用，只有 36 个实例可提供服务。</li>
<li>如果另外一个物理服务器同时也出现问题，那么另外一个任务实例也受到影响，只剩 35 个实例可以对外服务，刚好可以满足峰值要求。</li>
</ul>
<h2 id="第三章拥抱风险">第三章：拥抱风险</h2>
<p>过分追求稳定性限制了新功能的开发速度和将产品交付给用户的速度，并且很大程度地增加了成本，这反过来又减少了一个团队可以提供的新功能数量。
此外，用户通常不会注意到一项服务在高可靠性和极端可靠性直接的差异，因为用户体验主要是受较不可靠的组件主导，例如手机移动网络或他们正在使用的设备。用户在一个有着 99%可靠性的智能手机上是不能分辨出 99.99%和 99.999%的服务可靠性的区别的！</p>
<p>SRE 旨在寻求快速创新和高效的服务运营业务之间的风险的平衡，而不是简单地将服务在线时间最大化。这样一来，我们可以优化用户的整体幸福感，平衡系统的功能、服务和性能</p>
<h3 id="管理风险">管理风险</h3>
<p>可靠性进一步提升的成本并不是线性增加的 - 可靠性的下一个改进可能比之前的改进成本增加 100 倍。
高昂的成本主要存在与</p>
<ul>
<li>冗余物理服务器/计算资源成本
<blockquote>
<p>通过投入冗余设备，我们可以进行常规的系统离线或其他预料之外的维护性操作。又或者可以利用一些空间来存储奇偶校验码块，以此来提供一定程度的数据持久性保证。</p>
</blockquote>
</li>
<li>机会成本
<blockquote>
<p>这类成本由某一个组织承担。当该组织分配工程资源来构建减少风险的系统或功能，而非那些用户直接可用的功能时需要承担这些成本。这些工程师不能再从事为终端用户设计新功能和新产品的工作。</p>
</blockquote>
</li>
</ul>
<p>我们会努力提高一项服务的可靠性，但不会超过该服务需要的可靠性。当设定了一个可用性目标为 99.99%时，我们即使要超过这个目标，也不会超过太多，否则会浪费为系统增加新功能、清理技术债务或降低运营成本的机会。</p>
<h3 id="度量服务的风险">度量服务的风险</h3>
<p>为了使问题在我们运行的各种类型的系统中易于处理，并且保持一致，我们选择主要关注<code>计划外停机</code>这个指标。</p>
<p>计划外停机时间是由服务预期的可用性水平所体现，通常我们愿意用提供的&quot;9&quot;系列的数字来体现，比如可用性为<code>99.9%/99.99%或99.999%</code>。每个额外的&quot;9&quot;都对应一个向<code>100%</code>可用性的数量级上提高。对于系统服务而言，这个指标通常是基于系统正常运行时间比例的计算得出的。</p>
<h4 id="公式-3-1-基于时间的可用性">公式 3-1： 基于时间的可用性</h4>
<p>可用性=系统正常运行时间/(系统正常运行时间+停机时间)</p>
<h4 id="公式-3-2-合计可用性">公式 3-2： 合计可用性</h4>
<p>可用性=成功请求数/总的请求数</p>
<blockquote>
<p>例如，一个每天可用性目标为 99.99%的系统，一天要接受 2.5M 个请求。它每天出现少于 250 个错误即可达到预计的可用性目标。</p>
</blockquote>
<h3 id="服务的风险容忍度">服务的风险容忍度</h3>
<h4 id="辨别消费者服务的风险容忍度">辨别消费者服务的风险容忍度</h4>
<p>消费者服务通常会有一个对应的产品团队，是该服务的商业所有者。比如说，Search、Google Maps 和 Google Docs，它们每一个都有自己的产品经理。这产品经理负责了解用户和业务，在市场上塑造产品的定位。存在产品团队时，我们能够更好地通过这个团队来讨论服务的可靠性要求。在没有专门的产品团队情况下，建立系统的工程师们经常在知情或不知情的情况下扮演了这个角色。
评价服务的风险容忍度时，有许多需要考虑的因素。</p>
<ul>
<li>需要的可用性水平是什么？</li>
<li>不同类型的失败对服务有不同的影响吗？</li>
<li>我们如何使用服务成本来帮助风险曲线上定位这个服务？</li>
<li>有哪些其他重要的服务指标需要考虑？</li>
</ul>
<h5 id="可用性目标">可用性目标</h5>
<p>对于某个 Google 服务而言，服务的可用性目标通常取决于它提供的功能，以及这项服务在市场上是如何定位的。下面列出了要考虑的一些问题</p>
<ul>
<li>用户期望的服务水平是什么？</li>
<li>这项服务是否直接关系收入(我们的收入或我们的客户的收入)？</li>
<li>这是一个有偿服务，还是免费服务？</li>
<li>如果市场上有竞争对手，那些竞争对手提供的服务水平如何？</li>
<li>这项服务是针对消费者还是企业的？</li>
</ul>
<p>例如<code>Google Apps for Work</code>，这个服务的主要用户是企业类用户，包括大型企业和中小型企业。服务的中断不仅会影响 Google 本身，也会影响到这些企业。对于这类服务，我们可能会设置季度性的外部可用性目标为 99.9%。同时，我们会设置一个更高的内部可用性目标，以及签署一份如果我们未能达到外部目标的处罚性协议。
Youtube 则需要截然不同的考虑。尽管当时 Youtube 已经有了一个很出色的产品，但它仍然在不断变化和快速发展着。因此，我们为 Youtube 设定了相比我们企业的产品更低的可用性目标，因为快速发展更加重要。</p>
<h5 id="故障的类型">故障的类型</h5>
<p>假设有一个联系人管理应用程序，一种情况是导致用户头像显示失败的间歇性故障，另一种情况是将 A 用户的私人联系人列表显示给 B 用户的故障。第一种情况显然是一个糟糕的用户体验，SRE 会努力去快速地解决这个问题。然而，在第二种情况下，暴露私人数据的风险可能会破坏基本的用户信任。因此，在第二种情况下，在进行调试和事后的数据清理时，完全停止该服务更加恰当。
有时候，我们可以接受计划内的常规服务中断。Ads 前端曾经就是这样的一种服务。因为这项工作大部分发生在正常工作时间内，我们认为维修窗口中发生的偶然的、正常的、计划之中的故障是可以接受的，并且我们把这些故障看作计划内停机(不影响 SLO？)，而不是计划外停机时间。</p>
<h5 id="成本">成本</h5>
<p>在为每一项服务确定可用性目标时，可以考虑如下问题</p>
<ul>
<li>构建和运维可用性再多一个&quot;9&quot;的系统，收益会增加多少？</li>
<li>额外的收入是否能抵消为了达到这一可靠性水平所付出的成本？</li>
</ul>
<blockquote>
<p>可靠性目标： 99.9% -&gt; 99.99%</p>
<p>增加的可用性： 0.09%</p>
<p>服务收入： 100 万美元</p>
<p>改进可用性后的价值： 100 万美元 x 0.0009 = 900 美元</p>
<p>在这种情况下，如果可用性提高一个&quot;9&quot;的成本不到 900 美元，那就是合理的投资。如果成本超过 900 美元，那么成本将超过预计增加的收入。</p>
</blockquote>
<h3 id="错误预算的构建过程">错误预算的构建过程</h3>
<ul>
<li>产品管理层定义一个 SLO，确定一项服务在每个季度的正常运行时间。</li>
<li>实际在线时间是通过一个中立的第三方来测算的： 我们的监控系统。</li>
<li>这两个数字的差值就是这个季度中剩余的不可靠性预算。</li>
<li>只要测算出的正常在线时间高于 SLO，也就是说，只要仍然有剩余的错误预算，就可以发布新版本。</li>
</ul>
<h3 id="本章关键点">本章关键点</h3>
<ul>
<li>管理服务的可靠性主要在与管理风险，而且管理风险的成本可能很高。</li>
<li>100%可能永远都不是一个正确的可靠性目标： 不仅是不可能实现的，而且它通常比一项服务的用户期望的可靠性大得多。我们要将服务风险和愿意承担的业务风险相匹配。</li>
<li>错误预算在 SRE 和产品研发团队之间调整激励，同时强调共同责任。错误预算使得讨论发布速率更容易，同时可有效地减少任何关于事故的讨论。这样，多个团队可以毫无怨言地对生产环境风险度达成一致。</li>
</ul>
<h2 id="第四章-服务质量目标">第四章: 服务质量目标</h2>
<p>这个过程中，我们需要利用一些主观判断结合过去的经验对服务的理解来定义一些<code>服务质量指标(SLI)</code>、<code>服务质量目标(SLO)</code>，以及<code>服务质量协议(SLA)</code>。这三项分别是指该服务最重要的一些基础指标、这些指标的预期值，以及当指标不符合预期时的应对计划。</p>
<h3 id="服务质量术语">服务质量术语</h3>
<h4 id="指标indicator">指标(Indicator)</h4>
<p>SLI 是指服务质量指标 - 该服务的某项服务质量的一个具体量化指标。
大部分服务都将<code>请求延迟</code>(处理请求所消耗的时间)作为一个关键 SLI。其他常见的 SLI 包括<code>错误率</code>(请求处理失败的百分比)、<code>系统吞吐量</code>(每秒请求数量)等。这些度量通常是汇总过的： 在某一个度量时间范围内将原始数据收集起来，计算速率、平均值、百分比等汇总数据。
<code>可用性</code>(availability)是另外一个重要的 SLI，代表服务可用时间的百分比。对于数据存储系统来说，<code>持久性</code>(durability) - 数据能够完整保存的时间也是一个重要指标。</p>
<h4 id="目标objective">目标(Objective)</h4>
<p>SLO 是服务质量目标 - 服务的某个 SLI 的目标值，或者目标范围。
SLO 的定义是 <code>SLI ≤ 目标值</code>，或者<code>范围下限 ≤ SLI ≤ 范围上限</code>。</p>
<h4 id="协议agreement">协议(Agreement)</h4>
<p>SLA 是服务质量协议 - 指服务与用户之间的一个明确的，或者不明确的协议，描述了在达到或者没有达到 SLO 之后的后果。
区别 SLO 和 SLA 的一个简单的方法就是问&quot;如果 SLO 没有达到目标，有什么后果？&rdquo; 如果没有定义明确的后果，那么我们就肯定是在讨论一个 SLO，而不是 SLA。</p>
<h3 id="指标在实践中的应用">指标在实践中的应用</h3>
<h4 id="运维人员和最终用户各关心什么">运维人员和最终用户各关心什么</h4>
<p>我们不应该将监控系统中的所有指标都定义 SLI；只有理解用户对系统的真实需求才能真正决定哪些指标是否有用。一般来说四五个具有代表性的指标对系统健康程度的评估和关注就足够了。
常见的服务，根据它们的相关 SLI 通常会归类为以下几个大类。</p>
<ul>
<li><code>用户可见的服务系统</code>，例如莎士比亚搜索服务的前端服务器通常关系可用性、延迟，以及吞吐量。换句话说： 是否能正常处理请求？每个请求花费的时间是多少？多少请求可以被处理？</li>
<li><code>存储系统</code>通常强调： 延迟、可用性和数据持久性。换句话说： 读写数据需要多少时间？我们是否可以随时访问数据？数据是否一段时间内还能被读取？</li>
<li><code>大数据系统</code>，例如数据处理流水线系统，一般来说关系吞吐量和端到端延迟。换句话说： 处理了多少数据？数据从输入到产出需要多少时间？(某些流水线任务还会关注某个单独处理阶段的延迟)</li>
<li>所有的系统都应该关注： <code>正确性</code>。是否返回了正确的回复，是否读取了正确的数据，或者进行了正确的数据分析操作。正确性是系统健康程度的一个重要指标，但是它更关注系统内部的数据，而不是系统本身，所以这通常不是 SRE 直接负责的。</li>
</ul>
<h3 id="目标在实践中的应用">目标在实践中的应用</h3>
<p>我们应该从思考(或者调研)用户最关心的方面入手，而非从现在能度量什么入手。用户真正关心的部分经常是度量起来很困难，甚至是不可能的，所以我们需要以某种形式近似。如果我们只是从可以简单度量的数值入手，最终的 SLO 的作用就会很有限。
因此，与其选择指标，再想出对应的目标，不如从想要的目标反向推导出具体的指标。</p>
<h4 id="目标的选择">目标的选择</h4>
<ul>
<li>不要仅以目前的状态为基础选择目标
<blockquote>
<p>了解系统的各项指标和限制非常重要，但是仅仅按照当前系统的标准制定目标，而不从全局出发，可能会导致团队被迫长期运维一个过时的系统，没有时间去推动架构重构等任务</p>
</blockquote>
</li>
<li>保持简单
<blockquote>
<p>SLI 中过于复杂的汇总模式可能会掩盖某种系统性能的变化，同时也更难以理解。</p>
</blockquote>
</li>
<li>避免绝对值
<blockquote>
<p>虽然要求系统可以在没有任何延迟增长的情况下无限扩张，或者&quot;永远&quot;可用是很诱人的，但是这样的要求是不切实际的。就算有一个系统能够做到这一点，它也需要花很长时间来设计和构建，同时运维也很复杂，最关键的是，这可能比用户可以接受的(甚至是很开心接受的)标准要高太多。</p>
</blockquote>
</li>
<li>SLO 越少越好
<blockquote>
<p>应该仅仅选择足够的 SLO 来覆盖系统属性，一定要确保每一个 SLO 都是必不可少的： 如果我们无法针对某个 SLO 达标问题说服开发团队，那么可能这个 SLO 就是不必要的(<strong>如果 SRE 团队无法说服研发团队接受任何一个 SLO，那么这个产品可能压根不需要 SRE 团队的支持</strong>)。然而，不是所有的产品属性都能用 SLO 表达，用户的&quot;满意度&quot;就很难。</p>
</blockquote>
</li>
<li>不追求完美
<blockquote>
<p>我们可以随着时间流逝了解系统行为之后优化 SLO 的定义。刚开始可以以一个松散的目标开始，逐渐收紧。这比一开始制定一个困难的目标，在出现问题时放松要好的多。</p>
</blockquote>
</li>
</ul>
<h4 id="控制手段">控制手段</h4>
<p>SLI 和 SLO 在决策系统运维时也非常有用</p>
<ol>
<li>监控并且度量系统的 SLI</li>
<li>比较 SLI 和 SLO，以决定是否需要执行操作</li>
<li>如果需要执行操作，则要决定究竟什么操作需要被执行，以便满足目标</li>
<li>执行这些操作
例如，如果在第 2 步中，请求延迟正在上涨，无操作的话，会在几个小时内超出 SLO 范围。第 3 步则会测试服务器是否是 CPU 资源不够，同时增加一些 CPU 来分散负载。没有 SLO 的话，我们就不知道是否(或者何时)需要执行该操作。</li>
</ol>
<h2 id="第五章-减少琐事">第五章: 减少琐事</h2>
<blockquote>
<p>如果系统正常运转中需要人工干预，应该将此视为一种 BUG。&ldquo;正常&quot;的定义会随着系统的进步而不断改变。</p>
</blockquote>
<p>SRE 要把更多的时间花费在长期项目研发上而非日常运维中。因为术语<code>日常运维</code>可能会被误解，我们在这里使用一个专门的词语 - <code>琐事(toil)</code>。</p>
<h3 id="琐事的定义">琐事的定义</h3>
<ul>
<li>手动性</li>
<li>重复性的</li>
<li>可以被自动化的</li>
<li>战术性的</li>
<li>没有持久价值</li>
<li>与服务同步线性增长</li>
</ul>
<h3 id="什么算做工程工作">什么算做工程工作</h3>
<p>典型的 SRE 活动分为如下几类</p>
<ul>
<li>软件工程</li>
<li>系统工程</li>
<li>琐事</li>
<li>流程负担</li>
</ul>
<h3 id="琐事繁多是不是一定不好">琐事繁多是不是一定不好</h3>
<p>琐事不太多的时候，已知的和重复性的工作有一种让人平静的功效。琐事可能是低风险低压力的活动，有些员工甚至喜欢做这种类型的工作。
如果琐事特别繁重，那就应该非常担忧。
琐事有害的因素</p>
<ul>
<li>职业停滞</li>
<li>士气低落
另外，牺牲工程实践而做琐事会对 SRE 组织的整体发展造成损害</li>
<li>造成误解</li>
<li>进展缓慢</li>
<li>开创先例</li>
<li>促进摩擦产生</li>
<li>违反承诺</li>
</ul>
<h3 id="本章小结">本章小结</h3>
<p>如果我们都致力于每一周通过工程工作消除一点琐事，就可以持续性地整顿服务。我们就可以将更多的力量投入到扩大服务规模的工程工作上去，或者是进行下一代的服务的架构设计，又或者是建立一套跨 SRE 使用的工具链。让我们多创新，少干琐事吧！</p>
<h2 id="第六章-分布式系统的监控">第六章: 分布式系统的监控</h2>
<h3 id="术语定义">术语定义</h3>
<ul>
<li>监控(monitoring)
<blockquote>
<p>收集、处理、汇总，并且现实关于某个系统的实时量化数据，例如请求的数量和类型，错误的数量和类型，以及处理用时，应用服务器的存活时间等。</p>
</blockquote>
</li>
<li>白盒监控(white-box monitoring)
<blockquote>
<p>依靠系统内部暴露的一些性能指标进行监控。包括日志分析、Java 虚拟机提供的监控接口，或者一个列出内部统计数据的 HTTP 接口的监控。</p>
</blockquote>
</li>
<li>黑盒监控(black-box monitoring)
<blockquote>
<p>通过测试某种外部用户可见的系统行为进行监控。</p>
</blockquote>
</li>
<li>监控台页面(dashboard)
<blockquote>
<p>提供某个服务核心指标一览服务的应用程序(一般是基于 Web 的)。该应用程序可能会提供过滤(filter)功能、选择(selector)功能等，但是主要的功能是用来显示系统最重要的指标。该程序同时可以显示相应团队的一些信息，包括目前工单的数量、最高优先级的 Bug 列表、目前的 on-call 工程师和最近进行的生产发布等。</p>
</blockquote>
</li>
<li>警报(alert)</li>
<li>根源问题(root cause)
<blockquote>
<p>如果这个问题被修复，就可以保证这种问题不会再以同样的方式发生。</p>
</blockquote>
</li>
<li>节点或机器(node/machine)</li>
<li>推送(push)</li>
</ul>
<h3 id="为什么要监控">为什么要监控</h3>
<ul>
<li>分析长期趋势</li>
<li>跨时间范围的比较，或者是观察实验组与控制组之间的区别</li>
<li>报警
<blockquote>
<p>某项东西出现故障了，需要有人立刻修复！或者某项东西可能很快会出现故障，需要有人尽快查看。</p>
</blockquote>
</li>
<li>构建监控台页面</li>
<li>临时性的回溯分析(也就是在线调试)
<blockquote>
<p>我们的请求延迟刚刚大幅增加，有没有其他的现象同时发生？</p>
</blockquote>
</li>
</ul>
<p>我们不应该仅仅因为&quot;某些东西看起来有点问题&quot;就发出警报。
高效的警报系统应该提供足够的信息，并且误报率非常低。
虽然平时看看流量图表可能很有意思，但是 SRE 团队通常会小心地避免任何需要某个人&quot;盯着屏幕寻找问题&quot;的情况。
监控系统最重要的一点就是整个&quot;生产故障，人工处理紧急警报，简单定位和深入调试&quot;的过程必须要保持非常简单，必须能被团队中任何一个人所理解。</p>
<h3 id="现象与原因">现象与原因</h3>
<p>监控系统应该解决两个问题： 什么东西出故障了，以及为什么出故障。
&ldquo;什么东西出故障了&quot;即为现象(symptom)，&ldquo;为什么&quot;则代表了原因(可能只是中间原因，并不是根源问题)。</p>
<h3 id="黑盒监控与白盒监控">黑盒监控与白盒监控</h3>
<p>黑盒监控与白盒监控最简单的区别是： 黑盒监控是面向现象的，代表了目前正在发生的，而非预测会发生的问题，即&quot;系统现在有故障&rdquo;。白盒监控则大量依赖对系统内部信息的检测，如系统日志、抓取提供指标信息的 HTTP 节点等。</p>
<h3 id="4-个黄金指标">4 个黄金指标</h3>
<p>监控系统的 4 个黄金指标分别是 <code>延迟、流量、错误和饱和度(saturation)</code>。</p>
<ul>
<li>延迟
<blockquote>
<p>服务处理某个请求所需要的时间。<strong>这里区分成功请求和失败请求很重要</strong>。例如，某个由于数据库连接丢失或者其他后端问题造成的 HTTP 500 错误可能延迟很低。计算总体延迟时，如果将 500 回复的延迟也计算在内，可能会产生误导性的结果。</p>
</blockquote>
</li>
<li>流量
<blockquote>
<p>使用系统中的某个高层次的指标对系统负载需求所进行的度量。对于 Web 服务器来说，该指标通常是每秒 HTTP 请求数量，同时可能按请求类型分类(静态请求与动态请求)。针对音频流媒体系统来说，这个指标可能是网络 I/O 速率，或者并发会话数量。针对键值对存储系统来说，指标可能是每秒交易数量，或每秒的读取操作数量。</p>
</blockquote>
</li>
<li>错误
<blockquote>
<p>请求失败的速率，要么是显示失败(HTTP 500)，要么是隐式失败(HTTP 200 回复中包含了错误内容)。</p>
</blockquote>
</li>
<li>饱和度
<blockquote>
<p>服务容量有多&quot;满&rdquo;。通常是系统中目前最为受限的某种资源的某个具体指标的度量。(在内存受限的系统中，即为内存；在 I/O 受限的系统中，即为 I/O)。</p>
</blockquote>
</li>
</ul>
<p>如果我们度量所有这 4 个黄金指标，同时在某个指标出现故障时发出警报(或者对于饱和度来说，快要发生故障时)，能做到这些，服务的监控就基本差不多了。</p>
<h3 id="关于长尾问题">关于长尾问题</h3>
<p>区分平均值的&quot;慢&quot;和长尾值的&quot;慢&quot;的一个最简单的办法是将请求按延迟分组计数(可以用来制作直方图)： 延迟 0 ～ 10ms 之间的请求数量有多少，30 ～ 100ms 之间，100 ～ 300ms 之间等。将直方图的边界定义为指数型增长(这个例子中倍数为 3)是直观展现请求分布的最好方式。</p>
<h3 id="度量指标时采用合适的精度">度量指标时采用合适的精度</h3>
<p>系统的不同部分应该以不同的精度进行度量</p>
<ul>
<li>观察 1 分钟内的 CPU 平均值可能会错失导致长尾延迟过高的某种较长时间的 CPU 峰值现象。</li>
<li>对于一个每年停机时间小于 9 小时的 Web 服务来说(年度可用绿 99.9%)，每分钟检测 1 次或 2 次的监控频率可能过于频繁。</li>
<li>对目标可用率为 99.9%的某个服务每 1 分钟或者 2 分钟检查一次硬盘剩余空间可能也是没必要的。</li>
</ul>
<h3 id="简化直到不能再简化">简化，直到不能再简化</h3>
<p>设计监控系统时一定要追求简化。在选择需要检测什么的时候，将下列信息记在心里</p>
<ul>
<li>那些最能反映真实故障的规则应该越简单越好，可预测性强，非常可靠。</li>
<li>那些不常用的数据收集、汇总，以及警报配置应该定时删除(某些 SRE 团队的标准是一个季度没有用到一次即将其删除)。</li>
<li>收集到的信息，但是没有暴露给任何监控台，或者被任何警报规则使用的应该定时删除。</li>
</ul>
<h3 id="将上述理念整合起来">将上述理念整合起来</h3>
<ul>
<li>该规则是否能检测到一个目前检测不到的、紧急的、有操作性的，并且即将发生或者已经发生的用户可见故障？</li>
<li>是否可以忽略这条警报？什么情况可能会导致用户忽略这条警报，如何避免？</li>
<li>这条警报是否确实显示了用户正在受到影响？是否存在用户没有受到影响也可以触发这条规则的情况？例如测试环境和系统维护状态下发出的警报是否应该被过滤掉。</li>
<li>收到警报后，是否要进行某个操作？是否需要立即执行该操作，还是可以等到第二天早上再进行？该操作是否可以被安全地自动化？该操作的效果是长期的，还是短期的？</li>
<li>是否也会有其他人收到相关的紧急警报，这些紧急警报是否是不必要的？</li>
</ul>
<p>以上这些问题反映了在应对紧急警报上的一些深层次理念</p>
<ul>
<li>每当收到紧急警报时，应该立即需要我进行某种操作。每天只能进入紧急状态几次，太多就会导致&quot;狼来了&quot;效应。</li>
<li>每个紧急警报都应该是可以具体操作的。</li>
<li>每个紧急警报的回复都应该需要某种智力分析过程。如果某个紧急警报只是需要一个固定的机械动作，那么它就不应该成为紧急警报。</li>
<li>每个紧急警报都应该是关于某个新问题的，不应该彼此重叠。</li>
</ul>
<h2 id="第七章-google-的自动化系统的演进">第七章: Google 的自动化系统的演进</h2>
<blockquote>
<p>&ldquo;黑科技&quot;之外，就只剩自动化和机械化了。</p>
</blockquote>
<h3 id="自动化的价值">自动化的价值</h3>
<ul>
<li>一致性
<blockquote>
<p>没有人能像机器一样永远保持一致。</p>
</blockquote>
</li>
<li>平台性</li>
<li>修复速度更快</li>
<li>行动速度更快</li>
<li>节省时间</li>
</ul>
<blockquote>
<p>如果我们持续产生不可自动化的流程和解决方案，我们就继续需要人来进行系统维护。如果我们要雇佣人来做这项工作，就像是用人类的鲜血、汗水和眼泪养活机器。这就像是一个没有特效但是充满了愤怒的系统管理员的 Matrix 世界。</p>
</blockquote>
<h3 id="自动化分类的层次结构">自动化分类的层次结构</h3>
<p>自动化演进遵循以下路径</p>
<ol>
<li>没有自动化
<blockquote>
<p>手动将数据库主进程在多个位置之间转移</p>
</blockquote>
</li>
<li>外部维护的系统特定的自动化系统
<blockquote>
<p>SRE 在 TA 的主目录中保存了一份故障转移脚本</p>
</blockquote>
</li>
<li>外部维护的通用自动化系统
<blockquote>
<p>SRE 将数据库支持添加到了每个人都在使用的&quot;通用故障转移&quot;脚本中</p>
</blockquote>
</li>
<li>内部维护的系统特定的自动化
<blockquote>
<p>数据库自己发布故障转移脚本</p>
</blockquote>
</li>
<li>不需要任何自动化的系统
<blockquote>
<p>数据库注意到问题发生，在无需人工干预的情况下进行故障转移</p>
</blockquote>
</li>
</ol>
<h2 id="第八章-发布工程">第八章: 发布工程</h2>
<h3 id="发布工程师的角色">发布工程师的角色</h3>
<p>Google 是一个数据驱动的公司，发布工程也不例外。各种各样的工具提供各种各样的数据。例如，从代码修改提交到部署到生产环境一共需要多长时间(也就是发布速度)。大部分这些工具都是由发布工程师设计和开发的。</p>
<h3 id="发布工程哲学">发布工程哲学</h3>
<ul>
<li>自服务模型
<blockquote>
<p>发布工程师开发工具，制定最佳实践，以便让产品研发团队可以自己掌控和执行自己的发布流程。发布过程是真正的自动化的，工程师仅仅在发生问题时才会进行干预。</p>
</blockquote>
</li>
<li>追求速度
<blockquote>
<p>有些团队每小时构建一次，然后在所有可用的构建版本中选择某个版本进行发布。</p>
</blockquote>
</li>
<li>密闭(hermetic)性
<blockquote>
<p>构建工具必须确保一致性和可重复性。</p>
</blockquote>
</li>
<li>强调策略和流程
多层安全和访问控制机制可以确保在发布过程中只有指定的人才能执行指定的操作。我们主要关注的操作有如下
<ul>
<li>批准源代码改动 - 通过源代码仓库中的配置文件决定</li>
<li>指定发布流程中需要执行的具体动作</li>
<li>创建心的发布版本</li>
<li>批准初始的集成请求(也就是一个以某个源代码仓库版本为基础的构建请求)，以及后续的<code>cherry picking</code>请求</li>
<li>实际部署某个发布版本</li>
<li>修改某个项目的构建配置文件</li>
</ul>
</li>
</ul>
<h3 id="配置管理">配置管理</h3>
<ul>
<li>使用主分支版本配置文件</li>
<li>将配置文件与二进制文件打包在同一个包中</li>
<li>将配置文件打包成配置文件包</li>
<li>从外部存储服务中读取配置文件</li>
</ul>
<p>总之，项目负责人在分发和管理配置文件时有多种选择，可以按需决定究竟那种最适合该服务。</p>
<h3 id="小结">小结</h3>
<p>当采用合适的工具、合理化的自动化方式，以及合理的政策时，开发团队和 SRE 都无需担心如何发布软件。发布过程可以像一个按钮那么简单。</p>
<ul>
<li>如何管理包的版本？</li>
<li>应该采用持续构建和部署的模型，还是应该定期构建？</li>
<li>发布的频率应该怎样？</li>
<li>应该使用什么策略管理配置文件？</li>
<li>哪些发布过程的指标比较有用？</li>
</ul>
<p>任何组织都应该先花一些时间定义自己的发布政策。</p>
<h2 id="第九章-简单化">第九章: 简单化</h2>
<blockquote>
<p>可靠性只有靠对最大程度的简化不断追求而得到。</p>
</blockquote>
<p>一个对 SRE 管理系统方法的总结是: &ldquo;我们的工作最终是在系统的灵活性和稳定性上维持平衡&rdquo;。</p>
<h3 id="乏味是一种美德">乏味是一种美德</h3>
<p>关注必要复杂度和意外复杂度之间的区别非常关键。必要复杂度是一个给定的情况所固有的复杂度，不能从该问题的定义中移除，而意外复杂度则是不固定的，可以通过工程上的努力来解决。例如，编写一个 Web 服务器需要处理快速提供 Web 页面的必要复杂度。但是如果我们用 Java 编写该服务器，试图减少 GC 的影响就可能引入意外复杂度。</p>
<p>为了最小化意外复杂度，SRE 团队应该</p>
<ul>
<li>在他们所负责的系统引入意外复杂度时，及时提出抗议</li>
<li>不断地努力消除正在接手的和已经负责运维的系统的复杂度</li>
</ul>
<h3 id="我绝对不放弃我的代码">我绝对不放弃我的代码</h3>
<p>工程师经常对于自己编写的代码形成一种情感依附，这些冲突在大规模清理源代码树的时候并不少见。一些人可能会提出抗议</p>
<ul>
<li>如果我们以后需要这个代码怎么办？</li>
<li>我们为什么不只是把这些代码注释掉，这样稍后再使用它的时候会更容易吗？</li>
<li>为什么不增加一个功能开关？</li>
</ul>
<p>这些都是糟糕的建议。版本控制系统更改反转很容易，数百行的注释代码则会造成干扰和混乱(尤其是当源文件继续演进时)；</p>
<p>那些由于功能开关没有启用而没有被执行的代码，就像一个定时炸弹一样等待爆炸。</p>
<h3 id="最小-api">最小 API</h3>
<blockquote>
<p>不是在不能添加更多的时候，而是没有什么可以去掉的时候，才能达到完美。</p>
</blockquote>
<h2 id="第十章-基于时间序列数据进行有效报警">第十章: 基于时间序列数据进行有效报警</h2>
<blockquote>
<p>让查询来得更猛烈些吧，让寻呼机永远保持沉默！</p>
</blockquote>
<p>一个大型系统不应该要求运维人员持续关注其中的无数个小组件，而是应该自动汇总所有的信息，自动抛弃其中的异常情况。监控系统应该主要从高级服务质量目标层面进行报警，但是也应该保持足够的粒度，可以追踪到某个具体的组件。</p>
<h3 id="borgmon">Borgmon</h3>
<p>Google 之外的时间序列监控系统</p>
<ul>
<li>Riemann</li>
<li>Heka</li>
<li>Bosun</li>
<li>Prometheus</li>
</ul>
<h2 id="第十一章-on-call-轮值">第十一章: on-call 轮值</h2>
<h3 id="安全感">安全感</h3>
<p>现代理论研究指出，在面临挑战时，一个人会主动或非被动(潜意识)地选择下列两种处理方法之一</p>
<ul>
<li>依赖直觉，自动化、快速行动</li>
<li>理性、专注、有意识地进行认知类活动</li>
</ul>
<p>当处理复杂系统问题时，第二种行事方式是更好的，可能会产生更好的处理结果，以及计划更周全的执行过程</p>
<p>在应急事故处理过程中，凭直觉操作和快速反应(例如服务出现问题就先重启服务器)看起来都是很有用的方法，但是这些方法都有自己的缺点。直觉很可能是错误的，而且直觉一般都不是基于明确的数据支持的。因此在处理问题的过程中，on-call 工程师很可能由于凭直觉去解释问题产生的原因而浪费宝贵的时间。快速反应主要是由习惯而产生的，习惯性的快速反应的动作后果一般都没有经过详细考虑，这可能会将灾难扩大。</p>
<p>在应急时间处理过程中，最理想的方法论是这样的： 在有足够的数据支撑的时候按步骤解决问题，同时不停地审视和验证目前所有的假设。</p>
<h2 id="第十二章-有效的故障排查手段">第十二章: 有效的故障排查手段</h2>
<blockquote>
<p>值得警惕的是，理解一个系统应该如何工作并不能使人成为专家。只能靠调查系统为何不能正常工作才行。</p>
<p>&ndash; Brian Redman</p>
</blockquote>
<blockquote>
<p>系统正常，只是该系统无数异常情况下的一种特例</p>
<p>&ndash; John Allspaw</p>
</blockquote>
<p>新手们常常不能有效地进行故障排查，是因为这个过程理想情况下同时需要两个条件。</p>
<ol>
<li>对通用的故障排查过程的理解(不依靠任何特定系统)</li>
<li>对发生故障的系统的足够了解</li>
</ol>
<p>虽然只依靠通用性的流程和手段可以处理一些系统中的问题，但我们发现这样做通常是很低效的。对系统内部运行的了解往往限制了 SRE 处理系统问题的有效性，对系统设计方式的构建原理的知识是不可或缺的。</p>
<h3 id="常见的陷阱">常见的陷阱</h3>
<p>造成低效的故障排查过程的原因通常集中在定位(triage)、检查和诊断环节上，主要由于对系统不够了解而导致。下面列举了一系列常见的陷阱：</p>
<ol>
<li>关注了错误的系统现象，或者错误地理解了系统现象的含义。这样会在错误的方向上浪费时间。</li>
<li>不能正确修改系统的配置信息、输入信息或者系统运行环境，造成不能安全和有效地测试假设。</li>
<li>将问题过早地归结为极为不可能的因素(例如认为是宇宙射线造成数据变化，虽然有可能发生，但是并不应该在解决问题初期做这个假设)，或者念念不忘之前曾经发生过的系统问题，认为一旦发生过一次，就有可能再次发生。</li>
<li>试图解决与当前系统问题相关的一些问题，却没有认识到这些其实是巧合，或者这些问题其实是由于当前系统的问题造成的。(比如发现数据库压力大的情况下，环境温度也有所上升，于是试图解决环境温度的问题)</li>
</ol>
<p>要避免第 1 点和第 2 点，需要更详细地学习系统的运行原理，同时了解分布式系统运行的基本模式。</p>
<p>要避免第 3 点，需要记住，不是所有的失败情况的出现概率都相同，就像谚语中说的&quot;当你听到蹄子声响时，应该先想到马，而不是斑马。&quot;，而且尤其要注意的是，当所有的可能都存在的时候，我们应该优先考虑最简单的解释</p>
<blockquote>
<p>在某些系统中某一类问题可能完全被排除了。例如，在细心设计的集群文件系统实现中，由于某个磁盘出现问题导致延迟问题是非常不可能的了。</p>
<p>熬卡姆剃刀原理(Occam&rsquo;s Razor)，系统中可能同时存在多个问题，尤其是有的时候是因为系统中存在一系列低危害性问题，联合起来，才可以解释目前的系统状态。而不是系统中存在一个非常罕见的问题，同时造成了所有的问题现象。</p>
</blockquote>
<p>理解我们逻辑推理过程中的错误是避免这些问题发生的第一步，这样才能更有效地解决问题。区分我们知道什么，我们不知道什么，我们还需要知道什么可以让查找问题原因和修复问题更容易。</p>
<h3 id="定位">定位</h3>
<p>在大型问题中，你的第一反应可能是立即开始故障排查过程，试图尽快找到问题根源，这是错误的！不要这样做。</p>
<p>正确的做法应该是：<code>尽最大可能让系统恢复服务。</code>这可能需要一些应急措施，比如将用户流量从问题集群导向其他还在正常工作的集群，或者将流量彻底抛弃以避免连锁过载问题，或者关闭系统的某些功能以降低负载。缓解系统问题应该是你的第一要务。在寻找问题根源的时候，不能使用系统的用户并没有得到任何帮助。当然，快速定位问题时仍应该及时保存问题现场，比如服务日志等，以便后续进行问题根源分析时使用。</p>
<h3 id="什么哪里-和-为什么"><code>什么</code>、<code>哪里</code> 和 <code>为什么</code></h3>
<p>在一个异常系统中，该系统经常还在执行某种操作，只是这些操作不是你想让系统执行的操作。那么找出系统目前正在执行<code>什么</code>，然后通过询问该系统<code>为什么</code>正在做这些操作，以及系统的资源都被用在了`哪里 可以帮助你了解系统为什么出错。</p>
<h2 id="第十三章-紧急事件响应">第十三章： 紧急事件响应</h2>
<h3 id="所有的问题都有解决方案">所有的问题都有解决方案</h3>
<p>时间和经验一再证明，系统不但一定会出问题，而且会以没有人能够想到的方式出问题，Google 学到的最关键的一课是，所有的问题都有对应的解决方案，虽然对一个面对着疯狂报警的工程师来说，它可能不是那么显而易见。如果你想不到解决方法，那么就在更大的范围寻求帮助。找到更多的团队成员，寻求更多的帮助，做你需要做的一切事情，但是要快。最高的优先级永远是将手头问题迅速解决。很多时候，触发这个事故的人对事故了解得最清楚，一定要充分利用这一点。</p>
<p>非常重要的是，一旦紧急事件过去之后，别忘了留出一些时间书写事后报告。</p>
<h3 id="为事故保留记录">为事故保留记录</h3>
<p>没有什么比过去的事故记录是更好的学习资料了。历史就是学习其他人曾经犯的错误。在记录中，请一定要诚实，一定要事无巨细。尤其重要的是，提出关键的问题。时刻寻找如何能在战术及战略上避免这项事故的发生。公布和维护事后报告，确保全公司的每个人都能从中学到你所学到的知识。</p>
<p>在事故结束后，确保自己和其他人切实完成事故中总结的待办事项。这样能够避免未来再次发生以同样的因素触发的同样的事故。一旦开始仔细学习过去的事故，我们就能更好地避免未来的事故。</p>
<h3 id="提出那些大的甚至不可能的问题-假如-">提出那些大的，甚至不可能的问题： 假如&hellip; &hellip;</h3>
<p>没有什么比现实更真实的测试了。我们应该提出一些大的、没有确切答案的问题。</p>
<ul>
<li>假如整栋楼的电源坏了怎么办？</li>
<li>假如网络设备被泡在半米深的水里怎么办？</li>
<li>如果主数据中心突然下线了怎么办？</li>
<li>如果有人入侵了你的 Web 服务器怎么办？</li>
</ul>
<p>你怎么处理？找谁联系？谁来付钱？有对应的应急计划吗？你知道你的系统会如何应对吗？如上述所说正在发生，你能够立即最小化灾难损失吗？坐在你旁边的人能做到同样的事吗？</p>
<h2 id="第十四章-紧急事故管理">第十四章： 紧急事故管理</h2>
<h3 id="无流程管理的事故剖析">无流程管理的事故剖析</h3>
<p>每个人都在尽力解决问题，起码他们自己看起来是这样。那么问题是怎么变得月来越糟呢？在这次处理的过程中，有几个常见的问题导致了整个事故的失控。</p>
<ul>
<li>
<p>过于关注技术问题</p>
<blockquote>
<p>我们倾向于按技术能力指标聘请 Jack。所以他在灾难过程中忙着不断改变系统，英勇地尝试解决服务问题一点也不奇怪。由于他正忙着执行技术操作，所以根本没有时间和精力去思考如何能够通过其他手段缓解当前服务的问题。</p>
</blockquote>
</li>
<li>
<p>沟通不畅</p>
<blockquote>
<p>同样的原因，Jack 根本没有时间清晰和有效地与其他人进行沟通，没有人知道他们的同事正在做什么。业务部门领导十分愤怒，最终用户正在面临服务问题，而其他可以帮忙调试和处理问题的工程师却没有被充分地利用起来。</p>
</blockquote>
</li>
<li>
<p>不请自来</p>
<blockquote>
<p>Tom 正在出于善意修改系统，但是他没有通知其他的同事 &ndash; 甚至 Jack。严格地讲，Jack 是故障排除的主要负责人，Tom 的操作将服务状况变得更糟了。</p>
</blockquote>
</li>
</ul>
<h3 id="紧急事故的流程管理要素">紧急事故的流程管理要素</h3>
<p>Google 的紧急事故管理系统是基于 <code>ICS - Incident Command System</code>的，这套体系以清晰和灵活性著称。</p>
<h4 id="嵌套式职责分离">嵌套式职责分离</h4>
<p>在事故处理中，让每个人清楚自己的职责是非常重要的。明晰职责反而能够使每个人可以更独立自主地解决问题，因为他们不用担心怀疑他们的同事都在干什么。</p>
<p>以下是系统中可以分配给某个人的角色</p>
<ul>
<li>事故总控 <code>incident command</code></li>
<li>事物处理团队 <code>operational work</code></li>
<li>发言人 <code>communication</code></li>
<li>规划负责人 <code>planning</code></li>
</ul>
<h4 id="什么时候对外宣布事故">什么时候对外宣布事故</h4>
<ul>
<li>是否需要引入第二个团队来帮助处理问题？</li>
<li>这次事故是否正在影响最终用户？</li>
<li>在集中分析一小时后，这个问题是否依然没有得到解决？</li>
</ul>
<p>事故流程管理最佳实践</p>
<ul>
<li>划分优先级</li>
<li>事前准备</li>
<li>信任</li>
<li>反思</li>
<li>考虑替代方案</li>
<li>练习</li>
<li>换位思考</li>
</ul>
<h2 id="第十五章-事后总结-从失败中学习">第十五章 事后总结： 从失败中学习</h2>
<p>学习是避免失败的最好办法 - Devin Carraway</p>
<p>事后总结条件为</p>
<ul>
<li>用户可见的宕机时间或者服务质量降级程度达到一定标准</li>
<li>任何类型的数据丢失</li>
<li>on-call 工程师需要人工介入的事故(包括回滚、切换用户流量等)</li>
<li>问题解决耗时超过一定限制</li>
<li>监控问题(预示着问题是有人工发现的，而非报警系统)</li>
</ul>
<h2 id="第二十二章-处理连锁故障">第二十二章： 处理连锁故障</h2>
<h3 id="缓存">缓存</h3>
<p>应该确保每个新添加的缓存要么是延迟类缓存，要么是经过良好设计的、可安全使用的容量类缓存。<code>有些时候加入缓存是为了提高性能，但是最后却变成了强制依赖。</code></p>
<h3 id="连锁故障的触发条件">连锁故障的触发条件</h3>
<ul>
<li>进程崩溃</li>
<li>进程更新</li>
<li>新的发布</li>
<li>自然增长</li>
<li>计划中或计划外的不可用</li>
</ul>
<h3 id="解决连锁故障的立即步骤">解决连锁故障的立即步骤</h3>
<ul>
<li>增加资源</li>
<li>停止健康检查导致的任务死亡
<blockquote>
<p>进程任务的健康检查 - 这个进程是否相应请求。对集群管理系统有用</p>
<p>服务级别的健康检查 - 该进程是否能够回复这种类型的请求。对负载均衡器有用</p>
</blockquote>
</li>
<li>重启软件服务器
<ul>
<li>Java 服务器处于 GC 死亡螺旋中
<blockquote>
<p>由于 CPU 资源减少，请求处理速度变慢，内存使用率上升，导致 GC 触发次数增多，导致 CPU 资源进一步的减少。我们将此称之为<code>GC 死亡螺旋</code></p>
</blockquote>
</li>
<li>某些正在处理的请求因为没有截止时间设置而正在消耗资源(如正在占用线程)</li>
<li>死锁</li>
</ul>
</li>
<li>丢弃流量
<ol>
<li>解决最初的触发原因(如增加容量)</li>
<li>将负载降低到一定水平，使得崩溃停止。考虑在这里激进一些，如果整个服务都在崩溃循环中，那么可以考虑降低流量到 1%的水平</li>
<li>允许大部分的软件服务器恢复健康</li>
<li>逐渐提升负载水平</li>
</ol>
</li>
<li>进入降级模式</li>
<li>消除批处理负载</li>
<li>消除有害的流量</li>
</ul>
<h2 id="第二十三章-管理关键状态-利用分布式共识来提高可靠性">第二十三章 管理关键状态： 利用分布式共识来提高可靠性</h2>
<p>一组服务进程可能想要可靠地对以下问题产生共识</p>
<ul>
<li>哪个进程目前是该组进程的领头人(leader)?</li>
<li>本组中都包含哪些进程?</li>
<li>是否已经将某个消息成功地插入了某个分布式队列?</li>
<li>某个进程目前是否还持有租约(hold a lease)?</li>
<li>数据存储中的某个键值对应的值是什么?</li>
</ul>
<p>当你需要实现领头人选举(leader election)、关键性共享状态或分布式锁等时，建议采用某种正式证明过的、详尽测试过的分布式共识系统来实现。如果不严肃对待这个问题很可能会导致事故，在更糟的情况下，将造成某种非常难以修复的数据一致性问题。</p>
<p>CAP 理论</p>
<ul>
<li>
<p>一致性 <strong>C</strong>onsistency （等同于所有节点访问同一份最新的数据副本）</p>
</li>
<li>
<p>可用性 <strong>A</strong>vailability （每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）</p>
</li>
<li>
<p>分区容错性 <strong>P</strong>artition tolerance （以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。）</p>
<blockquote>
<p>CAP 理论论述了一个分布式系统不可能同时满足以下三个要求</p>
<ul>
<li>每个节点上所见数据是一致的</li>
<li>每个节点都可以访问数据</li>
<li>可以承受网络分区问题</li>
</ul>
<p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解 CAP 理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了 C 性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了 A 性质。除非两个节点可以互相通信，才能既保证 C 又保证 A，这又会导致丧失 P 性质。</p>
</blockquote>
</li>
</ul>
]]></content></item><item><title>Google SRE 生存指南笔记</title><link>https://painso.com/posts/tech/2020/real-world-sre-notes/</link><pubDate>Wed, 09 Sep 2020 21:55:43 +0800</pubDate><guid>https://painso.com/posts/tech/2020/real-world-sre-notes/</guid><description>《SRE 生存指南》- Nat Welch
系统中断响应与正常运行时间最大化
SRE 简介 SRE 是指 Site Reliability Engineer (网站可靠性工程师)。他是软件工程师和系统管理员的结合，一个 SRE 工程师基本上需要掌握很多知识：算法，数据结构，编程能力，网络编程，分布式系统，可扩展架构，故障排除。 - 百度百科
Site： 一个网站
Reliability： 被定义为&amp;quot;值得信赖的质量或一贯可靠的质量&amp;rdquo;
Engineering： 被定义为&amp;quot;熟练地运用技巧以达到某种目的的行动&amp;rdquo;
语录
故障是常态，正常才是异常
个人不应该害怕事故，而是要确信如果事故发生，团队将会响应和改进系统，而不是关注发生事故带来的耻辱和愤怒。事故是我们可以从中学习的东西，而不是让人害怕和羞耻的事情！
1. 简介 SRE 的目标是提高服务可靠性，帮助业务实现并改善用户的服务体验 SRE 定义： 一个专注于熟练地维护一个网站以使其持续可靠的领域 互联网上的软件永远做不到完全可靠，这里有两个原因
互联网是一个分布式系统，各部分经常出现故障，这会影响服务可用性。 软件是人编写的，所以 Bug 不可避免，而 Bug 会导致系统宕机。 可靠性层次结构 Mikey Pyramid</description><content type="html"><![CDATA[<p>《SRE 生存指南》- Nat Welch</p>
<blockquote>
<p>系统中断响应与正常运行时间最大化</p>
</blockquote>
<ul>
<li>SRE 简介</li>
</ul>
<blockquote>
<p>SRE 是指 Site Reliability Engineer (网站可靠性工程师)。他是软件工程师和系统管理员的结合，一个 SRE 工程师基本上需要掌握很多知识：算法，数据结构，编程能力，网络编程，分布式系统，可扩展架构，故障排除。 - 百度百科</p>
</blockquote>
<ul>
<li>
<p>Site： 一个网站</p>
</li>
<li>
<p>Reliability： 被定义为&quot;值得信赖的质量或一贯可靠的质量&rdquo;</p>
</li>
<li>
<p>Engineering： 被定义为&quot;熟练地运用技巧以达到某种目的的行动&rdquo;</p>
</li>
<li>
<p>语录</p>
</li>
<li>
<p>故障是常态，正常才是异常</p>
</li>
<li>
<p>个人不应该害怕事故，而是要确信如果事故发生，团队将会响应和改进系统，而不是关注发生事故带来的耻辱和愤怒。事故是我们可以从中学习的东西，而不是让人害怕和羞耻的事情！</p>
</li>
</ul>
<h2 id="1-简介">1. 简介</h2>
<ul>
<li>SRE 的目标是提高服务可靠性，帮助业务实现并改善用户的服务体验</li>
<li>SRE 定义： 一个专注于熟练地维护一个网站以使其持续可靠的领域</li>
</ul>
<blockquote>
<p>互联网上的软件永远做不到完全可靠，这里有两个原因</p>
<ol>
<li>互联网是一个分布式系统，各部分经常出现故障，这会影响服务可用性。</li>
<li>软件是人编写的，所以 Bug 不可避免，而 Bug 会导致系统宕机。</li>
</ol>
</blockquote>
<ul>
<li>
<p>可靠性层次结构 Mikey Pyramid</p>
<p><img src="../../../../images/real-world-sre-notes/image-20200909223259992.png" alt="image-20200909223259992"></p>
<ol>
<li>用户体验</li>
<li>开发</li>
<li>容量规划</li>
<li>测试与发布</li>
<li>事后回顾</li>
<li>事故响应</li>
<li>监控</li>
</ol>
<blockquote>
<p>以上七点都被<strong>沟通</strong>所包围，因为每一层都需要沟通才能成功。</p>
</blockquote>
</li>
<li>
<p>在加入或新项目评估新服务时，请遵循下面的一系列步骤</p>
<ol>
<li>弄清楚团队结构。团队里谁负责什么？谁说了算？</li>
<li>查找团队为其服务或项目编写的任何文档。</li>
<li>让某人绘制出系统架构图。让他们向你展示什么连接到哪个服务、什么依赖于这个项目、数据如何流经服务，以及项目如何部署。</li>
</ol>
</li>
<li>
<p>进行每个环节时提出以下问题</p>
<ul>
<li>服务有监控机制吗？</li>
<li>团队有事故响应的计划吗？</li>
<li>团队有事故回顾报告吗？它们存放在哪里？</li>
<li>服务是怎么被测试的？项目有发布计划吗？</li>
<li>有人曾经做过扩展计划吗？</li>
<li>能使用什么工具来改进服务？</li>
<li>当前的可靠性水平是否提供了令人满意的用户体验？</li>
</ul>
<blockquote>
<p>人的时间和精力都是有限的，因此你总是需要与更多的人共同协作，所以一定要慢慢来。
走慢点意味着事情不那么容易会被遗漏。你也不希望每个服务的基础还没来得及打好就崩塌了。</p>
</blockquote>
</li>
</ul>
<h2 id="2-监控">2. 监控</h2>
<p>首先需要确定质量标准是什么，并确保系统持续逼近或保持在质量标准极限范围内。其次需要系统地关注这项工作而不是随机地查看一下系统。</p>
<h3 id="监控的类型">监控的类型</h3>
<ol>
<li>
<p>指标</p>
<p>即性能数字，例如磁盘空间使用率、接收的数据包数量、CPU 负载等等</p>
</li>
<li>
<p>日志</p>
<p>日志用来记录事故，通常也包含一些数字与数据，但往往结构松散。有些是完整的<code>json</code>数据块，有些是人工格式的文本字符串</p>
</li>
</ol>
<p>对于 Web 程序最常见的指标是错误数、请求数和请求持续时间，最常见的日志是错误堆栈跟踪。</p>
<p>简称</p>
<ul>
<li>
<p><code>ERD (Error Counts, Request Counts, Request Duration)</code>或<code>RED</code></p>
</li>
<li>
<p><code>REL (Requests, Errors, Latency)</code></p>
<blockquote>
<p>我比较喜欢第二种称呼，容易理解</p>
</blockquote>
</li>
</ul>
<p>监控应用三连：</p>
<ol>
<li>怎么知道服务处于正常状态？</li>
<li>怎么知道它不正常？</li>
<li>如何定义它是正常的？</li>
</ol>
<p>**从基础开始</p>
<p>如果你的服务是 Web 服务器，那么首先要确保能够收集错误数、请求数和请求持续时间<code>ERD</code></p>
<p>对于后台服务使用<code>IDS (Instrusion Detection Systems) 入侵检测系统</code></p>
<p>有了基础才能开始扩展</p>
<p>用户通过上传服务器上传图片，后上传服务器写入本地磁盘并检查这些图片，将元数据存储到数据库中，然后将图片上传到云存储服务</p>
<p><img src="../../../../../images/real-world-sre-notes/image-20200912084914408.png" alt="上传图像服务的实例图"></p>
<p>哪些指标可以告诉你此服务器正在执行工作？</p>
<ul>
<li>请求错误数、请求持续时间和请求总数(<strong>ERD</strong>)： 因为这是 Web 服务器，也是监控的底线</li>
<li>上传的字节数： 这将说明所使用的网络带宽。因为一些请求可能非常大，但因为并非每个请求都是一样的，我们想知道进入服务器的数据量是否开始出现峰值。</li>
<li>图像大小(以字节为单位)： 这从不同的角度提供了相同的信息。在接收到字节并对其进行处理之后，最终的图像有多大？例如，通过这种途径，如果上传客户端发生变化(例如新的 iPhone 使用更高像素的镜头，或者在图像发送前使用压缩算法对图像进行压缩)，那么我们可以看到与调整网络带宽对比的效果。</li>
<li>上传的图片： 此指标仅在看到重大变化时才有用。如果遇到了与之前差异非常大的图片，这或许可以解释是什么导致了系统服务中断。</li>
<li>数据库中的图像元数据记录数： 将其记录数与上传的图像数量进行比较，以确保在数据库关闭时不会丢弃图像数据</li>
<li>存储中的图像数量： 这可以确保图像最终被正确保存。如果没有正确保持，则可能云存储已关闭或存在网络问题</li>
</ul>
<h3 id="黑盒监控与白盒监控">黑盒监控与白盒监控</h3>
<p>在考虑要监控的内容时，通常有两个考虑的方向 - 黑盒监控和白盒监控。</p>
<p>黑盒监控假设监控工具对应用程序一无所知或知之甚少。通常它是一个探测或一系列常规请求，以检查事情是否按预期方式工作。</p>
<p>白盒监控是对代码的监测。它知道程序是如何工作的，因为它来自程序内部。如果以飞机的电子设备进行类比，那么白盒监控就是驾驶仓内的仪表，黑盒监控则是飞机飞过无线电塔是发送和接收的更新。</p>
<h3 id="slislo-和错误预算简介">SLI、SLO 和错误预算简介</h3>
<ul>
<li><strong>SLI</strong> <code>Service Level Indicator</code> 服务水平指标</li>
</ul>
<blockquote>
<p>对于业务来说可能是最重要的指标。对网站来说，一个常见的 SLI 是请求得到正常响应的百分比；对于其他类型服务来说，SLI 可以是性能指标，例如在 100ms 内返回搜索结果的百分比。</p>
</blockquote>
<ul>
<li>
<p><strong>SLO</strong> <code>Service Level Objective</code> 服务水平目标</p>
<blockquote>
<p>是围绕 SLI 构建的目标。它通常是一个百分比，并与一个时间范围挂钩。例如，时间段是最后 30 天、最后 24 小时、当前财务季度等等。它通常以一个带有一连串 9 的数字来度量。如果有人用 99.999 来形容连续运行时间，通常他们是在说服务持续运行时间的百分比。脱离了时间的度量，SLO 的意义就不是那么大了，所以我们通常假设人们所说的是之过去 30 天内滚动累计平均值。</p>
</blockquote>
<p>以下是 SLO 的一些示例</p>
<ul>
<li>90% (1 个 9 的正常运行时间)： 这意味着 10%的停机时间，也就是说在过去 30 天里停机了 3 天。</li>
<li>99% (2 个 9 的正常运行时间)： 这意味着过去 30 天中有 1%，或者说 7.2 小时的停机时间。</li>
<li>99.9% (3 个 9 的正常运行时间)：意味着 0.1%，或者说 43.2 分钟的停机时间。</li>
<li>99.95% (3.5 个 9 的正常运行时间)： 意味着 0.05%，或者说 21.6 分钟的停机时间。</li>
<li>99.99% (4 个 9 的正常运行时间)： 意味着 0.01%，或者说 4.32 分钟的停机时间。</li>
<li>99.999% (5 个 9 的正常运行时间)： 意味着 0.001%，或者说 26 秒的停机时间</li>
</ul>
</li>
</ul>
<blockquote>
<p>数量级通常是 10 的倍数。我们通常把事情看成几个数量级，因为只有这样才能发现问题。例如，如果你可以做 10 件事，那么可能也可以做 40 件事，但并不意味着你能做 100 或 1000 件这样的事情。</p>
</blockquote>
<ul>
<li>
<p>SLA <code>Service Level Agreement</code> 服务水平协议</p>
<blockquote>
<p>是企业围绕 SLO 发布的协议。通常它要求在不满足 SLO 时向客户提供货币补偿。这在**软件即服务(Software as a Service, SaaS)**的公司中最为常见，其他公司也会有这种情况。</p>
<p>发布 SLA 的公司通常也拥有比发布的 SLA 更严格的内部 SLO，这样做公司可以在一定程度上规避向客户赔付的风险。</p>
</blockquote>
</li>
<li>
<p>错误预算</p>
<blockquote>
<p>并非每个服务都需要 SLO 和错误预算，但它们可以成为非常有用的工具，以确定何时可以安全地承担风险。有时，人们会说&quot;信任但要验证&quot;或&quot;请以数据来支持你的说法&rdquo;。在承担可能影响业务的风险时，这很重要。就像你想知道人力资源团队是否及为何要改变你的健康保险一样，你的同事希望知道，你只是以一种企业可以处理的方式来承担风险。</p>
<p>如果你走进一间没有数据的房间说&quot;是的，一切都会好的&rdquo;，这并不能令人信服。如果你能展示数据并说&quot;你可以信任我们，因为我们在过去一个月内完成了 100 次部署而没有导致停机，并且如果这次确实失败了，也可以回滚并保证仍然在我们商定的 SLO 范围内。如果由于故障的发生，本月没有满足 SLO，那么我们将停止部署，直到事情稳定下来并重新达到我们的共识&rdquo;，这就好多了。</p>
<p><strong>SLO 绝不是工作被优先考虑的唯一原因。如果只追求 SLO，那么你的团队可能会发现自己与业务需求非常脱节。如果发生这种情况，请先退后一步，通过团队合作和与管理层沟通来更好地找准自己在组织中的定位。</strong></p>
</blockquote>
</li>
</ul>
<h3 id="收集和保存监控数据">收集和保存监控数据</h3>
<ul>
<li>
<p>轮询应用程序</p>
<blockquote>
<p>轮询(也称为 Pull 拉取)程序从服务器中抓取数据，然后存储并显示数据。轮询应用程序的缺点是，需要保留一些关于所有服务的记录，以备不时之需。这不是这类程序的问题，但需要考虑的问题是： 如何知道服务器上正在运行哪些服务？轮询应用非常广泛，从谷歌这样的公司到想监视自己家 Wi-Fi 路由器的人都在使用这类程序。</p>
</blockquote>
</li>
<li>
<p>推送应用程序</p>
<blockquote>
<p>推送应用程序与轮询应用程序刚好相反。它不是从服务上主动抓取指标数据，而是被动地由服务向它传送指标数据。通常这里会存在一个中间服务，它负责把指标数据转换和聚合，然后将它们传给中央监控程序。推送应用程序常被吐槽的一点是，如果许多服务同时向它传送数据，则可能会出现问题。但推送应用程序本身没有任何问题，它们只是具有不同的架构。与轮询应用程序一样，有很多大大小小的公司使用推送应用程序，并且行之有效。</p>
</blockquote>
</li>
</ul>
<h3 id="展示监控信息">展示监控信息</h3>
<p>收集数据并将其保存到数据存储中之后，就可以向用户展示这些数据了。许多监控工具都提供了自己的可视化系统。有些其他工具则建议你构建自己的可视化系统。一个流行的开源可视化工具是 Grafana。</p>
<p>无论你使用什么来实现可视化和访问指标，人们通常会使用 4 类工具来获取和共享数据。</p>
<ul>
<li>
<p>任意查询</p>
<blockquote>
<p>每个人都需要能够自己创建查询来访问自己构建的指标和日志，原因很简单：如果人们无法访问他们，指标就毫无用处。虽然你可以为大家创建图标和仪表盘，但是工作时通常会遇到一些新的问题，需要针对指标数据存储创建新的查询以解决问题。你当然想让同事能够在没有你的情况下也能完成他们的工作。但如果你是唯一可以查询的人，那么你将很快成为&quot;查询执行者&rdquo;，或者没有人会关注指标。这两种结果对你来说都不算明智。</p>
</blockquote>
</li>
<li>
<p>图表</p>
<blockquote>
<p>图表主要用作随时间变化的数据的可视化展示。米勒定律指出，一般人头脑中只能容纳不到 10 个对象(因此很难记住具有很长一串数字的表格)，但是你却可以使用一个图表一次显示数千个数字。</p>
<p>图表的典型使用规则如下</p>
<ul>
<li>X 轴(图形的下边缘)包含时间。</li>
<li>无论绘制什么，都必须有一个键。</li>
<li>所有的轴都必须标记。</li>
<li>所有的数字都必须有单位。</li>
</ul>
</blockquote>
</li>
<li>
<p>仪表板</p>
<blockquote>
<p>构建仪表板的最佳规则是让用户看到他们需要的数据。如果你是为你自己或你的团队设计仪表板，请记住以下建议和注意事项</p>
<ul>
<li>如果打算在电视机上展示仪表板，请确保它只有几个图表，并且可以从很远的地方看清楚。如果必须跑过整个房间来到电视机旁边才能看清楚，那它可能没有达到应有的效果。</li>
<li>如果可以的话，让仪表板支持移动设备。越来越多的工程师首先在手机上检查故障和图表，然后才打开笔记本电脑进行深入排查。</li>
<li>有人建议在仪表板上一次最多展示 5 个图表，保留前 3 个图表以显示关于服务的最重要的内容。这样当页面首次加载时，最上面的内容就是你应该首要关注的地方。一个好办法是设置到其他仪表板的链接。如果你有一个关于网络流量的图表，那么下面要有指向仪表板的链接，其中包含有关网络的详细信息，以防图表显示出问题。</li>
</ul>
</blockquote>
</li>
<li>
<p>聊天机器人</p>
<blockquote>
<p>一个非常有用的工具是能够让图表出现在聊天中，或者能够从聊天中请求图表。Github 在其博客中写道，他们只需要在 Slack 中输入 <code>/graphme 20150517..20150523 @github.deploys.total</code>，就可以获取<code>github.deploys.total</code>从<code>2015年5月17日至2015年5月23日</code>的带有指标数据的图表。</p>
</blockquote>
</li>
</ul>
<h3 id="管理和维护监控数据">管理和维护监控数据</h3>
<ol>
<li>经典的、经过验证的且真实的方法 - 付钱请别人去做。自己不用去操心监控服务器是否故障、磁盘空间是否满了</li>
<li>自己构建监控系统的问题
<ol>
<li>磁盘空间
<ol>
<li>计算收集的数据量大小以及消耗存储空间的速度。如果空间有限则需要在某个时刻开始删除历史数据。解决这个问题的两种常见方法是抽样和归档。</li>
<li>投入更多的存储空间，因为硬盘价格一年比一年低。</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="他们知道有监控吗">他们知道有监控吗</h3>
<p>他们可以是你的老板、产品团队、工程团队或者你认为应该关心监控服务的任何其他人。首先要告诉他们有新的监控系统，一个包含示例图标、文档链接和仪表板的精心编写的电子邮件是第一步，这是远远不够的。下一步是以正经的语气发送消息，展示有用的图表或仪表板。例如一个令人兴奋的宣告&quot;你看到网站上个月有多少请求了吗？&rdquo;</p>
<p>第一步只是告知监控存在。</p>
<p>第二部是将其与你的生活融为一体，并不断向其他人展示其实用性。</p>
<h2 id="3-事故响应">3. 事故响应</h2>
<p>事故响应属于<code>Mikey Pyramid</code>中监控的下一个层次。事故响应建立在使用监控系统构建的数据之上，并借助反馈循环，来帮助我们加强对服务的监控。</p>
<p>这向我们展示了什么是重要的。因为如果没有警报，而是有人告诉我们服务没有正常工作，那么我们的监控就是不到位的。</p>
<h3 id="什么是事故响应">什么是事故响应</h3>
<p>事故响应通常包含以下几个动作</p>
<ol>
<li>
<p>关注，注意到有些东西不对劲</p>
<blockquote>
<p>关注是通过警报来实现的。警报就像一个 110 呼叫 - 来自一个在软件中看到错误的人的求救信息</p>
<p>人工上报可能很有用，但通常最好从自动化系统接收警报。</p>
<p>自动化系统与人类不同，它们是一致的。</p>
</blockquote>
</li>
<li>
<p>交流，告诉别人哪些东西不对劲</p>
</li>
<li>
<p>恢复，纠正不对劲的东西</p>
</li>
</ol>
<h3 id="警报">警报</h3>
<p>警报最好以多种方式发送同一个警报避免单个服务故障，<strong>警报发送失败的后果可能会非常严重</strong>。</p>
<p>警报服务</p>
<ul>
<li>PagerDuty</li>
<li>VictorOps</li>
<li>睿象云</li>
<li>OpsGenie</li>
</ul>
<p><img src="../../../../images/real-world-sre-notes/image-20200913113915619.png" alt="image-20200913113915619"></p>
<p>警报内容</p>
<ul>
<li>
<p>主题应该小于 50 个字符。这可以让接收警报的人快速了解情况。</p>
</li>
<li>
<p>使用祈使句。这尤其重要，因为当错误发生时人们常常希望给出有关如何操作的说明。例如&quot;转到 AWS 控制台并终止实例<code>i-1234567890</code>&rdquo;</p>
<blockquote>
<p><em>祈使句</em>（Imperative Sentence）是英语中的一个句式，也是用于表达命令、请求、劝告、警告、禁止等的句子。<em>祈使句</em>最常用于表达命令，因此在学校文法中也常称为命令句。</p>
</blockquote>
</li>
<li>
<p>在主题后面提供额外的注解。如果警报服务允许，警报内容应该包括实时细节，如图表或指标的评估。此外还应该包括对响应警报的人有用的文档链接。</p>
</li>
</ul>
<h3 id="沟通">沟通</h3>
<p>一旦有人接收警报并确认，他们就需要开始通报消息。<strong>无论如何你都应该每 30 分钟向所有相关人员发送一条消息。即使没有任何变化，也要告诉他们</strong>。要了解你的听众，如果没有强制要求可以不用太技术化；但如果你的听众是懂技术的，那么分享你能分享的，但要保持简明扼要。如果是内部交流，当人们需要了解更多信息时，一定要告诉他们去哪里才能找到。</p>
<p>如果在处理一个问题 10 分钟后仍然毫无头绪，那么就应该去寻求帮助。如果 TA 也不知道，那就引进其他人。慢慢地培养那些参与其中的人，直到你了解什么不起作用，以及如何使系统良好运行为止。</p>
<h3 id="事故指挥系统">事故指挥系统</h3>
<p>国家事故管理系统(National Incident Management System) 简称 NIMS</p>
<p>事故指挥系统(Incident Command System) 简称 ICS</p>
<p>ICS 的第一条规则是谁先到场负责。先到场的几乎总是值班的那个人，那么就由他来负责。如果有其他人出现，不论他的资历或所从属的组织如何，那么直到角色被授权，第一个到场的就是负责人。这样做的目的是规范化应对事故的结构，以确保不会出现多头领导的局面。你可以想象在野火场景下的这样一个结果： 一队消防队员赶到现场，他们正在处理火灾；然后，一个警察局长和消防局长出现了，一群警察也随之赶到；一场火灾，所以人们可能认为最好听从消费队长的指挥，但是正常的结构规定他们必须听从警察局长。</p>
<p>遵循 ICS，警官们在处理事故期间不必思考，因为有一个人在负责。那个第一出现在现场的人就是事故指挥官，在这种情况下，他可能是现场第一批消费对于中资历最深的人。然而，不要忘记授权。作为事故指挥官，有些任务需要去授权。上述示例中，可以让警察局长负责沟通，让消防队长负责人员调配和物资管理，请警官开展疏散工作，并指定一名警官来负责。</p>
<p><img src="../../../../images/real-world-sre-notes/image-20200913133953712.png" alt="image-20200913133953712"></p>
<h3 id="恢复系统">恢复系统</h3>
<p>平均恢复时间(Mean Time to Recovery, 简称 MTTR)</p>
<h4 id="追踪一个挂掉的系统">追踪一个挂掉的系统</h4>
<ol>
<li>
<p>首先，深呼吸。逼自己慢下来。吸气的时候数到 6，屏息的时候再数到 6，呼气的时候再数到 6，最后在再次开始这个循环之前再数到 6。这样做几次就会让你放松一点，慢慢呼吸会迫使我们在崩溃之前先检查一下自己。</p>
<blockquote>
<p>这种呼吸方法叫做盒式呼吸。它来自美国海军海豹突击队。如何冷静下来并不重要，关键是找到让自己冷静下来的方法，这样你就可以清楚地进行思考了。</p>
</blockquote>
</li>
<li>
<p>检查最近是否有部署。如果是，那么代码可能是最近才部署的。可以尝试将看到的错误与出现的新版本进行匹配。如果问题出现在这里，那么应该恢复部署并回滚到以前的版本。</p>
</li>
<li>
<p>如果回滚没有解决问题，下一个要查看的方面就是环境是否发生了变化。输入改变了吗？是否开始接收大量流量？收到的是一堆无意义或损坏的流量吗？当想出如何更改应用程序以更好地处理这种类型的错误流量时，是否开始阻止某个 IP 地址或用户代理？这是有效的流量吗？</p>
<blockquote>
<p>删除或停止响应与某种过滤器匹配的 Web 服务器的流量称为负载释放。它通常被认为是一种激进的策略，但是当某种类型的流量导致应用程序崩溃时，它就非常有用。</p>
</blockquote>
</li>
<li>
<p>如果用户输入没有改变，那么一个依赖项可能发生改变。数据库准备好了吗？我们依赖的服务是否正在运行？是否有人在没有告诉我们的情况下以应用程序不兼容的方式做了修改？</p>
</li>
<li>
<p>如果你找不到东西，那么这就是求助其他同事开始深入挖掘的好时机。这并不是永久性修复，而是将系统带回到大多数客户可以使用的状态的方法。然后，你可以让客户继续使用服务，同时与你的团队合作，制定一个长期计划，以防止再次发生这种情况。</p>
</li>
</ol>
<h4 id="警报解除">警报解除</h4>
<p>宣布警报解除的第一步是确保应用程序能够完成它该做的事，然后就可以开始解决根本问题了。请注意，第一目标始终是启动系统，而不是解决问题或找出根本原因。</p>
<p>请注意两个单独的警报解除消息： 第一个说事情应该恢复正常；第二个说警报解除，并说明何时进一步通信</p>
<p><img src="../../../../images/real-world-sre-notes/image-20200913141942334.png" alt="谷歌云生产事件记录截图"></p>
<h2 id="4-事后回顾">4. 事后回顾</h2>
<h3 id="什么是事后回顾">什么是事后回顾</h3>
<blockquote>
<p>事后回顾是发生生产事故后进行的回顾。根据组织的不同，事后回顾有许多不同的名称 - 回顾会、<strong>根本原因分析(Root Cause Analysis, 简称 RCA)</strong>、事故回顾等。大致的做法是创建一个文档，记录为什么会发生事故，并讨论涉及哪些方面，究竟发生了什么。</p>
<p>术语事后回顾(postmortem)将其定义为&quot;检查尸体以确定死因&rdquo;。有些人把软件运作过程看成具有生命的事物，因此，当一个运作过程停止时，它被描述为&quot;死了&rdquo;。</p>
</blockquote>
<p>撰写时候回顾报告正是找出根本原因的好时机。进程是如何&quot;死亡&quot;的？系统的哪部分引起了不稳定？事故发生后多久我们才注意到？为什么其他系统也失败了？</p>
<p>透明文化有助于增进信任。</p>
<h3 id="何时写事后回顾报告">何时写事后回顾报告</h3>
<p>如果有人索要事后回顾报告，那么就应该写一个。</p>
<p>&ldquo;昨晚的事故到底是怎么回事？&ldquo;或&quot;上周的服务中断会不会有回顾？&ldquo;这些都是应该创建事后回顾文档的提示。</p>
<ol>
<li>
<p>如果几天内发生了两次相同的事故，则应该写一篇事后回顾报告。</p>
<blockquote>
<p>一次包含错误代码的提交导致生产事故，然后触发了对应的回滚操作，但是包含这次回滚操作代码的发布版本却没有正确地修复最初的错误代码。或是一系列不良配置更改导致类似相关的服务中断。</p>
</blockquote>
</li>
<li>
<p>如果服务中断超过 30 分钟，则应该写一篇事后回顾报告。</p>
<blockquote>
<p>应用程序中断的时间超出了 SLI 规定的 30 分钟。也可能是连续 30 分钟无法访问应用程序。</p>
</blockquote>
</li>
</ol>
<h3 id="开展事故分析">开展事故分析</h3>
<p>事故分析是复杂的。有时你会立刻知道答案，有时则需要数小时或几天的研究。**你应该像偏执的<code>夏洛克 · 福尔摩斯</code>那样深究这个系统。从事故现场出发，深入挖掘各个方面。要谨防先入为主的观念，要意识到红鲱鱼，并且要验证你的假设。</p>
<blockquote>
<p>红鲱鱼通常用来比喻误导或分散手头任务的东西。它通常是一个有吸引力但与实际问题无关的答案或问题。</p>
</blockquote>
<h3 id="如何写事故回顾报告">如何写事故回顾报告</h3>
<p>一个大概的事后回顾报告的模板如下</p>
<ul>
<li>摘要</li>
<li>影响</li>
<li>时间表</li>
<li>根本原因</li>
<li>行动项目和附录</li>
</ul>
<blockquote>
<p>postmortem template: <a href="https://github.com/dastergon/postmortem-templates">https://github.com/dastergon/postmortem-templates</a></p>
</blockquote>
<p>在文档的顶部，添加相关人员的姓名、事件发生日期，以及文档最后一次修改的时间。</p>
<p>**BLOB (Binary Large Object, 二进制大对象)</p>
<h3 id="停止事后指责">停止事后指责</h3>
<p>SRE 的一个关键原则是，如果无可避免要经历失败，那么就竭力改变你的组织，让它对失败宽容，你可以从失败中快速恢复并吸取教训。另一个原则是可靠性是团队共同奋斗的方向。</p>
<p><strong>每个人都需要放心地提出问题，应对停机，并努力改进系统</strong>。培养这种认知水平是非常困难的，并且需要不断强化和帮助。</p>
<p>如果你很难不去责备一个人，首先，检查文档，将所有名称替换为&quot;我们&rdquo;，然后开始检查时间线。不要责备人类，每一步都要充分利用工具来防止人类犯错误。可以思考自动化可以防治人们遗漏检查表中的步骤吗？有检查清单吗？</p>
<p>不要要求人类做某事，而要找出人类不应该做某事的地方。</p>
<blockquote>
<p>核对检查清单的重要性常常以 1935 年波音飞机的坠毁作为例子，当时机组人员忘记了飞机起飞前的基本准备步骤。在实施 B-17 起飞检查清单后，在 1800 万英里内没有发生其他事故。Robert L.Helmreich 博士经常认为是检查清单得以持续受到重用的原因。他在 20 世纪 90 年代写了很多关于如何降低医院和航空事故的文章。</p>
</blockquote>
<h3 id="举行事后回顾会议">举行事后回顾会议</h3>
<blockquote>
<p>事后回顾会议是在事后回顾报告之后的进一步工作。它经常用于最后确定行动项目。讨论根本原因的发现，并使讨论始终处于安全的氛围下。</p>
</blockquote>
<p>通常，邀请参加事后回顾会议的最佳人员是那些经历事故的人 - 受影响的技术主管、产品经理和任何感兴趣的工程师。</p>
<p>在开始会议时做出声明，要求那些没有阅读事后回顾报告的人说明不读的原因或不让他们参加会议。这里的想法是，那些没有阅读事后回顾报告的人提出的一些问题或观点，而这些问题或观点可能已经在文档中有所陈述。会议不应该迎合那些为了更广泛的学习而无法花时间了解事故的人。</p>
<h3 id="小结">小结</h3>
<p>作为一名 SRE 工程师，或者作为渴望建立可靠性的组织的一部分，事后回顾报告是从处理现在到未来的过度。在<code>Mikey Pyramid</code>中，在事后回顾报告以上的所有层级都是关于未来的 - 规划和改进过程。而下层(监控和事故响应)的一切都是关于处理当前事故的。在开始思考未来之前，事后回顾报告允许我们回顾过去。</p>
<h2 id="5-测试与发布">5. 测试与发布</h2>
<p>测试表明缺陷存在，而不是不存在</p>
<p>无论测试什么，都不需要验证其反面</p>
<p>不管做什么测试，它都是迭代的，应该大致遵循科学的方法。对于那些不知道这种方法的人，或者对将此方法应用到软件开发方面感到困难的人，请遵循以下步骤。</p>
<ol>
<li>观察： 例如发现服务中断、获得一个需求，或者只是在编写软件</li>
<li>提问： 问你自己，当软件处理这种类型的输入，或者这个依赖不存在，或者软件进入这种状态时，会发生什么？</li>
<li>假设： 提出假设。在代码中，这更多的是询问你想要发生什么</li>
<li>测试： 行动并验证，代码是否以想要的方式做出了反应？</li>
<li>拒绝或通过： 如果测试失败，那么需要修改一些东西(如测试、代码、基础设施、流程等)以满足你的期望。</li>
</ol>
<p>**lint 代码检查</p>
<blockquote>
<p>lint 检查是确保代码与特定的代码规范相匹配的操作。这对于促使拥有大量开发人员的项目坚持一致的代码风格非常有用。lint 检查和测试的执行都适合使用自动化来实现。我们将对此进行简单讨论，但是在请求代码评审之前，你希望某人做的任何事情通常都是可以自动化的。</p>
</blockquote>
<h3 id="测试的种类">测试的种类</h3>
<ul>
<li>
<p>单元测试： 用于确保函数和方法正常工作</p>
</li>
<li>
<p>特性测试： 也称为冒烟测试和验收测试。它们验证特性是否正常工作</p>
</li>
<li>
<p>集成测试： 这些测试用于确保特性和系统正确地协同工作</p>
</li>
<li>
<p>负面测试</p>
<blockquote>
<p>虽然不一定是一种类型的测试，但是负面测试是需要牢记的重要方法。这个方法认为，人们总是会输入你不期望的数据。这可能是带有非法的字符或代码输入，这些字符或代码会导致安全漏洞；或者用户只是纯粹的意外操作。</p>
<p>在测试时，尽可能多地为输入提出不正常的情况。用户经常会与你的想法不同，并且总会有一些用户有不好的意图，或者给你发送不正常的输入。</p>
</blockquote>
</li>
</ul>
<h4 id="基础设施测试">基础设施测试</h4>
<p>混沌工程</p>
<ul>
<li>Netflix Chaos Monkey</li>
</ul>
<p>压力测试</p>
<ul>
<li>Apache Bench</li>
<li>Siege</li>
<li>Wrk</li>
<li>Beeswithmachineguns</li>
<li>Hey</li>
</ul>
<p>压力测试对于理解服务如何处理大量请求很有用，但是与正常的 Web 服务流量相比，这常常是不现实的。为了解决这个问题，人们经常测试生产访问量。最常用的两种方法</p>
<ul>
<li>
<p>影子测试</p>
<blockquote>
<p>影子测试是将请求记录到服务中，然后将它们在应用程序的新版本进行重放，以此来测试它</p>
</blockquote>
<p>一些工具</p>
<ul>
<li>用于 HTTP 请求的<code>vegeta</code>与<code>goreplay</code></li>
<li>用于 TCP 连接的<code>tcpreplay</code></li>
<li>用于数据库查询的<code>query-playback</code>与<code>mongoreplay</code></li>
</ul>
</li>
<li>
<p>金丝雀</p>
<blockquote>
<p>金丝雀是引入新版本的服务实例并让其获得少量访问量的一种做法。</p>
<p>形象的说法： 把脚慢慢伸进水里，看看是不是太热了。</p>
</blockquote>
</li>
<li>
<p>特性开关</p>
<blockquote>
<p>它工作起来像金丝雀，但是它使用代码。此布尔语句表示次用户是否启用该特性，然后继续。</p>
<p>例如只让 10%的登录用户看到一个特性，或者只让员工看到一个特性。通过监控，你可以看到某些代码的错误是否比其他代码更多。特性开关可能使调试变得更加困难，因为如果用户在使用服务时看到不正常的事情，那么你可能需要首先弄清楚启用了哪些特性，然后才能正确地对用户体验进行调试。</p>
</blockquote>
</li>
</ul>
<p><strong>如果没有监控，像这样的生产测试是非常危险的，因为你很少或根本看不到变更对每个人的影响。测试的全部目的是验证假设。如果无法查看测试结果，则无法验证任何内容，因此实际上没有测试任何内容。</strong></p>
<h3 id="测试流程">测试流程</h3>
<p>除测试计算机软件外，测试流程和人也很重要。</p>
<p>Google 的(DiRT， Disaster Recovery Testing 灾难恢复测试)，Google 计划大规模停机，看看团队如何反映。</p>
<p>DiRT 的例子包括使谷歌总部不可访问、关闭大量团队所依赖的系统、使数据中心离线，以及跨多个团队的统一停机计划等。</p>
<h3 id="发布">发布</h3>
<p>如果你正在发布代码，并且你没有任何办法掌握它们，那么总是存在如果出现问题则必须回滚的风险。如果回滚很容易，这不是问题，但如果不是，这将是一个大问题。</p>
<h2 id="6-容量规划">6. 容量规划</h2>
<p>容量规划需要和其他非技术部门沟通，因此懂得行业术语对开展工作至关重要。它设置了开始讨论的准入门槛。</p>
<blockquote>
<p>这些不是法律、投资或财务建议，因为你只是个工程师。在做财务决策之前，要和你的会计师、银行出纳员、财务规划师、律师、首席财务官，或者这一类管钱的人谈谈。</p>
</blockquote>
<ul>
<li>
<p>现金流</p>
<blockquote>
<p>描述有多少钱，这些钱从哪里来，去往哪里。包括收入，即钱从哪里来；以及支出，钱从哪里去。</p>
</blockquote>
</li>
<li>
<p>损益表(P&amp;L： Profits And Losses)</p>
<blockquote>
<p>通常以季度为单位，描述你有多少钱，以及这些钱如何变化。这些数字来自收入减去支出。如果结果大于零，你就有利润。如果小于零，就会有亏损</p>
</blockquote>
</li>
<li>
<p>资产负债表</p>
<blockquote>
<p>资产负债表是资产、负债和股权的列表。基本上，这包括公司所拥有的财产、债主以及股东。资产负债表的基本计算方程是资产=负债+权益。花的钱(资产)等于从银行借的钱(负债)和股票(从投资者那里得到的钱)的总和。</p>
</blockquote>
</li>
<li>
<p>资本支出与经营支出</p>
<blockquote>
<p>资本是用来定义组织所拥有的物品或资产的价值的术语。资本可以是货币、知识产权、房地产、实物商品等。资本支出是增加你拥有的资本数量的投资。经常有人说，资本支出是与带来更多收入直接相关的资金。</p>
<p>经营性支出就是除资本支出外的一些支出。它是你无法收回的投资，如保险、劳动力、人力成本、基础设施等。如果你是园艺服务者，购买割草机是资本支出，而它的燃料是经营性支出。</p>
</blockquote>
</li>
<li>
<p>投资回报率</p>
<blockquote>
<p>也叫 ROI(Return on Investment) 。在金融界，这通常是一个百分比。为了计算这个百分比，需要用赚的钱减去最初投资的本金，然后处以本金。公式就是 ROI=净货币/初始投资。常常有人问，&ldquo;我们为什么这样做，我们期望得到什么回报？&ldquo;答案并不总是金钱：有时是机会或者实物。</p>
</blockquote>
</li>
<li>
<p>成本中心与利润中心</p>
<blockquote>
<p>成本中心与利润中心通常按照与资本支出的经营性支出类似的方式分开。成本中心和利润中心都是一群人所在的机构。投资利润中心就意味着投资能转化为销售的产品。反过来，成本中心是其余的一切。因此，人力资源(HR)部门通常是一个成本中心，因为它对于企业来说是必要的，但对产品的生产不是必要的。根据公司的不同，软件开发人员可以被认为是成本中心或利润中心。</p>
</blockquote>
</li>
</ul>
<h3 id="为什么需要计划">为什么需要计划</h3>
<p>童子军座右铭 - 做好准备，容量规划就是做好应对不可避免的变化的准备。其背后的理论是，在万事具备与毫无准备仅凭临场应对直接寻找平衡。你永远不可能完全准备好面对你所不知道的风险。所以，相反，你应该制定一个大概的计划，这个计划允许有临场发挥的空间，并且还能解决目前所知道的问题。你制定的计划越长远，临场发挥的空间就越大。</p>
<p>例如： 如果你的计划提前了两三年，那么你可能甚至不知道你的组织到那时可能支持什么产品，而如果你的计划是给之后一个月制定的，那么你可能对业务上将要发生的事情了如指掌。</p>
<h3 id="定义一个规划">定义一个规划</h3>
<ol>
<li>当前的容量是多少？</li>
<li>何时达到容量极限？</li>
<li>应该如何更改容量？</li>
<li>执行规划</li>
</ol>
<blockquote>
<p>横向扩展是为了增加服务器的实例数量；而垂直扩展则是为了提升单个服务器实例的性能。</p>
</blockquote>
<p>自动扩容方程式</p>
<p>阀值 = (1 - 最大保留数量/正在运行的实例总数量)x100</p>
<h3 id="公布">公布</h3>
<ul>
<li>按季度算，明年我需要多少预算</li>
<li>用预算来做什么</li>
<li>预算能花多久</li>
</ul>
<h3 id="架构---性能变化的根源">架构 - 性能变化的根源</h3>
<p>通常情况下，将缓存放在正确的位置或删除依赖项将极大地改变性能。</p>
<p>架构决策还可以对容量规划产生显著影响。强烈建议你尝试参与架构更改规划，其原因有两个。</p>
<ol>
<li>你已经了解了基础设施的工作方式，以及代码如何在其上面运行。基于这些知识，你可以在规划过程中提供一个全新的角度来看待问题。</li>
<li>做出的决定应该且非常可能会影响其他系统可用的资源数量。一些架构决策可能会明显地且有损其他系统，或者增加基础设施的成本，超出你能够负担的水平。</li>
</ol>
<p>一个例子是在 Web 服务器前添加<code>Varnish(HTTP 缓存系统)</code>，并在<code>Accept-Language</code>头上设置<strong><code>Vary</code></strong>，不对其进行序列化。</p>
<p>例如用户 A 发送<code>en-uk、en-us</code>，用户 B 发送<code>en-us、en-uk</code>，用户 C 发送<code>en-uk</code>，那么你可能期望将它们发送为一个相同的版本给网站。但是，由于没有对 HTTP 头进行序列化，<code>Varnish</code>将分开存储 3 个缓存，而不是一个换成，因此这 3 个用户都将获得未缓存的内容。</p>
<h3 id="本章小结">本章小结</h3>
<p>如果技术是要销售的产品，那么技术团队就处于利润中心；而如果是帮助公司成功的，那么就属于成本中心。</p>
<p>在评估新技术时，通常会从成本多少，如何节省人力，以及如何改善公司几个方面来评估。</p>
<p><strong>例如每台服务器每月支付 20 美元以改进监控。但是如果你没有提及它有助于防止服务中断的事实，而类似的中断会导致公司在 2020 年花费 10,000 美元，或者为超过一个月的时间段进行容量规划，那么你可能永远无法为你的项目获得所需的资金。</strong></p>
<h2 id="7-构建工具">7. 构建工具</h2>
<p>SRE 的诞生是因为软件工程师触及了运维。目标是将 50%的时间用于编写代码，30%的时间用于与人打交道，20%的时间用于应对紧急情况。</p>
<p>首要任务是通过编写代码把自己和其他人从重复的工作中解放出来。</p>
<p>一位伟大的 SRE 工程师说过：&ldquo;我会做一次，甚至会做两次，但如果你让我做第三次，我会把它全部烧掉。&rdquo;</p>
<p>开发这一层次接近<code>Mikey Pyramid</code>的顶部</p>
<blockquote>
<p>这需要大量的工作才能有效，并且像之前提到的层次结构的所有层一样，需要有效的沟通保障。</p>
<p>这并不是说，开发不能在层次结构中更早地发生，而是在其他层实现后再展开开发会最有效和有用。</p>
</blockquote>
<p>编写代码或启动更大的软件项目时需要考虑的 6 个主要方面。</p>
<ul>
<li>寻找项目</li>
<li>定义项目</li>
<li>计划项目</li>
<li>构建项目</li>
<li>记录项目</li>
<li>维护项目</li>
</ul>
<h3 id="构建项目">构建项目</h3>
<p>检查清单</p>
<ul>
<li>监控： 正在编写的代码有基本指标吗？它们正在被收集和存储吗？</li>
<li>事故响应： 你正在编写关于如何对服务进行运维的文档吗？如果发生事故，有没有报警机制？任何人收到报警都知道该怎么做吗？</li>
<li>事后回顾报告： 当代码发生故障时，你是否像对待其他发生故障的代码一样编写事后回顾报告呢？</li>
<li>测试和发布： 是否写了单元测试和集成测试？是否有文档记录发布流程和回滚流程？</li>
<li>容量规划： 是否记录了容量规划将如何影响系统的性能？</li>
</ul>
<h3 id="关于编写代码的建议">关于编写代码的建议</h3>
<ul>
<li>使用版本控制： 这是计算机编程的必备工作。即使再小的项目也应该使用版本控制。人类会犯错误，版本控制可以让你轻松地从错误中恢复过来或查看何时引入了错误。</li>
<li>始终对代码进行评审： 作为开发人员，你所知有限，所以让另一双眼睛来阅读你的代码有助于发现 Bug 并纠正你所做出的假设。你的代码至少应该有一位评审者来帮助你发现其缺陷。</li>
<li>所有项目都应该有一个指定的所有者： 总会在某些时候，所有的项目会遇到外界提出的问题。因此所有项目都应该有一个指定的所有者，所有者可以回答这些问题。这对于决定优先次序也很重要。拥有所有者意味着有一个人能够对什么才是最重要的做出最终决定。</li>
<li>人是最终问题： 正如从前面的 3 条建议所得出的，人常常才是问题所在。对于软件开发者来说，知道你写的代码最终是被人使用的是非常重要的。</li>
</ul>
<h2 id="8-用户体验">8. 用户体验</h2>
<p>标志设计标准</p>
<ol>
<li>视觉震撼</li>
</ol>
<blockquote>
<p>如果被看到，它需要非常引人注目</p>
</blockquote>
<ol start="2">
<li>独特且明确</li>
</ol>
<blockquote>
<p>标志不应该被重复使用。 一个例子是<code>海盗旗 Jolly Roger</code>， 或者称骷髅或交叉骨。虽然它曾经用来代表毒物，但它现在更多与海盗宝藏有关，并不能代表真正的危险。</p>
</blockquote>
<ol start="3">
<li>易于回忆和识别</li>
</ol>
<blockquote>
<p>这可以阻止人们使用常见形状或颜色作为说明符号</p>
</blockquote>
<ol start="4">
<li>易于模板化</li>
</ol>
<blockquote>
<p>应该容易创建并且可以应用于各种表面上</p>
</blockquote>
<ol start="5">
<li>旋转对称</li>
</ol>
<blockquote>
<p>不论它如何显示，人们都可以知道它是什么</p>
</blockquote>
<ol start="6">
<li>适用于来自不同背景的人</li>
</ol>
<blockquote>
<p>无论你身处何方，无论观众是谁，这都不应该是令人反感或困惑的</p>
</blockquote>
<h3 id="设计测试">设计测试</h3>
<ul>
<li>你来这里是为了响应一条请求回滚服务的警报，那么你将如何执行此操作？</li>
<li>你会单击什么按钮来消除警报？</li>
<li>在1到5的范围内，1是微不足道的，5是非常复杂地，你是如何发现这种体验的？</li>
<li>你觉得成功完成了回滚吗？</li>
<li>你需要编写一个监控配置来存储记录95%的延迟请求，那么怎么开始做这件事？</li>
</ul>
<h3 id="开发者体验">开发者体验</h3>
<p>开发人员有关的两个个人小毛病，它们是不重视代码质量与重新造轮子。专注与开发人员的体验就像专注于机场工作人员的体验。他们不是核心客户，但提高他们的生活质量将改善客户的体验和他们的工作质量。</p>
<h3 id="安全性">安全性</h3>
<p>在为安全问题构建软件或审计技术时，试着考虑一项技术的三个方面</p>
<ul>
<li>身份验证
<blockquote>
<p>指的是如何向用户提供表示可以与事物交互的令牌。例如，用户使用的用户名和密码</p>
</blockquote>
</li>
<li>授权
<blockquote>
<p>指的是如何确定用户是否可以访问某些内容。例如，具有令牌的用户可以更改博客上的帖子。另一个例子是网络子网上的任何人都可以连接到人力资源帮助页面</p>
</blockquote>
</li>
<li>风险概况
<blockquote>
<p>指的是你拥有什么类型的信息，谁会有兴趣获取该信息及技术能力。例如，新闻机构可能没有太多客户信息，但它会寻求保护有关来源和正在进行的文章的研究信息。话虽这么说，一个接受捐赠或出售印刷出版物的新闻机构可能会有信用卡号和出货信息。信用卡和个人信息往往会吸引大量的攻击者，而新闻来源则更能引起大型犯罪组织或国家层面的人的兴趣</p>
</blockquote>
</li>
</ul>
<h3 id="身份认证">身份认证</h3>
<p>以下是编写处理身份验证的代码的一些基本建议</p>
<ul>
<li>始终核实联系信息。如果用户输入了电话号码或电子邮件，则需要通过发送验证消息来确保他们真正拥有该号码或电子邮件</li>
<li>不要设置密码长度的最大值，也不要限制密码中可以包含哪些字符</li>
<li>始终使用单向哈希来存储密码，例如bcrypt。即使其他人可以访问你的数据存储区，那么他们也无权访问用户的密码</li>
<li>对于敏感账户，支持多重身份验证。这通常要求用户拥有ID、密码和某种设备，如手机</li>
<li>如果可能，请从身份验证流中删除密码。Have I Been Pwned网站跟踪数据泄露事件，在编写时拥有大约50亿个密码。鉴于地球上没有那么多人，你使用的密码很可能就在那里</li>
<li>当用户在异常情况下(如更改密码后)或新位置和浏览器组件进行身份验证时，要发送通知</li>
<li>身份验证过期一段时间后，要求用户重新进行身份验证，而不是让用户只登陆一次</li>
</ul>
<h3 id="acmassociation-for-computing-machinery-计算机协会-道德准则">ACM(Association for Computing Machinery， 计算机协会) 道德准则</h3>
<ul>
<li>避免伤害他人</li>
<li>为社会和人类福祉做出贡献</li>
</ul>
<h2 id="10-linux云基础">10. Linux云基础</h2>
<h3 id="伸缩单元">伸缩单元</h3>
<p><a href="https://gist.github.com/jboner/2841832">https://gist.github.com/jboner/2841832</a></p>
]]></content></item><item><title>Java 线程</title><link>https://painso.com/posts/tech/2020/java-thread/</link><pubDate>Mon, 07 Sep 2020 21:06:51 +0800</pubDate><guid>https://painso.com/posts/tech/2020/java-thread/</guid><description>观看至： https://www.bilibili.com/video/BV1V4411p7EF?p=23
什么是任务、进程、线程 多任务表示一个人边吃饭边玩手机，看上去是同时进行，实际上这一秒在吃饭下一秒在玩手机，只是切换时间很短感觉不出来 说道进程就得提程序，程序运行会创建一个进程，里面包含一个主线程如main函数，还有其他语言自带的守护线程如Java的GC 线程不一定立即执行，它是由CPU调度的 线程的三种创建方式 Thread class 继承Thread类
不建议使用： 避免OOP单继承局限性 创建一个Class继承Thread class并重写run()方法，启动线程使用.start() package com.painso.study.thread.demo01; // create thread way 1: extend Thread class, override run() method, call start enable thread public class D1 extends Thread{ @Override public void run(){ // run() body for (int i = 0; i&amp;lt;20;i++){ System.out.println(&amp;#34;i&amp;#39;m run() body &amp;#34;+i); } } public static void main(String[] args) { // main() body D1 d1 = new D1(); d1.</description><content type="html"><![CDATA[<p>观看至： <a href="https://www.bilibili.com/video/BV1V4411p7EF?p=23">https://www.bilibili.com/video/BV1V4411p7EF?p=23</a></p>
<h3 id="什么是任务进程线程">什么是任务、进程、线程</h3>
<ul>
<li>多任务表示一个人边吃饭边玩手机，看上去是同时进行，实际上这一秒在吃饭下一秒在玩手机，只是切换时间很短感觉不出来</li>
<li>说道进程就得提程序，程序运行会创建一个进程，里面包含一个主线程如<code>main</code>函数，还有其他语言自带的守护线程如Java的<code>GC</code></li>
<li>线程不一定立即执行，它是由CPU调度的</li>
</ul>
<h3 id="线程的三种创建方式">线程的三种创建方式</h3>
<ul>
<li>
<p>Thread <code>class</code> 继承Thread类</p>
<ul>
<li><strong>不建议使用： 避免OOP单继承局限性</strong></li>
<li>创建一个<code>Class</code>继承<code>Thread class</code>并重写<code>run()</code>方法，启动线程使用<code>.start()</code></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.thread.demo01</span><span class="o">;</span>
<span class="c1">// create thread way 1: extend Thread class, override run() method, call start enable thread
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">D1</span> <span class="kd">extends</span> <span class="n">Thread</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
        <span class="c1">// run() body
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">20</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;i&#39;m run() body &#34;</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// main() body
</span><span class="c1"></span>        <span class="n">D1</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D1</span><span class="o">();</span>
        <span class="n">d1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">20</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;i&#39;m main() body &#34;</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>Runnable <code>interface</code> 实现Runnable接口</p>
<ul>
<li><strong>建议使用： 避免单继承局限性，方便灵活，方便同一个对象被多个线程使用</strong></li>
<li>创建一个<code>Class</code>实现<code>Runnable</code>接口并重写<code>run()</code>方法，启动线程使用<code>new Thread(p).start()</code></li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.thread.demo03</span><span class="o">;</span>
<span class="c1">// create thread way 2: implement Runnable interface, override run() method, call Thread(p).start()
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">D</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;i&#39;m a thread implement Runnable interface&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// create Runnable interface implement Object
</span><span class="c1"></span>        <span class="n">D</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D</span><span class="o">();</span>
        <span class="c1">// create thread Object
</span><span class="c1"></span>        <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">d</span><span class="o">);</span> <span class="c1">// agent
</span><span class="c1"></span>        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>Callable <code>interface</code> 实现Callable接口</p>
</li>
</ul>
<h3 id="初识并发问题">初识并发问题</h3>
<ul>
<li>
<p>当多个线程操作同一个资源会导致线程不安全从而出现一些奇怪的问题</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.thread.demo04</span><span class="o">;</span>	
<span class="c1">// 多个线程同时操作同一个对象
</span><span class="c1">// 买火车票的例子
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">D1</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
  <span class="c1">// 票数
</span><span class="c1"></span>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">ticketNums</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">ticketNums</span> <span class="o">&lt;=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">break</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="c1">// 模拟延时
</span><span class="c1"></span>          <span class="k">try</span> <span class="o">{</span>
              <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">200</span><span class="o">);</span>
          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
          <span class="o">}</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;拿到了第&#34;</span> <span class="o">+</span> <span class="n">ticketNums</span><span class="o">--</span> <span class="o">+</span> <span class="s">&#34;张票&#34;</span><span class="o">);</span>
<span class="c1">//            ticketNums--;
</span><span class="c1"></span>      <span class="o">}</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">D1</span> <span class="n">ticket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D1</span><span class="o">();</span>
      <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">ticket</span><span class="o">,</span> <span class="s">&#34;小麦&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
      <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">ticket</span><span class="o">,</span> <span class="s">&#34;小红&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
      <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">ticket</span><span class="o">,</span> <span class="s">&#34;小明&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/* output
</span><span class="cm">小麦拿到了第10张票
</span><span class="cm">小红拿到了第9张票
</span><span class="cm">小明拿到了第8张票
</span><span class="cm">小麦拿到了第7张票
</span><span class="cm">小红拿到了第6张票
</span><span class="cm">小明拿到了第5张票
</span><span class="cm">小麦拿到了第4张票
</span><span class="cm">小红拿到了第3张票
</span><span class="cm">小明拿到了第2张票
</span><span class="cm">小麦拿到了第1张票
</span><span class="cm">小红拿到了第0张票
</span><span class="cm">小明拿到了第-1张票
</span><span class="cm">*/</span>
</code></pre></div><p>要解决上述问题需要用到锁</p>
</li>
<li>
<p>案例： 龟兔赛跑 <code>rabbit tortoise race</code> <strong>即使跑的再慢也不能停止脚步</strong></p>
<ol>
<li>首先设置赛道距离，需要离终点越来越近</li>
<li>判断比赛是否结束</li>
<li>打印出胜利者</li>
<li>龟兔赛跑开始</li>
<li>设定兔子需要睡觉，需模拟兔子睡觉</li>
<li>乌龟赢得比赛</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.thread.demo05</span><span class="o">;</span>
  
<span class="c1">// 模拟龟兔赛跑
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">D</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
  
    <span class="c1">// 胜利者 胜利者只有一个这里用 static 关键字
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">winner</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">role</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
            <span class="c1">// 判断比赛是否结束
</span><span class="c1"></span>            <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">isGameOver</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="c1">// 如果比赛结束则停止程序
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// 模拟兔子休息
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">role</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;Rabbit&#34;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">%</span> <span class="n">10</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">200</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">//  模拟乌龟速度
</span><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">role</span> <span class="o">==</span> <span class="s">&#34;Tortoise&#34;</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">10</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">role</span> <span class="o">+</span> <span class="s">&#34;离终点还有&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">100</span> <span class="o">-</span> <span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;米&#34;</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 判断比赛是否完成
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isGameOver</span><span class="o">(</span><span class="kt">int</span> <span class="n">steps</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 判断是否有胜利者
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">winner</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 判断是否有角色到达终点
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">steps</span> <span class="o">&gt;=</span> <span class="n">100</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">winner</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;winner is &#34;</span> <span class="o">+</span> <span class="n">winner</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">D</span> <span class="n">race</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D</span><span class="o">();</span>
        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">race</span><span class="o">,</span> <span class="s">&#34;Rabbit&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">race</span><span class="o">,</span> <span class="s">&#34;Tortoise&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ul>
<h3 id="callable-接口"><strong>Callable</strong> 接口</h3>
<pre><code>1. 实现`Callable`接口，需要返回值类型
2. 重写`call`方法，需要抛出异常
3. 创建目标对象
4. 创建执行服务： `ExecutorService ser = Executors.newFixedThreadPool(1)`
5. 提交执行： `Future&lt;Boolean&gt; result1 = ser.submit(t1)`
6. 获取结果： `boolean result = result1.get()`
7. 关闭服务： `ser.shutdownNow()`
</code></pre>
<h3 id="静态代理模式">静态代理模式</h3>
<ul>
<li>
<p><img src="../../../../images/java-thread/image-20200908211831654.png" alt="image-20200908211831654"></p>
</li>
<li>
<p>真实对象和代理对象都要实现同一个接口</p>
</li>
<li>
<p>代理对象接受真实对象为参数</p>
</li>
<li>
<p>代理对象可以为真实对象做额外操作，而真实对象只需关注本身</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.thread.demo06</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadProxy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 静态代理
</span><span class="c1"></span>        <span class="k">new</span> <span class="n">WeddingCompany</span><span class="o">(</span><span class="k">new</span> <span class="n">You</span><span class="o">()).</span><span class="na">Marry</span><span class="o">();</span>
        <span class="c1">// 类比实现了Runnable接口的对象
</span><span class="c1"></span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;aaa&#34;</span><span class="o">)).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">Marry</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">Marry</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">You</span> <span class="kd">implements</span> <span class="n">Marry</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Marry</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;张三结婚了&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">WeddingCompany</span> <span class="kd">implements</span> <span class="n">Marry</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Marry</span> <span class="n">role</span><span class="o">;</span>
  
    <span class="kd">public</span> <span class="nf">WeddingCompany</span><span class="o">(</span><span class="n">Marry</span> <span class="n">role</span><span class="o">)</span> <span class="o">{</span>
  
        <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">role</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;布置。。。。。。。&#34;</span><span class="o">);</span>
    <span class="o">}</span>
  
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;结帐。。。。。&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Marry</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">before</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">Marry</span><span class="o">();</span>
        <span class="n">after</span><span class="o">();</span>
  
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ul>
<h3 id="lambda-表达式">Lambda 表达式</h3>
<ul>
<li>
<p>Lambda，是第十一个希腊字母。 大写<code>Λ</code>用于： 粒子物理学上，Λ重子的符号 宇宙学及物理学上，爱因斯坦宇宙学常量的符号 数学上，三角形函数的符号 小写<code>λ</code>用于： 物理上的波长符号 放射学的衰变常数 线性代数中的特征值</p>
</li>
<li>
<p>避免匿名内部类定义过多</p>
</li>
<li>
<p>其实质属于函数式编程的概念</p>
</li>
<li>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/*
</span><span class="cm">(params) -&gt; expression
</span><span class="cm">(params) -&gt; statement
</span><span class="cm">(params) -&gt; { statements }
</span><span class="cm">a -&gt; System.out.println(&#34;i like lambda--&gt;&#34;+a);
</span><span class="cm">*/</span>
<span class="kn">package</span> <span class="nn">com.painso.study.thread.demo07</span><span class="o">;</span>
  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lambda</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;i&#39;m lambda, Thread name: &#34;</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()),</span><span class="s">&#34;WeaponX&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>函数式接口</p>
<ul>
<li>
<p>任何接口如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>对于函数式接口，我们可以通过<code>Lambda</code>表达式来创建该接口的对象。</p>
</li>
</ul>
</li>
</ul>
<h3 id="多线程五大状态">多线程五大状态</h3>
<ul>
<li>
<p>线程的生命周期 <code>lifecycle</code></p>
<ul>
<li><img src="../../../../images/java-thread/image-20200909211759495.png" alt="image-20200909211759495"></li>
<li><img src="../../../../images/java-thread/image-20200909211922010.png" alt="image-20200909211922010"></li>
</ul>
</li>
<li>
<p>线程方法</p>
<ul>
<li>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>setPriority(int newPriority)</td>
<td>更改线程的优先级</td>
</tr>
<tr>
<td>static void sleep(long millis)</td>
<td>在指定的毫秒数内让当前正在执行的线程休眠</td>
</tr>
<tr>
<td>void join()</td>
<td>等待该线程终止</td>
</tr>
<tr>
<td>static void yield()</td>
<td>暂停当前正在执行的线程对象，并执行其他线程</td>
</tr>
<tr>
<td>void interrupt()</td>
<td>中断线程，不推荐使用</td>
</tr>
<tr>
<td>boolean isAlive()</td>
<td>检查线程是否处于活动状态</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>停止线程</p>
<ul>
<li>不推荐使用JDK提供的<code>stop()、destroy()</code>方法  已废弃</li>
<li>推荐线程自己停止</li>
<li>建议使用一个标志位进行终止变量 -&gt; <code>if flag==false</code>则终止线程运行</li>
</ul>
</li>
<li>
<p>Sleep</p>
</li>
</ul>
</li>
<li>
<p>每个对象都有一个锁，<code>sleep</code>不会释放锁。</p>
</li>
<li>
<p>线程礼让 <strong>Yield</strong></p>
<ul>
<li>
<p>礼让线程，让当前正在执行的线程暂停，但不阻塞</p>
</li>
<li>
<p>将线程从运行状态转为就绪状态</p>
</li>
<li>
<p>**让CPU重新调度，<code>Yield</code>不一定成功，看CPU心情</p>
<blockquote>
<p>假设有A和B两个线程，启动主程序时CPU安排A先进入调度，但是A使用了<code>Yield</code>方法，从而回归最开始的就绪状态重新让CPU安排调度</p>
</blockquote>
<p><img src="../../../../images/java-thread/image-20200910201442614.png" alt="image-20200910201442614"></p>
</li>
</ul>
</li>
<li>
<p>Join</p>
<ul>
<li>Join合并线程，待此线程执行完成后，再执行其他线程，此时其他线程处于阻塞状态</li>
<li>理解为线程之间插队</li>
</ul>
</li>
</ul>
<h3 id="线程状态观测">线程状态观测</h3>
<ul>
<li>
<p>Thread.State</p>
<p>线程状态可以处于以下状态之一</p>
<p>一个线程可以在给定的时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。</p>
<ul>
<li>
<p>NEW</p>
<blockquote>
<p>尚未启动的线程处于此状态</p>
</blockquote>
</li>
<li>
<p>RUNNABLE</p>
<blockquote>
<p>在Java虚拟机中执行的线程处于此状态</p>
</blockquote>
</li>
<li>
<p>BLOCKED</p>
<blockquote>
<p>被阻塞等待监视器锁定的线程处于此状态</p>
</blockquote>
</li>
<li>
<p>WAITING</p>
<blockquote>
<p>正在等待另一个线程执行特定动作的线程处于此状态</p>
</blockquote>
</li>
<li>
<p>TIMED_WAITING</p>
<blockquote>
<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</p>
</blockquote>
</li>
<li>
<p>TERMINATED</p>
<blockquote>
<p>已退出的线程处于此状态</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="线程的优先级">线程的优先级</h3>
<ul>
<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</li>
<li>线程的优先级用数字表示，范围从1～10
<ul>
<li><code>Thread.MIN_PRIORITY = 1;</code></li>
<li><code>Thread.MAX_PRIORITY = 10;</code></li>
<li><code>Thread.NORM_PRIORITY = 5;</code></li>
</ul>
</li>
<li>使用以下方式改变或获取优先级
<ul>
<li><code>getPriority()</code></li>
<li><code>setPriority(int x)</code></li>
</ul>
</li>
</ul>
<h3 id="守护线程daemon">守护线程(daemon)</h3>
<ul>
<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>作用： 后台记录操作日志，内存监控，垃圾回收等。</li>
</ul>
<h3 id="线程同步">线程同步</h3>
<ul>
<li>现实生活中，我们会遇到&quot;同一个资源，多个人都想使用&quot;的问题，比如食堂排队打饭，每个人都想吃饭，最天然的解决办法就是<strong>排队</strong>。</li>
<li>处理多线程问题时，多个线程访问同一个对象(<strong>并发</strong>)，并且某些线程还想修改这个对象，这时候我们就需要线程同步。线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕，下一个线程再使用。</li>
<li>由于同一个进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突的问题，为了保证数据在方法中被访问时的正确性，在访问同时加入<strong>锁机制, synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可。存在以下问题
<ul>
<li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li>
<li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题</li>
</ul>
</li>
</ul>
<h3 id="同步方法">同步方法</h3>
<blockquote>
<p>synchronized不论是方法还是代码块，应锁需要CRD(Create、Retrieve、Delete)的对象</p>
</blockquote>
<ul>
<li>
<p>由于我们可以通过<code>private</code>关键字来保证数据对象只能被访问方法，所以我们只需要针对方法提出一套机制，这套机制就是<code>synchronized</code>关键字，它包括两种方法</p>
<ul>
<li>
<p><code>synchronized</code>方法</p>
<p><code>public synchronized void method(int args){}</code></p>
<blockquote>
<p>方法里面需要修改的内容才需要锁，锁太多造成资源浪费</p>
</blockquote>
</li>
<li>
<p><code>synchronized</code>块</p>
<p><code>synchronized (Obj){}</code></p>
<p><strong>Obj</strong>称之为同步监视器</p>
<ul>
<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需制定同步监视器，因为同步方法的同步监视器就是<code>this</code>，就是这个对象本身，或者是<code>class</code></li>
</ul>
<p>同步监视器执行过程</p>
<ol>
<li>第一个线程访问，锁定同步监视器，执行其中代码</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>
<li>第一个线程访问完毕，解锁同步监视器</li>
<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问</li>
</ol>
</li>
</ul>
</li>
<li>
<p><code>synchronized</code>方法控制对象的访问，每个对象对应一把锁，每个<code>synchronized</code>方法都必须获得调用该方法对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，知道方法返回才释放锁，后面被阻塞的线程才能获得这个锁继续执行。</p>
<blockquote>
<p>若将一个大的方法声明为synchronized将会影响效率</p>
</blockquote>
</li>
</ul>
<h3 id="死锁-deadlock">死锁 <strong><code>DeadLock</code></strong></h3>
<blockquote>
<p>死锁，又译为死结，计算机科学名词。当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。在多任务操作系统中，操作系统为了协调不同行程，能否获取系统资源时，为了让系统运作，必须要解决这个问题。 这里指的是进程死锁，是个计算机技术名词。<a href="https://zh.wikipedia.org/zh-cn/%E6%AD%BB%E9%94%81">维基百科</a></p>
</blockquote>
<ul>
<li>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或多个线程都在等待对方释放资源，都停止执行的情形。某一个同步块同时拥有<strong>两个以上对象的锁</strong>时，就可能发生&quot;死锁&quot;的问题</li>
</ul>
<p>死锁的避免方法</p>
<ul>
<li>
<p>产生死锁的四个必要条件</p>
<ol>
<li>互斥条件，一个资源每次只能被一个进程使用</li>
<li>请求与保持条件，一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>
<li>不剥夺条件，进程已获得的资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件，若干进程之间形成一种头尾相接循环等待资源关系</li>
</ol>
<blockquote>
<p>上面列出了死锁的四个必要条件，只要想办法破其中的任意一个或多个条件就可以避免死锁发生</p>
</blockquote>
</li>
</ul>
]]></content></item><item><title>微星B460主板安装Linux问题</title><link>https://painso.com/posts/tech/2020/msi-b460-motherboard-linux-issue/</link><pubDate>Wed, 02 Sep 2020 20:14:05 +0800</pubDate><guid>https://painso.com/posts/tech/2020/msi-b460-motherboard-linux-issue/</guid><description>今天公司到了一台内网测试用服务器，想着直接装好Ubuntu 16.04配置好网络直接扔杂物间(没有机房，只能放那边挨着交换机)
没想到我的U盘直接认不到了，我是用YUMI把好几个系统装到U盘里的，我自己用的办公电脑是ok的，后面网上查了下说要吧BIOS里面的UEFI改成CMS 兼容模式，结果直接点不亮了。
没办法，拆开机箱取主板电池下来放电重新来
重新用YUMI把ISO刻到U盘后发现竟然神奇的可以了，兴奋的等待安装完毕后蛋疼的事情又来了。
装完后启动黑屏，我折腾了好一会才发现是进入系统黑屏，不是系统没装好。
之前我自己的办公电脑装也是这个样子，我尝试开机后按上下键在Ubuntu启动界面编辑启动项在后面加上nomodeset，貌似和显卡有关系。结果能看到启动的界面了，但是卡在磁盘扫描那边。
想着之前自己的办公电脑也差不多是这样，Manjaro、Archlinux 都不行，后面换Linux Mint完美运行。接着自己吧它也刻进去，进入到LiveCD桌面，点安装然后下一步下一步。。。到在线更新包的时候提示网络问题，ifconfig看了下就一块lo网卡，应该是找不到网卡驱动了，lspci看了下ethernet信息，网卡型号是RTL8125 Realtek PCIe FE / GBE / 2.5G ，我先跳过在线更新直接把系统先装了再说。
完事后在自己办公电脑从官网下载驱动 https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software
选择Unix (Linux)下的2.5G Ethernet LINUX driver r8125 for kernel up to 5.6 下载后拷贝到U盘，然后插上服务器挂载，解压运行./autorun.sh正常执行完后运行lsmod | grep 8125应该就可以看到显示了。ifconfig -a 也能看到网卡信息。
安装驱动需要 gcc kernel-dev等包，如果没有的话需要先安装，我是正好有一个USB装RJ45的线。
接着配置好静态IP明天再部署环境。
最后再吹一波 Linux Mint的兼容性！
后记 弄好之后用kubeadm部署了个单机版kubernetes，用第二块nvmeSSD去做k8s的sc
用glusterfs+heketi实现，heketi-cli topology load --json cluster.json的时候提示
Adding device /dev/nvm0n1 ... Unable to add device: Setup of device /dev/vdb failed (already initialized or contains data?</description><content type="html"><![CDATA[<p>今天公司到了一台内网测试用服务器，想着直接装好<code>Ubuntu 16.04</code>配置好网络直接扔杂物间(没有机房，只能放那边挨着交换机)</p>
<p>没想到我的U盘直接认不到了，我是用<code>YUMI</code>把好几个系统装到U盘里的，我自己用的办公电脑是ok的，后面网上查了下说要吧BIOS里面的<code>UEFI</code>改成<code>CMS 兼容模式</code>，结果直接点不亮了。</p>
<p>没办法，拆开机箱取主板电池下来放电重新来</p>
<p>重新用<code>YUMI</code>把ISO刻到U盘后发现竟然神奇的可以了，兴奋的等待安装完毕后蛋疼的事情又来了。</p>
<p>装完后启动黑屏，我折腾了好一会才发现是进入系统黑屏，不是系统没装好。</p>
<p>之前我自己的办公电脑装也是这个样子，我尝试开机后按上下键在Ubuntu启动界面编辑启动项在后面加上<code>nomodeset</code>，貌似和显卡有关系。结果能看到启动的界面了，但是卡在磁盘扫描那边。</p>
<p>想着之前自己的办公电脑也差不多是这样，Manjaro、Archlinux 都不行，后面换<code>Linux Mint</code>完美运行。接着自己吧它也刻进去，进入到LiveCD桌面，点安装然后下一步下一步。。。到在线更新包的时候提示网络问题，<code>ifconfig</code>看了下就一块<code>lo</code>网卡，应该是找不到网卡驱动了，<code>lspci</code>看了下<code>ethernet</code>信息，网卡型号是<code>RTL8125 Realtek PCIe FE / GBE / 2.5G</code> ，我先跳过在线更新直接把系统先装了再说。</p>
<p>完事后在自己办公电脑从官网下载驱动 <a href="https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software">https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software</a></p>
<p>选择<code>Unix (Linux)</code>下的<code>2.5G Ethernet LINUX driver r8125 for kernel up to 5.6</code> 下载后拷贝到U盘，然后插上服务器挂载，解压运行<code>./autorun.sh</code>正常执行完后运行<code>lsmod | grep 8125</code>应该就可以看到显示了。<code>ifconfig -a</code> 也能看到网卡信息。</p>
<blockquote>
<p>安装驱动需要 <code>gcc kernel-dev</code>等包，如果没有的话需要先安装，我是正好有一个USB装RJ45的线。</p>
</blockquote>
<p>接着配置好静态IP明天再部署环境。</p>
<p>最后再吹一波 <code>Linux Mint</code>的兼容性！</p>
<h3 id="后记">后记</h3>
<ol>
<li>
<p>弄好之后用kubeadm部署了个单机版kubernetes，用第二块nvmeSSD去做k8s的sc</p>
<p>用glusterfs+heketi实现，<code>heketi-cli topology load --json cluster.json</code>的时候提示</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">Adding device /dev/nvm0n1 ... Unable to add device: Setup of device /dev/vdb failed <span class="o">(</span>already initialized or contains data?<span class="o">)</span>: WARNING: xfs signature detected on /dev/nvm0n1 at offset 0. Wipe it? <span class="o">[</span>y/n<span class="o">]</span>: <span class="o">[</span>n<span class="o">]</span>
  Aborted wiping of xfs.
  <span class="m">1</span> existing signature left on the device
</code></pre></div><p>执行</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">pvcreate -ff --metadatasize<span class="o">=</span>128M --dataalignment<span class="o">=</span>256K /dev/nvm0n1
</code></pre></div><p>后重新运行<code>heketi-cli topology load --json cluster.json</code>解决</p>
</li>
<li>
<p>重启机器后发现heketi自动写入<code>/etc/fstab</code>的磁盘挂载信息使用<code>mount -a</code>提示 <code>/dev/mapper/xxx</code>找不到文件</p>
<p>看了下<code>dmesg</code>有一些类似内核的报错，网上搜了下用<code>vgchange -ay</code>即可重新挂载volumegroup</p>
<p>随后 重启 glusterfsd、heketi、docker</p>
</li>
</ol>
]]></content></item><item><title>Java 基础</title><link>https://painso.com/posts/tech/2020/java-basic/</link><pubDate>Sun, 23 Aug 2020 17:25:46 +0800</pubDate><guid>https://painso.com/posts/tech/2020/java-basic/</guid><description>狂神说JAVA学习笔记 - JavaSE基础部分 Bilibili: https://www.bilibili.com/video/av68373450
当前观看至: https://www.bilibili.com/video/av68373450?p=77
运算符 不同类型运算返回值
double a = 55; float b = 10F; long c = 10; int d = 20; short e = 25; byte f = 25; 如果变量a+b+c+d相加，返回值类型为double 如果变量b+c+d+e相加，返回值类型为float
如果d+e相加，返回值为int 如果e+f相加，返回值为int 。。。 结论
如果一组不同类型的变量进行运算，返回值取类型最大数据类型 如果其中最大的数据类型为int，返回值为int
如果小于int的类型，返回int 自增、自减 ++ --
package operator; public class Demo01 { public static void main(String[] args) { int a = 1; int b = a++; int c = ++a; System.</description><content type="html"><![CDATA[<h2 id="狂神说java学习笔记---javase基础部分">狂神说JAVA学习笔记 - JavaSE基础部分</h2>
<p>Bilibili: <a href="https://www.bilibili.com/video/av68373450">https://www.bilibili.com/video/av68373450</a></p>
<p>当前观看至: <a href="https://www.bilibili.com/video/av68373450?p=77">https://www.bilibili.com/video/av68373450?p=77</a></p>
<h3 id="运算符">运算符</h3>
<ol>
<li>
<p>不同类型运算返回值</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="n">55</span><span class="o">;</span>
<span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="n">10F</span><span class="o">;</span>
<span class="kt">long</span> <span class="n">c</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="kt">short</span> <span class="n">e</span> <span class="o">=</span> <span class="n">25</span><span class="o">;</span>
<span class="kt">byte</span> <span class="n">f</span> <span class="o">=</span> <span class="n">25</span><span class="o">;</span>
</code></pre></div><ul>
<li>如果变量<code>a+b+c+d</code>相加，返回值类型为<code>double</code></li>
</ul>
</li>
</ol>
<ul>
<li>
<p>如果变量<code>b+c+d+e</code>相加，返回值类型为<code>float</code></p>
<ul>
<li>如果<code>d+e</code>相加，返回值为int</li>
<li>如果<code>e+f</code>相加，返回值为int</li>
<li>。。。</li>
</ul>
<p>结论</p>
<ul>
<li>如果一组不同类型的变量进行运算，返回值取类型最大数据类型</li>
</ul>
</li>
<li>
<p>如果其中最大的数据类型为<code>int</code>，返回值为<code>int</code></p>
<ul>
<li>如果小于<code>int</code>的类型，返回<code>int</code></li>
</ul>
</li>
</ul>
<ol start="2">
<li>
<p>自增、自减  <code>++</code> <code>--</code></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">operator</span><span class="o">;</span>
   
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo01</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">++;</span>
        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">++</span><span class="n">a</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>输出结果为</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="m">3</span>
<span class="m">1</span>
<span class="m">3</span>
</code></pre></div><p><code>a++ ==  a = a+1</code></p>
<p><code>++a == a = a+1</code></p>
<p>乍看好像都一样，实则进行赋值时顺序有所不同</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">++;</span> <span class="c1">// 先把a的值复制给b再做自增运算
</span><span class="c1"></span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">++</span><span class="n">a</span><span class="o">;</span> <span class="c1">// 先进行自增运算再复制给c
</span></code></pre></div><p>所以b的值是上述的<code>1</code>， 不信我们在b后紧跟一条输出<code>a 和 b</code>看看结果</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">operator</span><span class="o">;</span>
   
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo01</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">++;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="o">++</span><span class="n">a</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="m">2</span>
<span class="m">1</span>
<span class="m">3</span>
<span class="m">1</span>
<span class="m">3</span>
   
Process finished with <span class="nb">exit</span> code <span class="m">0</span>
</code></pre></div></li>
<li>
<p>短路运算</p>
<p>逻辑于运算中如果第一个为<code>false</code>则不再进行后面的运算</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">operator</span><span class="o">;</span>
   
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo01</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">c</span> <span class="o">&lt;</span> <span class="n">11</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">++</span> <span class="o">&lt;</span> <span class="n">100</span><span class="o">));</span> <span class="c1">// 添加自增运算验证第二个表达式是否执行
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/* 
</span><span class="cm">c &lt; 11 为真 继续后面的表达式运算
</span><span class="cm">结果为：
</span><span class="cm">true
</span><span class="cm">11
</span><span class="cm">*/</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">operator</span><span class="o">;</span>
   
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo01</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">c</span> <span class="o">&gt;</span> <span class="n">11</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">++</span> <span class="o">&lt;</span> <span class="n">100</span><span class="o">));</span> <span class="c1">// 添加自增运算验证第二个表达式是否执行
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/* 
</span><span class="cm">c &gt; 11 为假 直接忽略后面的表达式运算返回假
</span><span class="cm">结果为：
</span><span class="cm">false
</span><span class="cm">10
</span><span class="cm">*/</span>
</code></pre></div><blockquote>
<p>逻辑或同理</p>
</blockquote>
</li>
<li>
<p>字符串拼接顺序</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">+</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">);</span>
<span class="c1">// 结果为 1020
</span><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">20</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="s">&#34;&#34;</span><span class="o">);</span>
<span class="c1">// 结果为 30
</span></code></pre></div><p>字符串拼接所在位置会影响输出结果，如果字符串在前则后方的<code>int</code>变量以字符串拼接，如果整型在前则进行算术运算</p>
</li>
<li>
<p>三元运算符</p>
<p><code>x ? y : z</code></p>
<p>如果 <code>x</code> 的运算结果为<code>true</code>则值为<code>y</code></p>
<p>反之为<code>z</code></p>
</li>
</ol>
<h3 id="条件表达式">条件表达式</h3>
<ol>
<li>
<p>九九乘法表</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.condition</span><span class="o">;</span>
   
<span class="cm">/**
</span><span class="cm"> * @author ephz3nt
</span><span class="cm"> * @version 1.0
</span><span class="cm"> *
</span><span class="cm"> * @description 使用for实现99乘法表
</span><span class="cm"> * 1x1=1
</span><span class="cm"> * 1x2=2 2x2=4
</span><span class="cm"> * 1x3=3 2x3=6 3x3=9
</span><span class="cm"> * 1x4=4 2x4=8 3x4=12 4x4=16
</span><span class="cm"> * 1x5=5 2x5=10 3x5=15 4x5=20 5x5=25
</span><span class="cm"> * 1x6=6 2x6=12 3x6=18 4x6=24 5x6=30 6x6=36
</span><span class="cm"> * 1x7=7 2x7=14 3x7=21 4x7=28 5x7=35 6x7=42 7x7=49
</span><span class="cm"> * 1x8=8 2x8=16 3x8=24 4x8=32 5x8=40 6x8=48 7x8=56 8x8=64
</span><span class="cm"> * 1x9=9 2x9=18 3x9=27 4x9=36 5x9=45 6x9=54 7x9=63 8x9=72 9x9=81
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">D1</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span><span class="n">x</span><span class="o">&lt;=</span><span class="n">9</span><span class="o">;</span><span class="n">x</span><span class="o">++){</span> <span class="c1">// 定义x 为被乘的数，不超过9
</span><span class="c1"></span>            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span><span class="n">1</span><span class="o">;</span><span class="n">y</span><span class="o">&lt;=</span><span class="n">x</span><span class="o">;</span><span class="n">y</span><span class="o">++){</span> <span class="c1">// 定义y为乘数，循环乘到不满足&lt;=x退出
</span><span class="c1"></span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%dx%d=%d\t&#34;</span><span class="o">,</span><span class="n">y</span><span class="o">,</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">*</span><span class="n">x</span><span class="o">);</span> <span class="c1">// 使用格式化输出 &#34;乘数x被乘数=积&#34; , 不换行
</span><span class="c1"></span>            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span> <span class="c1">// 嵌套for执行结束后输出换行
</span><span class="c1"></span>        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>打印金字塔三角形</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">   <span class="kn">package</span> <span class="nn">com.painso.study.condition</span><span class="o">;</span>
      
   <span class="kd">public</span> <span class="kd">class</span> <span class="nc">D2</span> <span class="o">{</span>
       <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
           <span class="cm">/**
</span><span class="cm">            * 打印一个三角形
</span><span class="cm">            * 1. 把三角形拆分成左右两边
</span><span class="cm">            * 2. 定义几个矩形框起来
</span><span class="cm">            * 3. 打印左边空白区域
</span><span class="cm">            * 4. 打印三角形左边
</span><span class="cm">            */</span>
           <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
               <span class="c1">// 打印空白区
</span><span class="c1"></span>               <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">5</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
                   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">);</span>
               <span class="o">}</span>
               <span class="c1">// 反向打印三角形左边
</span><span class="c1"></span>               <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
               <span class="o">}</span>
               <span class="c1">// 打印三角形右边
</span><span class="c1"></span>               <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
               <span class="o">}</span>
               <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
           <span class="o">}</span>
       <span class="o">}</span>
   <span class="o">}</span>
   <span class="c1">// 输出
</span><span class="c1"></span>        <span class="o">*</span>
       <span class="o">***</span>
      <span class="o">*****</span>
     <span class="o">*******</span>
    <span class="o">*********</span>
</code></pre></div></li>
</ol>
<h3 id="方法">方法</h3>
<ol>
<li>
<p>方法的重载</p>
<ul>
<li>
<p>重载就是在一个类中，有相同的函数名称，但形参不同的函数</p>
</li>
<li>
<p>方法的重载规则</p>
<ol>
<li>方法名称必须相同</li>
<li>参数列表必须不同(个数、类型、排列顺序)</li>
<li>方法的返回值类型可以相同也可以不同</li>
<li>仅仅返回值类型不同不足以成为方法的重载</li>
</ol>
</li>
<li>
<p>实现理论</p>
<p>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败则编译器报错</p>
</li>
</ul>
</li>
<li>
<p>可变参数</p>
<ul>
<li>JDK 1.5开始支持</li>
<li>在方法声明中，在制定参数类型后加一个省略号<code>...</code></li>
<li>一个方法中只能制定一个可变参数，它必须是该方法的最后一个参数。</li>
<li>可变参数的传入类型必须一致</li>
<li>任何普通的参数必须在它之前声明</li>
</ul>
</li>
<li>
<p>递归 <code>Recursion</code></p>
<ul>
<li>
<p>自己调用自己</p>
</li>
<li>
<p>利用递归可以用简单的程序来解决一些复杂的问题</p>
</li>
<li>
<p>它通常把一个大型复杂的问题层层转化为一个与原问题相似的且规模较小的问题来求解</p>
</li>
<li>
<p>递归策略只需少量的程序代码就可描述出解题过程所需要的多次重复计算，大大减少了程序的代码量</p>
</li>
<li>
<p>递归的能力在与用有限的语句来定义对象的无限集合</p>
</li>
<li>
<p>递归结构包含两个部分</p>
</li>
<li>
<ol>
<li>递归头: 什么时候不调用自身的方法。如果没有头，将陷入死循环</li>
<li>递归体: 什么时候需要调用自身方法</li>
</ol>
</li>
<li>
<p>下面的代码体现了递归的 <code>它通常把一个大型复杂的问题层层转化为一个与原问题相似的且规模较小的问题来求解</code></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.method</span><span class="o">;</span>
     
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Recursion2</span> <span class="o">{</span>
    <span class="cm">/* 阶乘
</span><span class="cm">        2! = 2 * 1
</span><span class="cm">        3! = 3 * 2 * 1
</span><span class="cm">        5! = 5 * 4 * 3 * 2 * 1
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/*
</span><span class="cm">            计算5的阶乘
</span><span class="cm">            流程如下:
</span><span class="cm">            main -&amp;gt; recursion(5) -&amp;gt; recursion(4) -&amp;gt; recursion(3) -&amp;gt; recursion(2) -&amp;gt; recursion(1)
</span><span class="cm">            由于递归体if判断了参数为1直接返回
</span><span class="cm">            所以最后的recursion(1)得到一个具体值 1 后开始回传
</span><span class="cm">            recursion(1):1  返回给       recursion(2) == 2*1 == 2
</span><span class="cm">            recursion(2):2  继续返回给    recursion(3) == 3*2 == 6
</span><span class="cm">            recursion(3):6  继续返回给    recursion(4) == 4*6 == 24
</span><span class="cm">            recursion(4):24 继续返回给    recursion(5) == 5*24 == 120
</span><span class="cm">         */</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">recursion</span><span class="o">(</span><span class="n">5</span><span class="o">));</span>
    <span class="o">}</span>
     
    <span class="c1">// 使用递归计算阶乘
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">recursion</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
            <span class="cm">/*
</span><span class="cm">               5的阶乘这里等于 return recursion(5); == 5 * 4 * 3 * 2 * 1
</span><span class="cm">               因为我们在上面的if判断如果n==1直接返回从而跳出递归体
</span><span class="cm">             */</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">*</span><span class="n">recursion</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
        <span class="o">}</span>
     
    <span class="o">}</span>
<span class="o">}</span><span class="n">dd</span>
</code></pre></div></li>
<li>
<p>递归适用于少量计算，因会在栈积压栈空间，容易引发异常且资源消耗很大(因为一直在嵌套调用方法)</p>
</li>
</ul>
</li>
</ol>
<h3 id="数组">数组</h3>
<ol>
<li>
<p>冒泡排序</p>
<ul>
<li>
<p>比较数组中相邻的两个数值大小，如果<code>a[0]&gt;a[1]</code> 则进行位置互换</p>
</li>
<li>
<p>java 实现</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.array2</span><span class="o">;</span>
     
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
     
<span class="cm">/**
</span><span class="cm"> * @author ephz3nt
</span><span class="cm"> * @version 1.0
</span><span class="cm"> * @description 冒泡排序算法实现
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BubbleSort</span> <span class="o">{</span>
     
    <span class="c1">// sort method
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">s</span><span class="o">){</span>
        <span class="cm">/* 一层for循环
</span><span class="cm">           二层循环每次排序结束后的处理
</span><span class="cm">         */</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="cm">/*
</span><span class="cm">            二层for循环
</span><span class="cm">            实际进行排序算法的循环体
</span><span class="cm">            一二层的条件s.length要-1 否则会触发二层循环下标越界
</span><span class="cm">             */</span>
            <span class="c1">//
</span><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span><span class="n">j</span><span class="o">++</span> <span class="o">){</span>
                <span class="c1">// 定义临时变量用作交换数组值的位置
</span><span class="c1"></span>                <span class="kt">int</span> <span class="n">tmp</span><span class="o">;</span>
                <span class="c1">// 判断如果当前值&gt;后一位索引的值则互换位置
</span><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]){</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                    <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
                    <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
     
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">s1</span> <span class="o">=</span> <span class="o">{</span><span class="n">9</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">5</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">55</span><span class="o">,</span><span class="n">71</span><span class="o">,</span><span class="n">555</span><span class="o">,</span><span class="n">9879</span><span class="o">,</span><span class="n">11</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">sort</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%d\t&#34;</span><span class="o">,</span><span class="n">s2</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%d\t&#34;</span><span class="o">,</span><span class="n">s1</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
     
        <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;%d\t&#34;</span><span class="o">,</span><span class="n">s1</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
    <span class="o">}</span>
     
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>顺便发一下Go的实现，Go的互换支持更简洁的写法 <code>a,b = b,a</code></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>
     
<span class="kn">import</span> <span class="p">(</span>
   <span class="s">&#34;fmt&#34;</span>
<span class="p">)</span>
     
<span class="kd">func</span> <span class="nf">sort</span><span class="p">(</span><span class="nx">arr</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
   <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
       <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
           <span class="k">if</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
               <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
           <span class="p">}</span>
       <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>
     
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="c1">//{3,22,1,55,33,76,32,22}
</span><span class="c1"></span>   <span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">22</span><span class="p">}</span>
   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">sort</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
     
<span class="p">}</span>
</code></pre></div></li>
<li>
<p>冒泡排序的关键</p>
<ul>
<li>
<p>假设有以下数组</p>
<ul>
<li>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="o">{</span><span class="n">9</span><span class="o">,</span><span class="n">7</span><span class="o">,</span><span class="n">5</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">};</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span><span class="n">j</span><span class="o">++</span> <span class="o">){</span>
            <span class="kt">int</span> <span class="n">tmp</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]){</span> <span class="c1">// [1]
</span><span class="c1"></span>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
                <span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="c1">// 执行嵌套循环顺序为 
</span><span class="c1"></span><span class="cm">/* 0-0 表示 外层和内层的第几次循环
</span><span class="cm">// 原始数据 	9,7,5,3,1
</span><span class="cm">         1-1: 7,9,5,3,1 // 第一次 因9&gt;7则互换位置
</span><span class="cm">          1-2: 7,5,9,3,1 // 第二次 因9&gt;5则互换位置
</span><span class="cm">          1-3: 7,5,3,9,1 // 第三次 因9&gt;3则互换位置
</span><span class="cm">          1-4: 7,5,3,1,9 // 第四次 因9&gt;3则互换位置
</span><span class="cm">          1-5: 7,5,3,1,9 // 第五次 这里注意上方[1]处比较的是 s[j] &gt; s[j+1] 因为这里是第五次循环 j的值是4 下标为4的值正好是最后一位：9 ， 如果比较 下标为5的话就会提示下标越界，因为数组s一共才5个元素，下标从0开始最高为4而已，所以需要在二层for条件表达式减去1
</span><span class="cm">          既然第二层循环条件表达式减去1了外层也应同样减去1, 不然后面两次只是重复运行
</span><span class="cm">*/</span>
</code></pre></div></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>稀疏矩阵</p>
<ul>
<li>
<p>稀疏矩阵应用于一个矩阵中其元素大部分为零的矩阵</p>
</li>
<li>
<p>稀疏矩阵包含 行,列,值 固定三列</p>
</li>
<li>
<p>其中第一行为矩阵参数信息 包含 X行,Y列,Z个值</p>
</li>
<li>
<p>实现</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.array2</span><span class="o">;</span>
     
<span class="cm">/**
</span><span class="cm"> * @author ephz3nt
</span><span class="cm"> * @version 1.0
</span><span class="cm"> * @description Sparse Matrix
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SparseMatrix</span> <span class="o">{</span>
    <span class="cm">/**
</span><span class="cm">     * 稀疏矩阵，在数值分析中，是其元素大部分为零的矩阵。
</span><span class="cm">     * 反之，如果大部分元素都非零，则这个矩阵是稠密的。
</span><span class="cm">     * 在科学与工程领域中求解线性模型时经常出现大型的稀疏矩阵。
</span><span class="cm">     * 在使用计算机存储和操作稀疏矩阵时，经常需要修改标准算法以利用矩阵的稀疏结构。
</span><span class="cm">     * 由于其自身的稀疏特性，通过压缩可以大大节省稀疏矩阵的内存代价。
</span><span class="cm">     * 稀疏矩阵包含 行,列,值 固定三列
</span><span class="cm">     *         0	0	0	0	0
</span><span class="cm">     *         0	0	1	0	0
</span><span class="cm">     *         0	0	0	2	0
</span><span class="cm">     *         0	0	0	0	0
</span><span class="cm">     *         0	0	0	0	0
</span><span class="cm">     * 其中第一行为矩阵参数信息 包含 X行,Y列,Z个值
</span><span class="cm">     * 如上矩阵 包含 5行,5列,2个值
</span><span class="cm">     * 用稀疏矩阵表示为
</span><span class="cm">     *         5    6   2   参数信息: 5行 5列 2个值
</span><span class="cm">     *         1    2   1   1行2列值为1
</span><span class="cm">     *         2    3   2   2行3列值为2
</span><span class="cm">     */</span>
    <span class="c1">// 定义 压缩方法
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">zip</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">s</span><span class="o">){</span>
        <span class="c1">// 定义稀疏矩阵数组行变量，需遍历原数组
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">sparseLine</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="c1">// 获取原数组中值的个数，定义稀疏数组前置需求
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
                    <span class="n">sparseLine</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 获取到值个数sparseLine，定义稀疏矩阵数组
</span><span class="c1"></span>        <span class="c1">// 因第一行需额外记录矩阵参数信息需要+1，列为固定3列
</span><span class="c1"></span>        <span class="kt">int</span><span class="o">[][]</span> <span class="n">sparseMatrix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">sparseLine</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">3</span><span class="o">];</span>
     
        <span class="c1">// 定义x存储行信息，定义y存储总共多少值用于求列，定义valueSum值总量
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span><span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">valueSum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span><span class="n">0</span><span class="o">){</span>
                    <span class="n">valueSum</span><span class="o">++;</span>
                    <span class="c1">// 设置 有效值的x，y轴坐标及值
</span><span class="c1"></span>                    <span class="n">sparseMatrix</span><span class="o">[</span><span class="n">valueSum</span><span class="o">][</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                    <span class="n">sparseMatrix</span><span class="o">[</span><span class="n">valueSum</span><span class="o">][</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                    <span class="n">sparseMatrix</span><span class="o">[</span><span class="n">valueSum</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                <span class="o">}</span>
                <span class="n">y</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">x</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="c1">// 定义稀疏数组参数 行的值
</span><span class="c1"></span>        <span class="n">sparseMatrix</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="c1">// 定义稀疏数组参数 列的值
</span><span class="c1"></span>        <span class="n">sparseMatrix</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">/</span><span class="n">x</span><span class="o">;</span>
        <span class="c1">// 定义稀疏数组参数 值总量
</span><span class="c1"></span>        <span class="n">sparseMatrix</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">valueSum</span><span class="o">;</span>
        <span class="c1">// 输出并返回压缩后的稀疏矩阵
</span><span class="c1">//        for (int i = 0; i &lt; sparseMatrix.length; i++) {
</span><span class="c1">//            for (int j = 0; j &lt; sparseMatrix[i].length; j++) {
</span><span class="c1">//                System.out.print(sparseMatrix[i][j]+&#34;\t&#34;);
</span><span class="c1">//            }
</span><span class="c1">//            System.out.println();
</span><span class="c1">//        }
</span><span class="c1"></span>        <span class="k">return</span> <span class="n">sparseMatrix</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 定义解压缩稀疏矩阵方法
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">unzip</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">s</span><span class="o">){</span>
        <span class="c1">// 定义解压缩数组参数信息
</span><span class="c1"></span>        <span class="c1">// 这里看着方括号很多 其实 s[0][0] 和 s[0][1] 为稀疏数组元信息的 行与列的值
</span><span class="c1"></span>        <span class="kt">int</span><span class="o">[][]</span> <span class="n">unCompressMatrix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]][</span><span class="n">s</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">1</span><span class="o">]];</span>
     
        <span class="c1">// 遍历还原值坐标 这里行从1开始因为第0行是稀疏数组元信息
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">value</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
            <span class="c1">// 取 x,y坐标轴 s[i][0], s[i][1] 的值 s[i][2] 赋给unCompressMatrix
</span><span class="c1"></span>            <span class="n">unCompressMatrix</span><span class="o">[</span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">0</span><span class="o">]][</span><span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">1</span><span class="o">]]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">2</span><span class="o">];</span>
        <span class="o">}</span>
            <span class="k">return</span> <span class="n">unCompressMatrix</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/*
</span><span class="cm">        定义一个  5*5 的矩阵
</span><span class="cm">        其中有两个值 1,2
</span><span class="cm">        坐标分别为
</span><span class="cm">        1： 第一行第二列
</span><span class="cm">        2： 第二行第三列
</span><span class="cm">        0	0	0	0	0
</span><span class="cm">        0	0	1	0	0
</span><span class="cm">        0	0	0	2	0
</span><span class="cm">        0	0	0	0	0
</span><span class="cm">        0	0	0	0	0
</span><span class="cm">         */</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">5</span><span class="o">][</span><span class="n">6</span><span class="o">];</span>
        <span class="n">s1</span><span class="o">[</span><span class="n">1</span><span class="o">][</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
        <span class="n">s1</span><span class="o">[</span><span class="n">2</span><span class="o">][</span><span class="n">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;输出原数组&#34;</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s1</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s1</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+</span><span class="s">&#34;\t&#34;</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==========================&#34;</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">zipArray</span> <span class="o">=</span> <span class="n">zip</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;压缩原数组&#34;</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">zipArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">zipArray</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">zipArray</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+</span><span class="s">&#34;\t&#34;</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;解压缩稀疏矩阵&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;==========================&#34;</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[][]</span>  <span class="n">unCompressMatrix</span><span class="o">=</span><span class="n">unzip</span><span class="o">(</span><span class="n">zipArray</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">unCompressMatrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">unCompressMatrix</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">unCompressMatrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]+</span><span class="s">&#34;\t&#34;</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ul>
</li>
</ol>
<h3 id="面向对象-object-oriented-programming-oop">面向对象 <code>Object-Oriented Programming, OOP</code></h3>
<ul>
<li>
<p>面向过程思想</p>
<ul>
<li>步骤清晰简单，1-&gt;2-&gt;3&hellip;</li>
<li>面向过程难以处理复杂的问题，适合处理较简单的问题</li>
</ul>
</li>
<li>
<p>面向对象思想</p>
<ul>
<li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后才对某个分类下的具体实现进行面向过程的思索。</li>
<li>面向对象适合处理复杂的问题与需多人协作的问题</li>
</ul>
</li>
<li>
<p>对于描述复杂的事物，为了宏观上把握从整体上合理分析，我们需要使用面向对象思路来分析整个系统。但是具体到微观操作仍需要面向过程的思路。</p>
</li>
<li>
<p><strong>面向对象编程的本质： 以类的方式组织代码，以对象的方式组织(封装)数据</strong></p>
</li>
<li>
<p>抽象 抽出共同点</p>
</li>
<li>
<p>三大特性</p>
<ol>
<li>封装 <code>数据包装对外提供相应接口</code></li>
<li>继承 <code>对应现实继承</code></li>
<li>多态 <code>同一事物多种形态</code></li>
</ol>
</li>
<li>
<p>从认识的角度考虑的是先有对象后有类。 对象是指具体的事物，类是抽象的，是对对象的抽象</p>
</li>
<li>
<p>从代码运行的角度考虑的是先有类后有对象。类是对象的模板。</p>
</li>
<li>
<p>一个类里面只有属性和方法。<strong><code>再牛逼的人写都一样</code></strong></p>
<ol>
<li>
<p>创建与初始化对象</p>
<ul>
<li>使用new关键字创建的时候，除了分配内存之外还会给创建好的对象进行默认的初始化以及对类中构造器的调用</li>
<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：
<ol>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ol>
</li>
</ul>
</li>
<li>
<p>构造器</p>
<ul>
<li>
<p>即使一个类里什么都不写也会存在一个默认构造器</p>
<ul>
<li>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// source
</span><span class="c1"></span><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo02</span><span class="o">;</span>
         
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
<span class="o">}</span>
<span class="c1">// Decompiler
</span><span class="c1">//
</span><span class="c1">// Source code recreated from a .class file by IntelliJ IDEA
</span><span class="c1">// (powered by FernFlower decompiler)
</span><span class="c1">//
</span><span class="c1"></span>         
<span class="kn">package</span> <span class="nn">com.painso.study.oop.demo02</span><span class="o">;</span>
         
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>使用<code>new</code>关键字本质是在调用构造器</p>
</li>
<li>
<p>一旦定义了有参构造，如要使用无参构造器必须显示定义(建议带上)</p>
</li>
<li>
<p>构造器一般用来初始化值</p>
</li>
<li>
<p>IDEA 快捷键 <code>alt + insert</code> 可快捷生成构造方法、Getter/Setter方法等等</p>
</li>
</ul>
</li>
<li>
<p>创建对象内存分析</p>
<ul>
<li>
<p>java内存分为栈和堆，堆中又包含方法区，方法区包含静态方法区(修饰符<code>static</code>)</p>
</li>
<li>
<p>堆中存放<code>new</code>实例化后的对象具体内容，栈中存放对象的引用(可以看作快捷方式)，实际上这个对象并不在栈中</p>
</li>
<li>
<p>有以下代码</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Pet class
</span><span class="c1"></span><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo03</span><span class="o">;</span>
       
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pet</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
       
    <span class="c1">// 无参构造 non-arguments construct
</span><span class="c1"></span>       
    <span class="c1">// shout method
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shout</span><span class="o">(){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&#34;叫了一声!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// Application class
</span><span class="c1"></span><span class="kn">package</span> <span class="nn">com.painso.study.oop</span><span class="o">;</span>
       
<span class="kn">import</span> <span class="nn">com.painso.study.oop.demo03.Pet</span><span class="o">;</span>
       
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Pet</span> <span class="n">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">();</span>
        <span class="n">dog</span><span class="o">.</span><span class="na">name</span>  <span class="o">=</span> <span class="s">&#34;旺财&#34;</span><span class="o">;</span>
        <span class="n">dog</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span>
        <span class="n">dog</span><span class="o">.</span><span class="na">shout</span><span class="o">();</span>
        <span class="n">Pet</span> <span class="n">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>内存顺序为</p>
<ol>
<li>
<p>首先加载Application -&gt; 里面包含<code>main()</code>方法及常量<code>旺财</code>-&gt;放到栈中执行</p>
</li>
<li>
<p>然后<code>new</code>了一个<code>dog</code>对象放到栈，<code>dog</code>引用了具体在堆中的对象 内存地址如: 0x0001</p>
<p><img src="../../../../../images/java-basic/image-20200901203911058.png" alt="image-20200901203911058"></p>
</li>
<li>
<p>自己画的。。。</p>
<p><img src="../../../../../images/java-basic/image-20200901210551729.png" alt="image-20200901210551729"></p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>封装</p>
<ul>
<li>该藏的藏，该露的露</li>
<li>程序设计要追求<strong>高内聚，低耦合</strong>。</li>
<li>高内聚 类的内部数据操作细节自己完成，不允许外部干涉。</li>
<li>低耦合 仅暴露少量的方法给外部使用</li>
<li>封装通常应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</li>
<li>记住这句话就够了 <strong><code>属性私有，Getter/Setter</code></strong></li>
<li>封装通常用于成员属性</li>
<li>封装的意义
<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>提高系统可维护性</li>
</ol>
</li>
</ul>
</li>
<li>
<p>继承</p>
<ul>
<li>
<p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</p>
</li>
<li>
<p><code>extends</code>的意思是<strong>扩展</strong>，子类是父类的扩展。</p>
</li>
<li>
<p>Java中的类只有单继承，没有多继承！</p>
</li>
<li>
<p>继承是类和类之间的一种关系，除此之外类和类直接的关系还有依赖、组合、聚合等</p>
</li>
<li>
<p>继承关系的两个类，一个为子类(派生类)，一个为父类(基类, 这里的基我理解为<strong>Base</strong>)。子类继承父类，使用关键字<code>extends</code>来表示。</p>
</li>
<li>
<p>子类和父类直接从意义上讲应具有 <strong>&ldquo;is a&rdquo;</strong> 的关系。如有一个父类：人 -&gt; <code>Person</code>，子类有： 学生 -&gt; <code>Student</code>，老师 -&gt; <code>Teacher</code>， 子类 学生和老师都是人，<code>Student/Teacher is a Person</code></p>
</li>
<li>
<p>在<code>IDEA</code>中使用快捷键<code>CTRL+H</code>可以显示类的继承树</p>
</li>
<li>
<p>在Java中，所有的类都默认直接/间接继承<code>Object</code>类，都是它的崽。</p>
</li>
<li>
<p><code>private</code>修饰的属性或方法无法被继承及<code>super</code>调用</p>
</li>
<li>
<p>当<code>new</code>一个子类对象的时候会先执行其父类的构造器再执行当前类的构造器</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo05</span><span class="o">;</span>
    
<span class="c1">// student is a person  派生类/子类
</span><span class="c1">// 子类继承了父类就会有父类的全部方法
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="kd">extends</span> <span class="n">Person</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(){</span>
        <span class="kd">super</span><span class="o">();</span> <span class="c1">// 这里默认隐藏了此方法，super() 必须放置在第一行，如果在后面会直接报错
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Student Construct&#34;</span><span class="o">);</span>
    <span class="c1">//  super();
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>重写</p>
<ol>
<li>需要有继承关系，子类重写父类的方法</li>
<li>只和非静态<code>non-static</code>方法有关</li>
<li>参数列表必须相同</li>
<li>修饰符 范围可以扩大但不能缩小 <code>public -&gt; protected -&gt; default -&gt; private</code></li>
<li>抛出的异常范围可以被缩小，但不能扩大 <code>Exception -&gt; ClassNotFoundException</code></li>
<li>子类和父类的方法必须一致，方法体不同</li>
</ol>
<ul>
<li>为什么需要重写
<ul>
<li>父类的功能子类不一定需要或者不一定满足。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>多态</p>
<ul>
<li>
<p>即同一方法可以根据发送的对象的不同而采取多种不同的行为方式。</p>
</li>
<li>
<p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p>
</li>
<li>
<p>多态存在的条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类对象</li>
</ul>
</li>
<li>
<p>多态是方法的多态，属性没有多态性。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo06</span><span class="o">;</span>
    
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 一个对象的实际类型是确定的
</span><span class="c1">//        new Person();
</span><span class="c1">//        new Student();
</span><span class="c1"></span>        <span class="c1">// 可以指向的引用类型就不确定了
</span><span class="c1"></span>        <span class="c1">// 父类的引用指向子类
</span><span class="c1"></span>        <span class="n">Student</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span> <span class="c1">// s1能调用的方法都是Student自己的或者继承父类的
</span><span class="c1"></span>        <span class="n">Person</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span>  <span class="c1">// s2 父类型可以指向子类，但不能调用子类独有的方法
</span><span class="c1"></span>        <span class="n">Object</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span>
        <span class="n">s1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        <span class="n">s2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span> <span class="c1">// 子类重写了父类的方法，执行了子类的方法
</span><span class="c1"></span>        <span class="c1">// 对象能执行哪些方法，主要看对象左边的类型，和右边关系不大！
</span><span class="c1"></span>        <span class="n">s1</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span>
        <span class="o">((</span><span class="n">Student</span><span class="o">)</span> <span class="n">s2</span><span class="o">).</span><span class="na">eat</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>类型转换两者必须有联系(如继承)，否则将触发类型转换异常<code>ClassCastException</code></p>
</li>
<li>
<p><code>instanceof</code> 判断对象是否属于目标类 &gt; <code>s1 instanceof Student</code></p>
<ul>
<li><code>instanceof</code> 原始对象所属类需与目标类有继承关系</li>
</ul>
</li>
<li>
<p>类型转换</p>
<ul>
<li>低转高自动转换，高转低需强制转换 <code>Student stu1 = (Student)s2</code></li>
<li>子类转换为父类可能会丢失自己本来的一些方法</li>
<li>类型转换的意义在于方便方法调用，减少重复性代码</li>
</ul>
</li>
<li>
<p><code>static</code>关键字</p>
<ul>
<li>
<p><code>static</code>可用于修饰变量和方法</p>
</li>
<li>
<p><code>static</code>在程序启动时拥有较高的加载优先级</p>
</li>
<li>
<p><code>static</code>静态匿名代码块只能被调用一次</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo07</span><span class="o">;</span>
      
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;构造器代码块&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;静态匿名代码块&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;匿名代码块&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Person</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;**********************&#34;</span><span class="o">);</span>
        <span class="n">Person</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/* output
</span><span class="cm">静态匿名代码块
</span><span class="cm">匿名代码块
</span><span class="cm">构造器代码块
</span><span class="cm">**********************
</span><span class="cm">匿名代码块
</span><span class="cm">构造器代码块
</span><span class="cm">*/</span>
</code></pre></div></li>
<li>
<p><code>static</code>可用于静态导入包</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo07</span><span class="o">;</span>
      
<span class="kn">import static</span> <span class="nn">java.lang.Math.random</span><span class="o">;</span>
      
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticImport</span> <span class="o">{</span>
           <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">());</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">random</span><span class="o">());</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ul>
</li>
</ul>
</li>
<li>
<p>抽象类</p>
<ul>
<li>
<p><code>abstract</code>修饰符可以用来修饰方法也可以修饰类，如果修饰方法那么该方法就是抽象方法，如果修饰类那么该类就是抽象类。</p>
</li>
<li>
<p>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类</p>
</li>
<li>
<p>抽象类不能使用<code>new</code>关键字来创建对象，它是用来让子类继承的。</p>
</li>
<li>
<p>抽象方法只有方法的声明，没有方法的实现，它是用来让子类实现的。</p>
</li>
<li>
<p>子类继承抽象类那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</p>
</li>
<li>
<p>抽象类定义的所有方法由继承它的子类实现，如果该子类也为抽象类且定义了其他抽象方法那么继承该子类的子子类必须实现它爸爸和爷爷所定义的所有方法。</p>
</li>
<li>
<p>抽象类存在构造器、匿名代码块、<code>static</code>匿名代码块</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo08</span><span class="o">;</span>
    
<span class="c1">// abstract 抽象类
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Action</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Action</span><span class="o">(){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;abstract constructor&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;anonymous code block&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;static anonymous code block&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 抽象方法，定义约束/框架
</span><span class="c1"></span>    <span class="c1">// 只有方法的名字，没有方法体
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">();</span>
<span class="o">}</span>
<span class="cm">/* output
</span><span class="cm">static anonymous code block
</span><span class="cm">anonymous code block
</span><span class="cm">abstract constructor
</span><span class="cm">**************
</span><span class="cm">anonymous code block
</span><span class="cm">abstract constructor
</span><span class="cm">*/</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>接口</p>
<ul>
<li>声明类的关键字是<strong><code>class</code></strong>声明接口的关键字是<strong><code>interface</code></strong></li>
<li>普通类 -&gt; 只有具体实现</li>
<li>抽象类 -&gt; 具体实现和规范(抽象方法)都有</li>
<li>接口    -&gt;  只有规范，自己无法写方法，约束和实现的分离。</li>
<li>接口就是规范，定义一组规则，体现了现实世界中的<strong><code>如果你是...则必须能...</code></strong>的思想。如果你是马云则必须对钱没有兴趣。如果你是好人则必须有好人卡</li>
<li>接口的本质就是契约，就像我们人间的法律一样，制定好后大家都遵守。</li>
<li>OO<strong><code>Object-Oriented</code></strong>的精髓是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言(<code>c++、java、c#</code>)等，就是因为设计模式所研究的实际上就是如何合理的去抽象。</li>
<li>一个类可以实现多个接口，<strong><code>implements InterfaceOne,InterfaceTwo</code></strong></li>
<li>接口的方法使用<code>public abstract</code>修饰，属性使用<code>public static final</code>修饰</li>
<li>接口不能被实例化，因为接口中没有<strong><code>构造方法</code></strong>也没有<strong><code>匿名/静态匿名</code></strong>代码块</li>
</ul>
</li>
<li>
<p>内部类</p>
<ul>
<li>
<p>内部类就是在一个类的内部定义一个类，比如<code>A</code>类中定义一个<code>B</code>类，那么<code>B</code>类相对<code>A</code>类来说就是内部类，而<code>A</code>类相对<code>B</code>类来说就是外部类。</p>
</li>
<li>
<p>一个java类文件中可以有多个<code>class</code>类，但只能有一个<code>public</code>修饰符的类</p>
</li>
<li>
<p>内部类的种类</p>
<ol>
<li>
<p>成员内部类</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo10</span><span class="o">;</span>
       
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Outer</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">99</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;outer class method&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 定义内部类
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Inner</span><span class="o">{</span> <span class="c1">// 定义内部类
</span><span class="c1"></span>        <span class="c1">// 定义内部类方法
</span><span class="c1"></span>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">in</span><span class="o">(){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;inner class method&#34;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 获取外部类私有属性
</span><span class="c1"></span>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getID</span><span class="o">(){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 实例化外部类
</span><span class="c1"></span>        <span class="n">Outer</span> <span class="n">outer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Outer</span><span class="o">();</span>
        <span class="n">outer</span><span class="o">.</span><span class="na">out</span><span class="o">();</span>
        <span class="c1">// 实例化内部类方法1
</span><span class="c1"></span>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">inner1</span> <span class="o">=</span> <span class="n">outer</span><span class="o">.</span><span class="na">new</span> <span class="nf">Inner</span><span class="o">();</span>
        <span class="n">inner1</span><span class="o">.</span><span class="na">in</span><span class="o">();</span>
        <span class="c1">// 实例化内部类方法2
</span><span class="c1"></span>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">inner2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Outer</span><span class="o">().</span><span class="na">new</span> <span class="n">Inner</span><span class="o">();</span>
        <span class="n">inner2</span><span class="o">.</span><span class="na">in</span><span class="o">();</span>
        <span class="n">inner2</span><span class="o">.</span><span class="na">getID</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ul>
<li>成员内部类可以获取外部类的<strong>私有/静态</strong>的<strong>属性/方法</strong></li>
</ul>
</li>
<li>
<p>静态内部类</p>
<ul>
<li>静态内部类不能获取外部类的非静态<strong>属性/方法</strong></li>
</ul>
</li>
<li>
<p>局部内部类</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo10</span><span class="o">;</span>
       
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">(){</span>
        <span class="c1">// 局部内部类 local inner class
</span><span class="c1"></span>        <span class="kd">class</span> <span class="nc">Inner</span><span class="o">{</span>
            <span class="c1">// 定义局部内部类方法
</span><span class="c1"></span>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">localMethod</span><span class="o">(){</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;i&#39;m local inner class&#34;</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 实例化
</span><span class="c1"></span>        <span class="n">Inner</span> <span class="n">inner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Inner</span><span class="o">();</span>
        <span class="n">inner</span><span class="o">.</span><span class="na">localMethod</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Local</span> <span class="n">local</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Local</span><span class="o">();</span>
        <span class="n">local</span><span class="o">.</span><span class="na">method</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
<li>
<p>匿名内部类</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.painso.study.oop.demo10</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Anonymous</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="n">Eat</span><span class="o">().</span><span class="na">eat</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Eat</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">(){</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;eat&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="异常处理机制">异常处理机制</h3>
<ul>
<li>抛出异常</li>
<li>捕获异常</li>
<li>异常处理的五个关键字
<ul>
<li>try</li>
<li>catch</li>
<li>finally</li>
<li>throw</li>
<li>throws</li>
</ul>
</li>
</ul>
]]></content></item><item><title>Java 变量作用域</title><link>https://painso.com/posts/tech/2020/java-variable-scope/</link><pubDate>Sun, 23 Aug 2020 16:50:36 +0800</pubDate><guid>https://painso.com/posts/tech/2020/java-variable-scope/</guid><description>Java 变量分为: 类变量 实例变量 局部变量 类变量 需要在变量前添加修饰符static，可以在方法中直接调用
public class Hello { static int number = 10; // 定义类变量 public static void main(String[] args) { System.out.println(number); // 直接调用 } } 实例变量 定义格式为String &amp;lt;type&amp;gt; &amp;lt;name&amp;gt; = &amp;lt;value&amp;gt;;
实例变量从属于对象，使用时需要进行初始化
public class Hello { // 定义实例变量 String name = &amp;#34;Benjamin&amp;#34;; int age = 18; public static void main(String[] args) { Hello instance = new Hello() ; // new 一个当前的Hello对象 System.</description><content type="html"><![CDATA[<h3 id="java-变量分为">Java 变量分为:</h3>
<ol>
<li>类变量</li>
<li>实例变量</li>
<li>局部变量</li>
</ol>
<h4 id="类变量">类变量</h4>
<p>需要在变量前添加修饰符<code>static</code>，可以在方法中直接调用</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">10</span><span class="o">;</span> <span class="c1">// 定义类变量
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>  <span class="c1">// 直接调用
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h4 id="实例变量">实例变量</h4>
<p>定义格式为<code>String &lt;type&gt; &lt;name&gt; = &lt;value&gt;;</code></p>
<p>实例变量从属于对象，使用时需要进行初始化</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="c1">// 定义实例变量
</span><span class="c1"></span>    <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Benjamin&#34;</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">18</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Hello</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="o">()</span> <span class="o">;</span> <span class="c1">// new 一个当前的Hello对象
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;name: %s, age: %s\n&#34;</span><span class="o">,</span><span class="n">instance</span><span class="o">.</span><span class="na">name</span><span class="o">,</span><span class="n">instance</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;-------------------------------------------------&#34;</span><span class="o">);</span>
        <span class="c1">// 修改实例变量的值
</span><span class="c1"></span>        <span class="n">instance</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">&#34;Bob&#34;</span><span class="o">;</span>
        <span class="n">instance</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">24</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;name: %s, age: %s\n&#34;</span><span class="o">,</span><span class="n">instance</span><span class="o">.</span><span class="na">name</span><span class="o">,</span><span class="n">instance</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h4 id="局部变量">局部变量</h4>
<p>定义在方法内部的变量，该方法体使用完后跟随销毁，无法被其他方法直接调用</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 定义局部变量
</span><span class="c1"></span>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;Benjamin&#34;</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">18</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&#34;name: %s, age: %s\n&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">,</span><span class="n">age</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content></item><item><title>Manjaro 添加自定义快捷方式</title><link>https://painso.com/posts/tech/2020/manjaro-custom-shortcut/</link><pubDate>Sat, 22 Aug 2020 21:19:42 +0800</pubDate><guid>https://painso.com/posts/tech/2020/manjaro-custom-shortcut/</guid><description>今天装了个Goland, 由于没有像Ubuntu那样的deb包导致每次启动都需shell进相应目录执行
./goland.sh 非常麻烦
稍微找了下资料
首先进入 &amp;ldquo;/usr/share/applications&amp;rdquo; 目录, 可以看到里面有很多的 .desktop 文件, 这就是快捷方式文件了
可以随便找一个复制出来, 如:
sudo cp idea.desktop goland.desktop 文件大概长这样, 怎么改一目了然了 路径按照自己实际目录修改就行.
goland.desktop
[Desktop Entry] Version=1.0 Type=Application Name=Goland Comment=Develop with pleasure! Exec=/home/ephz3nt/Downloads/GoLand-2020.2.2/bin/goland.sh %f Icon=/home/ephz3nt/Downloads/GoLand-2020.2.2/bin/goland.png Terminal=false StartupNotify=true StartupWMClass=jetbrains-goland Categories=Development;IDE;Go; 顺便贴一下Typora的配置吧, 正好今天在用
[Desktop Entry] Version=1.0 Type=Application Name=Typora Comment=Typora Markdown Editor Exec=/home/ephz3nt/Downloads/Typora-linux-x64/Typora %f Icon=/home/ephz3nt/Downloads/Typora-linux-x64/resources/app/asserts/icon/icon_128x128.png Terminal=false StartupNotify=true #StartupWMClass=jetbrains-goland Categories=Development;Markdown;Typora;</description><content type="html"><![CDATA[<p>今天装了个Goland, 由于没有像Ubuntu那样的deb包导致每次启动都需shell进相应目录执行</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">./goland.sh
</code></pre></div><p>非常麻烦</p>
<p>稍微找了下资料</p>
<p>首先进入 &ldquo;/usr/share/applications&rdquo; 目录, 可以看到里面有很多的 .desktop 文件, 这就是快捷方式文件了</p>
<p>可以随便找一个复制出来, 如:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo cp idea.desktop goland.desktop
</code></pre></div><p>文件大概长这样, 怎么改一目了然了 路径按照自己实际目录修改就行.</p>
<blockquote>
<p>goland.desktop</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>Desktop Entry<span class="o">]</span>
<span class="nv">Version</span><span class="o">=</span>1.0
<span class="nv">Type</span><span class="o">=</span>Application
<span class="nv">Name</span><span class="o">=</span>Goland
<span class="nv">Comment</span><span class="o">=</span>Develop with pleasure!
<span class="nv">Exec</span><span class="o">=</span>/home/ephz3nt/Downloads/GoLand-2020.2.2/bin/goland.sh %f
<span class="nv">Icon</span><span class="o">=</span>/home/ephz3nt/Downloads/GoLand-2020.2.2/bin/goland.png
<span class="nv">Terminal</span><span class="o">=</span><span class="nb">false</span>
<span class="nv">StartupNotify</span><span class="o">=</span><span class="nb">true</span>
<span class="nv">StartupWMClass</span><span class="o">=</span>jetbrains-goland
<span class="nv">Categories</span><span class="o">=</span>Development<span class="p">;</span>IDE<span class="p">;</span>Go<span class="p">;</span>
</code></pre></div><p>顺便贴一下Typora的配置吧, 正好今天在用</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>Desktop Entry<span class="o">]</span>
<span class="nv">Version</span><span class="o">=</span>1.0
<span class="nv">Type</span><span class="o">=</span>Application
<span class="nv">Name</span><span class="o">=</span>Typora
<span class="nv">Comment</span><span class="o">=</span>Typora Markdown Editor
<span class="nv">Exec</span><span class="o">=</span>/home/ephz3nt/Downloads/Typora-linux-x64/Typora %f
<span class="nv">Icon</span><span class="o">=</span>/home/ephz3nt/Downloads/Typora-linux-x64/resources/app/asserts/icon/icon_128x128.png
<span class="nv">Terminal</span><span class="o">=</span><span class="nb">false</span>
<span class="nv">StartupNotify</span><span class="o">=</span><span class="nb">true</span>
<span class="c1">#StartupWMClass=jetbrains-goland</span>
<span class="nv">Categories</span><span class="o">=</span>Development<span class="p">;</span>Markdown<span class="p">;</span>Typora<span class="p">;</span>
</code></pre></div><p><img src="../../../../images/manjaro-custom-shortcut/goland.png" alt="goland"></p>
<p><img src="../../../../images/manjaro-custom-shortcut/typora.png" alt="typora"></p>
]]></content></item><item><title>snap 设置HTTP代理</title><link>https://painso.com/posts/tech/2020/snap-set-proxy/</link><pubDate>Sat, 22 Aug 2020 20:58:13 +0800</pubDate><guid>https://painso.com/posts/tech/2020/snap-set-proxy/</guid><description>这里由于我用的是V2RAY, 代理端口 &amp;ldquo;12333&amp;rdquo;
sudo snap set system proxy.http=&amp;#34;http://127.0.0.1:12333&amp;#34; sudo snap set system proxy.https=&amp;#34;http://127.0.0.1:12333&amp;#34; 酸爽！</description><content type="html"><![CDATA[<blockquote>
<p>这里由于我用的是V2RAY, 代理端口 &ldquo;12333&rdquo;</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo snap <span class="nb">set</span> system proxy.http<span class="o">=</span><span class="s2">&#34;http://127.0.0.1:12333&#34;</span>
sudo snap <span class="nb">set</span> system proxy.https<span class="o">=</span><span class="s2">&#34;http://127.0.0.1:12333&#34;</span>
</code></pre></div><p><img src="/images/snap-set-proxy/snap-install.png" alt=""></p>
<p>酸爽！</p>
]]></content></item><item><title>博客迁移至github &amp; hugo。</title><link>https://painso.com/posts/thinking/2020/migrated-to-hugo/</link><pubDate>Tue, 03 Mar 2020 18:32:00 +0000</pubDate><guid>https://painso.com/posts/thinking/2020/migrated-to-hugo/</guid><description>从wordpress到hexo，从hexo到hugo 搭配git-pages 实现白嫖 准备重拾博客</description><content type="html">&lt;p>从wordpress到hexo，从hexo到hugo
搭配git-pages 实现白嫖
准备重拾博客&lt;/p></content></item><item><title>使用acme签发&amp;续期 Let's Encrypt 证书。</title><link>https://painso.com/posts/tech/2017/acme-lets-encrypt-issue/</link><pubDate>Tue, 28 Feb 2017 14:57:48 +0000</pubDate><guid>https://painso.com/posts/tech/2017/acme-lets-encrypt-issue/</guid><description>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.
使用它的原因是 acme.sh 支持DNS API方式签发证书,这可方便太多了
支持的DNS服务商有: cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.
[root@ROOT ~]# ls .acme.sh/dnsapi/ dns_ad.sh dns_cf.sh dns_do.sh dns_gd.sh dns_linode.sh dns_myapi.sh dns_pdns.sh dns_ali.sh dns_cx.sh dns_dp.sh dns_ispconfig.sh dns_lua.sh dns_nsupdate.sh README.md dns_aws.sh dns_cyon.sh dns_freedns.sh dns_lexicon.sh dns_me.sh dns_ovh.sh 获取acme.sh
curl https://get.acme.sh | sh 将安装acme.sh至你当前账户根目录下的 .acme.sh下
创建一个bash的alias, 方便直接使用acme.sh
vim ~/.bashrc 增加一行 alias acme.sh=~/.acme.sh/acme.sh
# .bashrc # User specific aliases and functions alias acme.sh=~/.acme.sh/acme.sh alias rm=&amp;#39;rm -i&amp;#39; alias cp=&amp;#39;cp -i&amp;#39; alias mv=&amp;#39;mv -i&amp;#39; 执行 source .</description><content type="html"><![CDATA[<p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书.</p>
<p>使用它的原因是 acme.sh 支持DNS API方式签发证书,这可方便太多了</p>
<p>支持的DNS服务商有: cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>root@ROOT ~<span class="o">]</span><span class="c1"># ls .acme.sh/dnsapi/</span>
dns_ad.sh         dns_cf.sh         dns_do.sh         dns_gd.sh         dns_linode.sh     dns_myapi.sh      dns_pdns.sh
dns_ali.sh        dns_cx.sh         dns_dp.sh         dns_ispconfig.sh  dns_lua.sh        dns_nsupdate.sh   README.md
dns_aws.sh        dns_cyon.sh       dns_freedns.sh    dns_lexicon.sh    dns_me.sh         dns_ovh.sh        
</code></pre></div><ol>
<li>
<p>获取acme.sh</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">curl  https://get.acme.sh <span class="p">|</span> sh
</code></pre></div><p>将安装acme.sh至你当前账户根目录下的 .acme.sh下</p>
<p>创建一个bash的alias, 方便直接使用acme.sh</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">vim ~/.bashrc
</code></pre></div><p>增加一行 <code>alias acme.sh=~/.acme.sh/acme.sh</code></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># .bashrc</span>

<span class="c1"># User specific aliases and functions</span>
<span class="nb">alias</span> acme.sh<span class="o">=</span>~/.acme.sh/acme.sh
<span class="nb">alias</span> <span class="nv">rm</span><span class="o">=</span><span class="s1">&#39;rm -i&#39;</span>
<span class="nb">alias</span> <span class="nv">cp</span><span class="o">=</span><span class="s1">&#39;cp -i&#39;</span>
<span class="nb">alias</span> <span class="nv">mv</span><span class="o">=</span><span class="s1">&#39;mv -i&#39;</span>
</code></pre></div><p>执行 <code>source .bashrc</code></p>
<p>然后可直接执行 acme.sh 即可看到此工具的更多使用方法.</p>
</li>
<li>
<p>签发证书</p>
<p>我的域名DNS使用的是CloudXNS, 登录官网获取相关API参数即可</p>
<p>执行</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">CX_Key</span><span class="o">=</span><span class="s2">&#34;3739fb69fewfwefwe996b255f49dda&#34;</span>
<span class="nb">export</span> <span class="nv">CX_Secret</span><span class="o">=</span><span class="s2">&#34;7745fwefewfew4c62&#34;</span>
</code></pre></div><p>这里的 CX_Key &amp; CX_Secret 为CloudXNS脚本变量名, 如果你是其他DNS服务商如Cloudflare,可查看 ~/.acme.sh/dnsapi/dns_cf.sh 得知相应DNSAPI的变量名称</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/usr/bin/env bash
</span><span class="cp"></span>
#
<span class="c1">#CF_Key=&#34;sdfsdfsdfljlbjkljlkjsdfoiwje&#34;</span>
#
<span class="c1">#CF_Email=&#34;xxxx@sss.com&#34;</span>

<span class="nv">CF_Api</span><span class="o">=</span><span class="s2">&#34;https://api.cloudflare.com/client/v4&#34;</span>

</code></pre></div><p>执行签发证书命令</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">acme.sh --issue --dns dns_cx -d xx1.example.com
</code></pre></div><p>&ndash;issue 为签发</p>
<p>&ndash;dns 为使用dns验证,后面跟上域名所属DNS服务商,Cloudxns 为 dns_cx , Cloudflare 为 dns_cf 具体名称可以参考前面说的.</p>
<p>-d 申请签发域名, 可同时签发多个 如: -d a.example.com -d b.example.com -d c.example.com, 无需记录指向当前服务器, 所以你可以使用任何一台计算机签发</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>root@ROOT /<span class="o">]</span><span class="c1"># acme.sh --issue --dns dns_cx -d a.example.com -d b.example.com -d c.example.com</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:36 CST 2017<span class="o">]</span> Multi <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;DNS:b.example.com,DNS:c.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:36 CST 2017<span class="o">]</span> Getting domain auth token <span class="k">for</span> each domain
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:36 CST 2017<span class="o">]</span> Getting webroot <span class="k">for</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;a.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:36 CST 2017<span class="o">]</span> Getting new-authz <span class="k">for</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;a.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:39 CST 2017<span class="o">]</span> The new-authz request is ok.
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:39 CST 2017<span class="o">]</span> Getting webroot <span class="k">for</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;b.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:39 CST 2017<span class="o">]</span> Getting new-authz <span class="k">for</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;b.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:40 CST 2017<span class="o">]</span> The new-authz request is ok.
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:40 CST 2017<span class="o">]</span> Getting webroot <span class="k">for</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;c.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:40 CST 2017<span class="o">]</span> Getting new-authz <span class="k">for</span> <span class="nv">domain</span><span class="o">=</span><span class="s1">&#39;c.example.com&#39;</span>
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:42 CST 2017<span class="o">]</span> The new-authz request is ok.
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:42 CST 2017<span class="o">]</span> Found domain api file: /root/.acme.sh/dnsapi/dns_cx.sh
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:42 CST 2017<span class="o">]</span> Adding record
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:23:43 CST 2017<span class="o">]</span> Sleep <span class="m">120</span> seconds <span class="k">for</span> the txt records to take effect
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:44 CST 2017<span class="o">]</span> a.example.com is already verified, skip dns-01.
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:44 CST 2017<span class="o">]</span> Verifying:b.example.com
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:48 CST 2017<span class="o">]</span> Success
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:48 CST 2017<span class="o">]</span> c.example.com is already verified, skip dns-01.
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:50 CST 2017<span class="o">]</span> Deleted record _acme-challenge.b.example.com
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:50 CST 2017<span class="o">]</span> Verify finished, start to sign.
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:52 CST 2017<span class="o">]</span> Cert success.
-----BEGIN CERTIFICATE-----
MIIFHDCCBASgAwIBAgISA2P67Iuu/0deP//XwhZsoihcMA0GCSqGSIb3DQEBCwUA
MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNzAyMjgwNjI3MDBaFw0x
NzA1MjkwNjI3MDBaMBgxFjAUBgNVBAMTDWEuZXBoemVudC5uZXQwggEiMA0GCSqG
SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtmZSiVu6f27C7mxDZ2EwOszAps/e4K06A
I9of7gkWCgT6T2Cvze9w0d8j+o9hHft+ppcgLLywmVH2XpadQ6h/+8VCJO1ZLHCH
zEkXGn9FvqfAfs2bDvJHhIhYy7579jljEr86zwO0PsO8bqaJgPEO8lDJ+KY9Tfq2
igsVZR79QtmTHimxI4t2liUnAt+pRn4z0mMWQvm247dlfI4h3TkqlSiyCo9Vn3dL
ULaGBJ7zpTKsffgon79WfraE0nseMNE0vt0ASQew4TztNfswbHOF7fzTQLa2K1QT
76thTc8FdmzkXeNqahncU0fWxK5eM+/HB0sHrFcmOFcckx97dEEBAgMBAAGjggIs
MIICKDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUF
BwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFKsqhp5nOgaAkm8tIsHe3hQOUq/S
MB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAGCCsGAQUFBwEBBGQw
r4Bc5gVW9hcTgyz8RYEGJFAuNbf6E4Iy7mMHkkTuS50E84X/CXP/cICvwA5aZszN
<span class="nv">W7RRqkwMeW9KbhNU0txCdA</span><span class="o">==</span>
-----END CERTIFICATE-----
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:52 CST 2017<span class="o">]</span> Your cert is in  /root/.acme.sh/a.example.com/a.example.com.cer 
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:52 CST 2017<span class="o">]</span> Your cert key is in  /root/.acme.sh/a.example.com/a.example.com.key 
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:52 CST 2017<span class="o">]</span> The intermediate CA cert is in  /root/.acme.sh/a.example.com/ca.cer 
<span class="o">[</span>Tue Feb <span class="m">28</span> 15:25:52 CST 2017<span class="o">]</span> And the full chain certs is there:  /root/.acme.sh/a.example.com/fullchain.cer 
</code></pre></div><p>签发完成</p>
<p>安装证书</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">acme.sh  --installcert  -d a.example.com -d b.example.com -d c.example.com <span class="se">\
</span><span class="se"></span>        --keypath   /data/auth/server-key.pem <span class="se">\
</span><span class="se"></span>        --fullchainpath /data/auth/server-cert.pem <span class="se">\
</span><span class="se"></span>        --reloadcmd  <span class="s2">&#34;service nginx restart&#34;</span>
</code></pre></div><p>上述路径&amp;域名按需修改</p>
</li>
<li>
<p>更新证书</p>
<p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p>
</li>
<li>
<p>更新 acme.sh</p>
<p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.</p>
<p>升级 acme.sh 到最新版 :</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">acme.sh --upgrade
</code></pre></div><p>如果你不想手动升级, 可以开启自动升级:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">acme.sh  --upgrade  --auto-upgrade
</code></pre></div><p>之后, acme.sh 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">acme.sh --upgrade  --auto-upgrade  <span class="m">0</span>
</code></pre></div></li>
</ol>
]]></content></item><item><title>陈佩斯&amp;朱时茂 主角与配角</title><link>https://painso.com/posts/share/2017/chenpeisi-zhushimao-zhujueyupeijue/</link><pubDate>Fri, 13 Jan 2017 20:26:48 +0000</pubDate><guid>https://painso.com/posts/share/2017/chenpeisi-zhushimao-zhujueyupeijue/</guid><description/><content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=w_o8fOKZKX0" title=""><img src="http://img.youtube.com/vi/w_o8fOKZKX0/0.jpg" alt=""></a></p>
]]></content></item><item><title>博客迁移到hexo。</title><link>https://painso.com/posts/thinking/2017/migrate-to-hexo/</link><pubDate>Fri, 13 Jan 2017 12:17:00 +0000</pubDate><guid>https://painso.com/posts/thinking/2017/migrate-to-hexo/</guid><description>终于抛弃臃肿的WP了，这种静态页面博客貌似挺好用的。</description><content type="html">&lt;p>终于抛弃臃肿的WP了，这种静态页面博客貌似挺好用的。&lt;/p></content></item><item><title>ocserv 安装记录。</title><link>https://painso.com/posts/tech/2016/ocserv-install-usage/</link><pubDate>Fri, 03 Jun 2016 17:53:05 +0000</pubDate><guid>https://painso.com/posts/tech/2016/ocserv-install-usage/</guid><description>ocserv 全称是 OpenConnect VPN Server。实现了 AnyConnect SSL VPN 协议，兼容 OpenConnection VPN 客户端。特点是体积小、安全和可配置。依赖标准协议如 TLS 1.2 和数据报文 TLS。
它通过实现Cisco的AnyConnect协议，用DTLS作为主要的加密传输协议。
它的主要好处在于:
AnyConnect的VPN协议默认使用UDP DTLS作为数据传输，但如果有什么网络问题导致UDP传输出现问题，它会利用最初建立的TCP TLS通道作为备份通道，降低VPN断开的概率。 AnyConnect作为Cisco新一代的VPN解决方案，被用于许多大型企业，这些企业依赖它提供正常的商业运作，这些正常运作对应的经济效益（读作GDP），是我们最好的伙伴。 OpenConnet的架设足够麻烦，我的意思是，如果你不是大型企业，你会用AnyConnect的概率无限趋近于零。再者，如果它足够简单，我就不用写这篇文章了。(摘自比特客栈) 支持平台：Windows、Mac、Android、iOS、Windows Phone 基本是全平台支持, 我为什么会用他而不用Shadowsocks，因为我一个朋友用的iPhone，而且未越狱又想全局，所以才想到ocserv。
系统版本：CentOS release 6.7 x64
安装前置关联库：
yum -y install autoconf automake gcc libtasn1-devel zlib zlib-devel trousers trousers-devel gmp-devel gmp xz texinfo libnl-devel libnl tcp_wrappers-libs tcp_wrappers-devel tcp_wrappers dbus dbus-devel ncurses-devel pam-devel readline-devel bison bison-devel flex gcc automake autoconf wget expat-devel openssl-devel nettle
wget http://ftp.</description><content type="html"><![CDATA[<p>ocserv 全称是 OpenConnect VPN Server。实现了 AnyConnect SSL VPN 协议，兼容 OpenConnection VPN 客户端。特点是体积小、安全和可配置。依赖标准协议如 TLS 1.2 和数据报文 TLS。</p>
<p>它通过实现Cisco的AnyConnect协议，用DTLS作为主要的加密传输协议。</p>
<p>它的主要好处在于:</p>
<ul>
<li>AnyConnect的VPN协议默认使用UDP DTLS作为数据传输，但如果有什么网络问题导致UDP传输出现问题，它会利用最初建立的TCP TLS通道作为备份通道，降低VPN断开的概率。</li>
<li>AnyConnect作为Cisco新一代的VPN解决方案，被用于许多大型企业，这些企业依赖它提供正常的商业运作，这些正常运作对应的经济效益（读作GDP），是我们最好的伙伴。</li>
<li>OpenConnet的架设足够麻烦，我的意思是，如果你不是大型企业，你会用AnyConnect的概率无限趋近于零。再者，如果它足够简单，我就不用写这篇文章了。(摘自<a href="https://bitinn.net/11084/">比特客栈</a>)</li>
</ul>
<p>支持平台：Windows、Mac、Android、iOS、Windows Phone 基本是全平台支持, 我为什么会用他而不用Shadowsocks，因为我一个朋友用的iPhone，而且未越狱又想全局，所以才想到ocserv。</p>
<p>系统版本：CentOS release 6.7 x64</p>
<p>安装前置关联库：</p>
<pre><code>yum -y install autoconf automake gcc libtasn1-devel zlib zlib-devel trousers trousers-devel gmp-devel gmp xz texinfo libnl-devel libnl tcp_wrappers-libs tcp_wrappers-devel tcp_wrappers dbus dbus-devel ncurses-devel pam-devel readline-devel bison bison-devel flex gcc automake autoconf wget expat-devel openssl-devel
</code></pre><p>nettle</p>
<pre><code>wget http://ftp.gnu.org/gnu/nettle/nettle-2.7.1.tar.gz
tar zxf nettle-2.7.1.tar.gz &amp;&amp; cd nettle-2.7.1
./configure &amp;&amp; make &amp;&amp; make install
cd ..
</code></pre><p>unbound</p>
<pre><code>wget http://unbound.nlnetlabs.nl/downloads/unbound-1.4.22.tar.gz
tar zxf unbound-1.4.22.tar.gz &amp;&amp; cd unbound-1.4.22
./configure --prefix=/usr --sysconfdir=/etc &amp;&amp; make &amp;&amp; make install
cd ..
</code></pre><p>安装后执行程序将会出现动态库文件找不到的问题：</p>
<pre><code>unbound-anchor: error while loading shared libraries: libunbound.so.2: cannot open shared object file: No such file or directory
</code></pre><p>这是因为系统默认没有找/usr/local/lib目录下的库文件，为了一劳永逸，我们把将路径加入到配置文件中：</p>
<pre><code>echo '/usr/local/lib/' &gt; /etc/ld.so.conf.d/local-libraries.conf &amp;&amp; ldconfig
echo '/usr/local/lib64/' &gt;&gt; /etc/ld.so.conf.d/local-libraries.conf &amp;&amp; ldconfig

</code></pre><p>生成配置文件：</p>
<pre><code>mkdir /etc/unbound/ &amp;&amp; unbound-anchor -a &quot;/etc/unbound/root.key&quot;
</code></pre><p>这是为了消除之后编译gnutls时遇到的警告信息：</p>
<p><a href="/images/2016/06/gnutls-warning.png"><img src="/images/2016/06/gnutls-warning-300x62.png" alt="gnutls-warning"></a></p>
<p>添加环境变量(为安装gnutls)：</p>
<pre><code>32bit

export LD_LIBRARY_PATH=/usr/local/lib/:/usr/local/lib64/ NETTLE_CFLAGS=&quot;-I/usr/local/include/&quot; NETTLE_LIBS=&quot;-L/usr/local/lib64/ -lnettle&quot; HOGWEED_CFLAGS=&quot;-I/usr/local/include&quot; HOGWEED_LIBS=&quot;-L/usr/local/lib64/ -lhogweed&quot;

export LD_LIBRARY_PATH=/usr/local/lib/:/usr/local/lib64/ LIBGNUTLS_CFLAGS=&quot;-I/usr/local/include/&quot; LIBGNUTLS_LIBS=&quot;-L/usr/local/lib/ -lgnutls&quot; LIBNL3_CFLAGS=&quot;-I/usr/local/include&quot; LIBNL3_LIBS=&quot;-L/usr/local/lib/ -lnl-3 -lnl-route-3&quot;

64bit

export LD_LIBRARY_PATH=/usr/lib/:/usr/lib64/ NETTLE_CFLAGS=&quot;-I/usr/include/&quot; NETTLE_LIBS=&quot;-L/usr/lib64/ -lnettle&quot; HOGWEED_CFLAGS=&quot;-I/usr/include&quot; HOGWEED_LIBS=&quot;-L/usr/lib64/ -lhogweed&quot;

export LD_LIBRARY_PATH=/usr/lib/:/usr/lib64/ LIBGNUTLS_CFLAGS=&quot;-I/usr/include/&quot; LIBGNUTLS_LIBS=&quot;-L/usr/lib/ -lgnutls&quot; LIBNL3_CFLAGS=&quot;-I/usr/include&quot; LIBNL3_LIBS=&quot;-L/usr/lib/ -lnl-3 -lnl-route-3&quot;
</code></pre><pre><code>export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH
</code></pre><p>gnutls</p>
<pre><code>wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.2/gnutls-3.2.15.tar.xz
tar xvf gnutls-3.2.15.tar.xz
cd gnutls-3.2.15
./configure &amp;&amp; make &amp;&amp; make install
cd ..
</code></pre><p>LibNL</p>
<pre><code>wget http://www.carisma.slowglass.com/~tgr/libnl/files/libnl-3.2.24.tar.gz
tar xvf libnl-3.2.24.tar.gz
cd libnl-3.2.24
./configure &amp;&amp; make &amp;&amp; make install
cd ..
</code></pre><p>ocserv</p>
<pre><code>wget ftp://ftp.infradead.org/pub/ocserv/ocserv-0.8.1.tar.xz
tar xvf ocserv-0.8.1.tar.xz &amp;&amp; cd ocserv-0.8.1
./configure --prefix=/usr --sysconfdir=/etc &amp;&amp; make &amp;&amp; make install
cd ..
</code></pre><p>至此安装完毕，下面配置
创建CA证书和服务器证书</p>
<pre><code>certtool --generate-privkey --outfile ca-key.pem
cat &lt;&lt; _EOF_ &gt; ca.tmpl
cn = &quot;example VPN&quot;
organization = &quot;example.com&quot;
serial = 1
expiration_days = 3650
ca
signing_key
cert_signing_key
crl_signing_key
_EOF_
certtool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem
certtool --generate-privkey --outfile server-key.pem
cat &lt;&lt; _EOF_ &gt; server.tmpl
cn = &quot;example VPN&quot;
o = &quot;example&quot;
serial = 2
expiration_days = 3650
signing_key
encryption_key #only if the generated key is an RSA one
tls_www_server
_EOF_
certtool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem
</code></pre><p>把证书复制到ocserv的配置目录</p>
<pre><code>mkdir -p /etc/ocserv/;cp server-cert.pem /etc/ocserv/ &amp;&amp; cp server-key.pem /etc/ocserv/
</code></pre><p>编辑配置文件</p>
<pre><code>vim /etc/ocserv/ocserv.conf
</code></pre><pre><code>#认证方式,这里选择的是帐号密码认证
auth = &quot;plain[/etc/ocserv/ocpasswd]&quot;

#允许同时连接的客户端数量
max-clients = 100
#限制同一客户端的并行登陆数量
max-same-clients = 4
#服务监听的TCP/UDP端口
tcp-port = 443
udp-port = 443
#自动优化VPN的网络性能
try-mtu-discovery = true
#服务器证书与密钥
server-cert = /etc/ocserv/server-cert.pem
server-key = /etc/ocserv/server-key.pem
#客户端连上vpn后使用的dns
dns = 8.8.8.8
dns = 8.8.4.4
#注释掉所有的route,让服务器成为gateway
#route = 192.168.1.0/255.255.255.0
#启用cisco客户端兼容性支持
cisco-client-compat = true
pid-file = /var/run/ocserv.pid
socket-file = /var/run/ocserv-socket
run-as-user = ocserv
run-as-group = ocserv
device = vpns
#分配内网IP地址段
ipv4-network = 172.16.200.0
ipv4-netmask = 255.255.255.0
</code></pre><p>添加帐号</p>
<pre><code>ocpasswd -c /etc/ocserv/ocpasswd your-username
</code></pre><p>开启内核ipv4转发</p>
<pre><code>vim /etc/sysctl.conf
</code></pre><p>将net.ipv4.ip_forward 设置为1</p>
<pre><code>net.ipv4.ip_forward = 1
</code></pre><p>保存执行 sysctl -p</p>
<p>添加防火墙流量转发(网卡名称以实际情况为准)</p>
<pre><code>iptables -t nat -A POSTROUTING -s 172.16.200.0/24 -o eth0 -j MASQUERADE
iptables -A FORWARD -s 172.16.200.0/24 -j ACCEPT
service iptables save
</code></pre>]]></content></item><item><title>Let's Encrypt 免费SSL证书安装小记。</title><link>https://painso.com/posts/tech/2015/lets-encrypt-freessl-install/</link><pubDate>Thu, 10 Dec 2015 16:08:58 +0000</pubDate><guid>https://painso.com/posts/tech/2015/lets-encrypt-freessl-install/</guid><description>从去年就开始关注Let&amp;rsquo;s Encrypt 了， 就在不久前它宣布公测。所有人都可以使用由此机构签发的免费SSL证书。
下面来分享一下本屌的安装过程。
系统：CentOS 6.4 x64 环境：军哥LNMP 签发的域名：本博客 使用的签发工具：acme-tiny (这里不使用官方提供的工具原因为太过臃肿，acme-tiny仅200+行代码，小巧简单)
2015-12-27 22:06:57 update: CloudXNS已支持Let&amp;rsquo;s Encrypt的验证, See https://www.cloudxns.net/Support/detail/id/1062.html 注意： 1、确保需要签发的域名使用的DNS为国外DNS服务(如cloudflare,linode等，否则到签发步骤可能会报错) 2、确保需要签发的域名已指向A记录到你的网站服务器，不要用CNAME等记录，一定要A记录！(否则到签发步骤可能会报错) 3、最好用ROOT帐号操作(我使用普通帐号操作会报key values mismatch)
安装git
yum -y install git 如果你已经有了git则执行(注意：存放目录最好不要在home目录下，我存放在/web/acme-tiny)
git clone https://github.com/diafygi/acme-tiny.git 生成帐号KEY
openssl genrsa 4096 &amp;amp;gt; account.key 生成域名KEY
openssl genrsa 4096 &amp;amp;gt; painso.key 生成CSR文件(如果你是以根域名来访问的话使用单域名即可，签发的主机头越多越麻烦哦)
单域名(不包含其他域如www)： openssl req -new -sha256 -key painso.key -subj &amp;quot;/CN=painso.com&amp;quot; &amp;amp;gt; painso.csr 多域名： openssl req -new -sha256 -key painso.key -subj &amp;quot;/&amp;quot; -reqexts SAN -config &amp;amp;lt;(cat /etc/ssl/openssl.</description><content type="html"><![CDATA[<p>从去年就开始关注Let&rsquo;s Encrypt 了， 就在不久前它宣布公测。所有人都可以使用由此机构签发的免费SSL证书。</p>
<p>下面来分享一下本屌的安装过程。</p>
<p>系统：CentOS 6.4 x64
环境：军哥LNMP
签发的域名：本博客
使用的签发工具：<a href="https://github.com/diafygi/acme-tiny">acme-tiny</a> (这里不使用官方提供的工具原因为太过臃肿，acme-tiny仅200+行代码，小巧简单)</p>
<p>2015-12-27 22:06:57 update:
CloudXNS已支持Let&rsquo;s Encrypt的验证, See <a href="https://www.cloudxns.net/Support/detail/id/1062.html">https://www.cloudxns.net/Support/detail/id/1062.html</a>
注意：
1、确保需要签发的域名使用的DNS为国外DNS服务(如cloudflare,linode等，否则到签发步骤可能会报错)
2、确保需要签发的域名已指向A记录到你的网站服务器，不要用CNAME等记录，一定要A记录！(否则到签发步骤可能会报错)
3、最好用ROOT帐号操作(我使用普通帐号操作会报key values mismatch)</p>
<p>安装git</p>
<pre><code>yum -y install git
</code></pre><p>如果你已经有了git则执行(注意：存放目录最好不要在home目录下，我存放在/web/acme-tiny)</p>
<pre><code>git clone https://github.com/diafygi/acme-tiny.git
</code></pre><p>生成帐号KEY</p>
<pre><code>openssl genrsa 4096 &amp;gt; account.key
</code></pre><p>生成域名KEY</p>
<pre><code>openssl genrsa 4096 &amp;gt; painso.key
</code></pre><p>生成CSR文件(如果你是以根域名来访问的话使用单域名即可，签发的主机头越多越麻烦哦)</p>
<pre><code>单域名(不包含其他域如www)：
openssl req -new -sha256 -key painso.key -subj &quot;/CN=painso.com&quot; &amp;gt; painso.csr

多域名：
openssl req -new -sha256 -key painso.key -subj &quot;/&quot; -reqexts SAN -config &amp;lt;(cat /etc/ssl/openssl.cnf &amp;lt;(printf &quot;[SAN]\nsubjectAltName=DNS:painso.com,DNS:www.painso.com&quot;)) &amp;gt; painso.csr
</code></pre><p>如果你使用多域名这行命令可能会报找不到openssl.cnf，别慌，直接访问<a href="http://web.mit.edu/crypto/openssl.cnf">http://web.mit.edu/crypto/openssl.cnf</a> 全选复制到你系统下的/etc/ssl/openssl/cnf。</p>
<p>然后打开你的Nginx虚拟主机配置文件，在80端口处添加</p>
<pre><code>location /.well-known/acme-challenge/ {
        alias /web/acme-tiny/; #这里填你的acme-tiny所在目录
        try_files $uri =404;
    }
</code></pre><p>如下图中我的配置
<a href="/images/2015/12/lse-nginx.png"><img src="/images/2015/12/lse-nginx-300x156.png" alt="lse-nginx"></a>
如果你有自动跳转到443端口的配置请记得把他注释掉。
重启Nginx</p>
<pre><code>nginx -s reload (以实际路径为准，我已经做过软连接ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx)
</code></pre><p>在Let&rsquo;s Encrypt 服务器提交签发证书(程序大致操作：acme-tiny.py会生成一个密钥文件到acme-tiny目录下，然后Let&rsquo;s Encrypt 证书签发服务器会访问需签发域名/.well-known/acme-challenge/路径下acme-tiny.py生成的密钥文件)</p>
<pre><code>python acme_tiny.py --account-key account.key --csr painso.csr --acme-dir /web/acme-tiny/ &amp;gt; painso.crt
</code></pre><p>这上面应该都能看明白哦?
&ndash;account-key
之前生成的account-key路径
&ndash;csr
同上
&ndash;acme-dir
acme-tiny路径
顺利的话会生成一个.crt文件，也就是服务器签发下来的证书文件
然后下载根证书</p>
<pre><code>wget -O - https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem &amp;gt; intermediate.pem
</code></pre><p>合并证书(不执行下面操作的话firefox会提示不信任，chrome则无碍)</p>
<pre><code>cat intermediate.pem &amp;gt; painso.crt
</code></pre><p>然后在nginx虚拟主机配置中修改原来的证书路径为现在新的证书路径即可</p>
<pre><code>nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful

</code></pre><p>测试OK后记得把之前的</p>
<pre><code>location /.well-known/acme-challenge/ {
        alias /web/acme-tiny/;;
        try_files $uri =404;
    }
    ```
注释掉。

然后访问你的网站，是否可以看到 Let's Encrypt 啦。

总的来说，证书的安装签发是非常蛋疼的，比如我用cloudxns就不能执行签发步骤，需要换到cloudflare，签发完了再换回cloudxns，且证书期限只有90天，希望Let's Encrypt越搞越好:)

[![Let](/images/2015/12/Lets-Encrypt-236x300.png)](/images/2015/12/Lets-Encrypt.png)</code></pre>]]></content></item><item><title>Android L 网络图标感叹号去除方法</title><link>https://painso.com/posts/tech/2015/android-l-exclamation-mark/</link><pubDate>Thu, 05 Feb 2015 11:16:04 +0000</pubDate><guid>https://painso.com/posts/tech/2015/android-l-exclamation-mark/</guid><description>大致意思是Android 5.0连上WIFI后会访问 clients3.google.com/generate_204 这个网址
如果能正常访问, 则不会在通知栏出现 &amp;ldquo;此WIFI需要登录才能使用&amp;rdquo;
而你也知道, 谷歌在国内基本是不能访问的
所以找一个替换一下就OK了
clients3.google.com/generate_204 会给你返回一个204状态, 你也可以自己搭建一个这样的服务
解决方法(无需root):
完全屏蔽网络检查功能, 最简单快速, 但是就没有办法提示wifi登录: adb shell &amp;quot;settings put global captive_portal_detection_enabled 0&amp;quot; 使用g.cn替换掉被墙的google服务器: adb shell &amp;quot;settings put global captive_portal_server g.cn&amp;quot; 上面的方法需要电脑执行adb命令, 当然你也可以在手机上安装类似本地Shell的APP执行: settings put global captive_portal_server g.cn btw: g.cn中的g.cn/generate_204也同样会返回204状态所以建议使用</description><content type="html"><![CDATA[<p>大致意思是Android 5.0连上WIFI后会访问 <code>clients3.google.com/generate_204</code> 这个网址</p>
<p>如果能正常访问, 则不会在通知栏出现 &ldquo;此WIFI需要登录才能使用&rdquo;</p>
<p>而你也知道, 谷歌在国内基本是不能访问的</p>
<p>所以找一个替换一下就OK了</p>
<p><code>clients3.google.com/generate_204</code> 会给你返回一个204状态, 你也可以自己搭建一个这样的服务</p>
<p>解决方法(无需root):</p>
<ol>
<li>完全屏蔽网络检查功能, 最简单快速, 但是就没有办法提示wifi登录:
<code>adb shell &quot;settings put global captive_portal_detection_enabled 0&quot;</code></li>
<li>使用g.cn替换掉被墙的google服务器:
<code>adb shell &quot;settings put global captive_portal_server g.cn&quot;</code>
上面的方法需要电脑执行adb命令, 当然你也可以在手机上安装类似本地Shell的APP执行:
<code>settings put global captive_portal_server g.cn</code></li>
</ol>
<p>btw: g.cn中的g.cn/generate_204也同样会返回204状态所以建议使用</p>
]]></content></item><item><title>Dropbox被墙解决方案。</title><link>https://painso.com/posts/tech/2014/dropbox-can-not-connect/</link><pubDate>Wed, 12 Nov 2014 15:16:02 +0000</pubDate><guid>https://painso.com/posts/tech/2014/dropbox-can-not-connect/</guid><description>&lt;p>Dropbox被墙已经有好几个月了，无论是网页版还是客户端都无法正常工作，之前一直用的SS来访问，但是如果是用别人电脑的时候还是有些麻烦的。
现在使用了@&lt;a href="http://github.com/clowwindy">clowwindy&lt;/a>的ChinaDNS
使用方法：
下载地址：
&lt;a href="https://github.com/clowwindy/ChinaDNS/blob/master/README.md#install">https://github.com/clowwindy/ChinaDNS/blob/master/README.md#install&lt;/a>
解压后运行dnsrelay.exe启动本地DNS服务器&lt;/p></description><content type="html"><![CDATA[<p>Dropbox被墙已经有好几个月了，无论是网页版还是客户端都无法正常工作，之前一直用的SS来访问，但是如果是用别人电脑的时候还是有些麻烦的。
现在使用了@<a href="http://github.com/clowwindy">clowwindy</a>的ChinaDNS
使用方法：
下载地址：
<a href="https://github.com/clowwindy/ChinaDNS/blob/master/README.md#install">https://github.com/clowwindy/ChinaDNS/blob/master/README.md#install</a>
解压后运行dnsrelay.exe启动本地DNS服务器</p>
<p>然后把你的网卡DNS设置成127.0.0.1即可使用啦～
其原理为(原文@<a href="http://examplecode.github.io/tools/2014/06/20/the-tools-prevent-dns-cache-pollution/">chengkai</a>)：
GFW对域名进行DNS污染的原理实际上是在正常的DNS服务器返回请求包之前，返回请求者错误的IP地址。而GFW返回的这些错误地址也是有规律可循，根据这个原理就不难写出对抗GFW DNS污染的程序了。所以程序核心内容就有两点：
提供GFW返回IP的一个黑名单列表。
如果服务端返回的DNS响应IP地址在黑名单列表中，则进行忽略并尝试等待真实的ip地址返回。</p>
<p>这样Dropbox就不用走代理，也省了不少流量。
经过测试还可以上FB，推特貌似是直接把IP给墙了。
如果你需要一个Dropbox，请使用该链接注册，<a href="http://db.tt/0xSK4uIc">http://db.tt/0xSK4uIc</a> 我和你都会额外获得512M的空间。</p>]]></content></item><item><title>Discuz显示音乐以及除图片外文件的真实链接。</title><link>https://painso.com/posts/tech/2014/discuz-true-attachment-links/</link><pubDate>Fri, 25 Jul 2014 22:04:36 +0000</pubDate><guid>https://painso.com/posts/tech/2014/discuz-true-attachment-links/</guid><description>由于自己的音乐论坛一直找不到好的外链，所以干脆自己搭个算了 想找一个支持直链的开源站点小程序用，但是一直都没有找到 于是开始了Discuz远程附件折腾之旅。
都知道Discuz远程附件的机制蛋疼至极，图片可以直接显示链接，其他文件不行 折腾了一天，终于搞定 打开
\source\function\function_discuzcode.php 找到
function parseattachurl($aid, $ext, $ignoretid = 0) 将
function parseattachurl($aid, $ext, $ignoretid = 0) { global $_G; $_G['forum_skipaidlist'][] = $aid; return $_G['siteurl'].'forum.php?mod=attachment&amp;amp;amp;aid='.aidencode($aid, $ext, $ignoretid ? '' : $_G['tid']).($ext ? '&amp;amp;amp;request=yes&amp;amp;amp;_f=.'.$ext : ''); } 替换为
function parseattachurl($aid, $ext, $ignoretid = 0) { global $_G; $_G['forum_skipaidlist'][] = $aid; $aid = intval($aid); $attach = DB::fetch_first(&amp;quot;SELECT * FROM &amp;quot;.DB::table('forum_attachment').&amp;quot; WHERE aid='$aid'&amp;quot;); $tid = $attach['tableid']; $attach = DB::fetch_first(&amp;quot;SELECT * FROM &amp;quot;.</description><content type="html"><![CDATA[<p>由于自己的音乐论坛一直找不到好的外链，所以干脆自己搭个算了
想找一个支持直链的开源站点小程序用，但是一直都没有找到
于是开始了Discuz远程附件折腾之旅。</p>
<p>都知道Discuz远程附件的机制蛋疼至极，图片可以直接显示链接，其他文件不行
折腾了一天，终于搞定
打开</p>
<pre><code>\source\function\function_discuzcode.php
</code></pre><p>找到</p>
<pre><code>function parseattachurl($aid, $ext, $ignoretid = 0)
</code></pre><p>将</p>
<pre><code>function parseattachurl($aid, $ext, $ignoretid = 0) {
	global $_G;
	$_G['forum_skipaidlist'][] = $aid;
	return $_G['siteurl'].'forum.php?mod=attachment&amp;amp;aid='.aidencode($aid, $ext, $ignoretid ? '' : $_G['tid']).($ext ? '&amp;amp;request=yes&amp;amp;_f=.'.$ext : '');
}
</code></pre><p>替换为</p>
<pre><code>function parseattachurl($aid, $ext, $ignoretid = 0) {
    global $_G;
    $_G['forum_skipaidlist'][] = $aid;
	$aid = intval($aid);

	$attach = DB::fetch_first(&quot;SELECT * FROM &quot;.DB::table('forum_attachment').&quot; WHERE aid='$aid'&quot;);
	$tid = $attach['tableid'];
	$attach = DB::fetch_first(&quot;SELECT * FROM &quot;.DB::table('forum_attachment_').$tid.&quot; WHERE aid='$aid'&quot;);
	$attachfile = $attach['attachment'];
    return &quot;http://127.0.0.1/ftp/music/forum/&quot;.$attachfile;
}
</code></pre><p>其中这个&quot;http://127.0.0.1/ftp/music/forum/&rdquo; 需要按自己实际情况改改
、数据库查询语句是本人写的，如有不正之处请指出，谢谢。</p>
]]></content></item><item><title>The Future。</title><link>https://painso.com/posts/thinking/2014/the-future/</link><pubDate>Sun, 11 May 2014 02:02:44 +0000</pubDate><guid>https://painso.com/posts/thinking/2014/the-future/</guid><description>来上海第5天，意识消沉。
从开始的充满信心和希望没考虑什么后果就冲过来了到现在。
来这边后经历种种，朋友们告诉我初中学历想混进互联网公司很难的，大学本科生比我优秀的因有尽有。
我早想过，我愿意试，我对互联网充满了好奇。
但是，没用。
我想了很多，脑子感觉从没放松过，前所未有的迷茫。
投出去了将近百封的简历，邮箱看到清一色的 ”不匹配“ 或者石沉大海，手机没有一个陌生来电。
OK，我想应该放慢前进的脚步，告诉自己慢慢来，一步不可登天，我现在要做的就是做好现在的事。
I can do it!</description><content type="html"><![CDATA[<p>来上海第5天，意识消沉。</p>
<p>从开始的充满信心和希望没考虑什么后果就冲过来了到现在。</p>
<p>来这边后经历种种，朋友们告诉我初中学历想混进互联网公司很难的，大学本科生比我优秀的因有尽有。</p>
<p>我早想过，我愿意试，我对互联网充满了好奇。</p>
<p>但是，没用。</p>
<p>我想了很多，脑子感觉从没放松过，前所未有的迷茫。</p>
<p>投出去了将近百封的简历，邮箱看到清一色的 ”不匹配“ 或者石沉大海，手机没有一个陌生来电。</p>
<p>OK，我想应该放慢前进的脚步，告诉自己慢慢来，一步不可登天，我现在要做的就是做好现在的事。</p>
<p>I can do it!</p>
<p><a href="/images/2014/05/2014-05-08-21.59.58.jpg"><img src="/images/2014/05/2014-05-08-21.59.58-300x225.jpg" alt="2014-05-08 21.59.58"></a></p>
]]></content></item><item><title>CloudStack 4.2.1+KVM部署实战。</title><link>https://painso.com/posts/tech/2014/cloudstack-kvm-install/</link><pubDate>Thu, 20 Mar 2014 16:16:44 +0000</pubDate><guid>https://painso.com/posts/tech/2014/cloudstack-kvm-install/</guid><description>&lt;p>拓扑图：&lt;/p>
&lt;p>&lt;a href="https://painso.com/images/2014/Topology.png"> &lt;img src="https://painso.com/images/2014/Topology.png" alt="Topology">&lt;/a>&lt;/p>
&lt;p>相关说明：&lt;/p>
&lt;p>系统都为CentOS6.4 x64&lt;/p>
&lt;p>Management端不需要任何虚拟化的支持，只是做WEB控制台和管理用，任意机器即可&lt;/p>
&lt;p>Agent端的CPU需要虚拟化支持，我这里用的是R710，已开启VT并且cpu支持flag:vmx&lt;/p>
&lt;p>主存储和二级存储都放在Agent端&lt;/p></description><content type="html"><![CDATA[<p>拓扑图：</p>
<p><a href="/images/2014/Topology.png"> <img src="/images/2014/Topology.png" alt="Topology"></a></p>
<p>相关说明：</p>
<p>系统都为CentOS6.4 x64</p>
<p>Management端不需要任何虚拟化的支持，只是做WEB控制台和管理用，任意机器即可</p>
<p>Agent端的CPU需要虚拟化支持，我这里用的是R710，已开启VT并且cpu支持flag:vmx</p>
<p>主存储和二级存储都放在Agent端</p>
<p>配置网络：</p>
<pre><code>[root@management ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth1
DEVICE=eth1
BOOTPROTO=static
ONBOOT=yes
IPADDR=10.10.16.250
NETMASK=255.255.255.0
GATEWAY=10.10.16.254
DNS1=8.8.4.4
</code></pre><pre><code>[root@management ~]# ifconfig
eth1      Link encap:Ethernet  HWaddr 00:1D:60:E4:01:F2  
          inet addr:10.10.16.250  Bcast:10.10.16.255  Mask:255.255.255.0
          inet6 addr: fe80::21d:60ff:fee4:1f2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:31460 errors:0 dropped:0 overruns:0 frame:0
          TX packets:9113 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:25547046 (24.3 MiB)  TX bytes:704232 (687.7 KiB)
          Interrupt:18 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)```
</code></pre><pre><code>[root@agent ~]# cat /etc/sysconfig/network-scripts/ifcfg-em2
DEVICE=em2
BOOTPROTO=static
ONBOOT=yes
IPADDR=10.10.16.253
NETMASK=255.255.255.0
GATEWAY=10.10.16.254
DNS1=8.8.4.4
</code></pre><pre><code>[root@agent ~]# ifconfig
em2       Link encap:Ethernet  HWaddr 78:2B:CB:64:B7:A2  
          inet addr:10.10.16.253  Bcast:10.10.16.255  Mask:255.255.255.0
          inet6 addr: fe80::7a2b:cbff:fe64:b7a2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:189 errors:0 dropped:0 overruns:0 frame:0
          TX packets:58 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:19800 (19.3 KiB)  TX bytes:6460 (6.3 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
</code></pre><p>清空防火墙（两台都需要）：</p>
<pre><code>[root@management ~]# iptables  -F
[root@management ~]# service  iptables  save
iptables: Saving firewall rules to /etc/sysconfig/iptables: [  OK  ]
</code></pre><p>配置NTP：</p>
<p>management：</p>
<pre><code>[root@management ~]# yum -y install ntp
</code></pre><p>编辑/etc/ntp.conf，找到server部分，修改如下（把management做NTP服务器，不从互联网更新，也可参考其他配置或者事先从网络更新一下）：</p>
<pre><code>#server 0.rhel.pool.ntp.org iburst
#server 1.rhel.pool.ntp.org iburst
#server 2.rhel.pool.ntp.org iburst
#server 3.rhel.pool.ntp.org iburst
server 127.127.1.0
fudge 127.127.1.0 stratum 10
</code></pre><pre><code>[root@management ~]# service ntpd restart
Shutting down ntpd:                                        [  OK  ]
Starting ntpd:                                             [  OK  ]
[root@management ~]# chkconfig ntpd on
</code></pre><p>agent：</p>
<pre><code>[root@agent ~]# yum -y install ntp
</code></pre><p>编辑/etc/ntp.conf，找到server部分，修改如下：</p>
<pre><code>#server 0.rhel.pool.ntp.org iburst
#server 1.rhel.pool.ntp.org iburst
#server 2.rhel.pool.ntp.org iburst
#server 3.rhel.pool.ntp.org iburst
server 10.10.16.250
</code></pre><pre><code>[root@management ~]# service ntpd restart
Shutting down ntpd:                                        [  OK  ]
Starting ntpd:                                             [  OK  ]
[root@management ~]# chkconfig ntpd on
</code></pre><p>重启网络和关闭SELINUX、hosts文件添加住被控IP和主机名（2台都需要）</p>
<pre><code>[root@management ~]# service network restart
Shutting down interface eth1:                              [  OK  ]
Shutting down loopback interface:                          [  OK  ]
Bringing up loopback interface:                            [  OK  ]
Bringing up interface eth1:                                [  OK  ]

[root@agent ~]# service network restart
Shutting down interface em2:                               [  OK  ]
Shutting down loopback interface:                          [  OK  ]
Bringing up loopback interface:                            [  OK  ]
Bringing up interface em2:                                 [  OK  ]

[root@agent ~]# cat /etc/selinux/config 
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#	enforcing - SELinux security policy is enforced.
#	permissive - SELinux prints warnings instead of enforcing.
#	disabled - SELinux is fully disabled.
SELINUX=disabled
# SELINUXTYPE= type of policy in use. Possible values are:
#	targeted - Only targeted network daemons are protected.
#	strict - Full SELinux protection.
SELINUXTYPE=targeted

[root@management ~]# hostname --fqdn
management
[root@management ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.10.16.250    management
10.10.16.253    agent
</code></pre><p>添加源：</p>
<p>只需要默认源和cloudstack源即可，由于网速太慢，我事先准备了另外一台服务器做本地源</p>
<p><a href="/images/2014/repo.png"><img src="/images/2014/repo.png" alt="repo"></a></p>
<pre><code>[root@management ~]# cat /etc/yum.repos.d/1.repo 
[rhel]
name=rhel
baseurl=http://10.10.16.100/repo/rhel
enable=1
gpgcheck=0
[cloudstack]
name=cloudstack
baseurl=http://10.10.16.100/repo/cloudstack
enable=1
gpgcheck=0
</code></pre><p>更新重启：</p>
<pre><code>[root@management ~]# yum -y update;reboot
[root@agent ~]# yum -y update;reboot
</code></pre><p>配置management端：</p>
<p>安装MYSQL：</p>
<pre><code>[root@management ~]# yum -y install mysql-server
[root@management ~]# service mysqld start
[root@management ~]# chkconfig mysqld on
</code></pre><p>设置MYSQL密码：</p>
<pre><code>[root@management ~]# mysql_secure_installation
</code></pre><p>这里我的mysql密码为：cloudstack</p>
<p>安装management：</p>
<pre><code>[root@management ~]# yum -y install cloudstack-management
</code></pre><p>等待ing：</p>
<p><a href="/images/2014/install-management.png"><img src="/images/2014/install-management.png" alt="install-management"></a></p>
<p>导入数据库：</p>
<pre><code>[root@management ~]# cloudstack-setup-databases 新建的数据库帐号:密码@主机名 --deploy-as=root:mysql管理员密码
</code></pre><p><a href="/images/2014/setup-database.png"><img src="/images/2014/setup-database.png" alt="setup-database"></a></p>
<p>设置cloudstack用户对/var/log/cloudstack*日志目录的访问权限（不然会无法启动）：</p>
<pre><code>[root@management ~]# chown -R cloud:cloud /var/log/cloudstack*
</code></pre><p>cloud账户为安装management时自动创建的，用于运行相关服务 。</p>
<p>初始化management服务：</p>
<pre><code>[root@management ~]# cloudstack-setup-management 
Starting to configure CloudStack Management Server:
Configure sudoers ...         [OK]
Configure Firewall ...        [OK]
Configure CloudStack Management Server ...[OK]
CloudStack Management Server setup is Done!
[root@management ~]# netstat -antp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      941/sshd            
tcp        0      0 127.0.0.1:25                0.0.0.0:*                   LISTEN      1018/master         
tcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      1272/mysqld         
tcp        0     52 10.10.16.250:22             10.10.16.220:57436          ESTABLISHED 1052/sshd           
tcp        0      0 :::51022                    :::*                        LISTEN      2193/java           
tcp        0      0 :::48686                    :::*                        LISTEN      2193/java           
tcp        0      0 :::8080                     :::*                        LISTEN      2193/java           
tcp        0      0 :::22                       :::*                        LISTEN      941/sshd            
tcp        0      0 ::1:25                      :::*                        LISTEN      1018/master         
tcp        0      0 :::45219                    :::*                        LISTEN      2193/java           
tcp        0      0 :::7080                     :::*                        LISTEN      2193/java           
tcp        0      0 ::1:55059                   ::1:34910                   TIME_WAIT   -
</code></pre><p>如上，8080 WEB控制台已经正常启动，</p>
<p>访问<code>http://10.10.16.250:8080/client</code> 默认帐号：admin 密码：password</p>
<p><a href="/images/2014/dashboard.png"><img src="/images/2014/dashboard.png" alt="dashboard"></a></p>
<p>配置NFS服务：</p>
<p>之前说了，我准备把主存储和二级存储都放agent，所以在agent上安装NFS</p>
<pre><code>[root@agent ~]# yum -y install nfs-utils
</code></pre><p>挂载磁盘：</p>
<pre><code>[root@agent ~]# mkdir -p /storage/{primary,secondary}
[root@agent ~]# mount /dev/sdb /storage/secondary/
[root@agent ~]# mount /dev/sdc /storage/primary/
</code></pre><pre><code>[root@agent ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/sda1        20G 1003M   18G   6% /
tmpfs            56G     0   56G   0% /dev/shm
/dev/sdb        135G  188M  128G   1% /storage/secondary
/dev/sdc        3.6T  197M  3.4T   1% /storage/primary
</code></pre><p>我对cloudstack存储的理解：</p>
<p>主存储存放VM文件和磁盘文件</p>
<p>辅助存储存放ISO镜像和系统模板</p>
<p>记得添加开机自动挂载</p>
<p><a href="/images/2014/fstab.png"><img src="/images/2014/fstab.png" alt="fstab"></a></p>
<p>编辑/etc/exports 添加NFS共享信息：</p>
<pre><code>[root@agent ~]# vim /etc/exports 
/storage/primary        *(rw,async,no_root_squash)
/storage/secondary      *(rw,async,no_root_squash)
</code></pre><p>启动NFS服务：</p>
<pre><code>[root@agent ~]# service rpcbind start
Starting rpcbind:                                          [  OK  ]
[root@agent ~]# chkconfig rpcbind on
[root@agent ~]# service nfs start
Starting NFS services:                                     [  OK  ]
Starting NFS mountd:                                       [  OK  ]
Starting NFS daemon:                                       [  OK  ]
Starting RPC idmapd:                                       [  OK  ]
[root@agent ~]# chkconfig nfs on
</code></pre><p>在management测试nfs是否工作正常：</p>
<pre><code>[root@management ~]# showmount -e 10.10.16.253
Export list for 10.10.16.253:
/storage/secondary *
/storage/primary   *
</code></pre><p>能正常显示则OK；</p>
<p>management端导入KVM系统模板(用于cloudstack系统VM)：</p>
<p>我之前用官方的一直不正常，推荐使用下方地址的模板</p>
<p>可以在<a href="http://jenkins.buildacloud.org/job/build-systemvm64-master/">http://jenkins.buildacloud.org/job/build-systemvm64-master/</a> 这里下载</p>
<p><a href="/images/2014/systemvm-template.png"><img src="/images/2014/systemvm-template.png" alt="systemvm-template"></a></p>
<p>挂载NFS二级存储（之前讲过是放系统模板和ISO用）：</p>
<pre><code>[root@management ~]# mount 10.10.16.253:/storage/secondary /opt
</code></pre><p>导入系统VM模板：</p>
<pre><code>[root@management ~]# /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m NFS挂载二级存储的路径 -f 系统模板文件路径 -h 虚拟化平台名称 -F
</code></pre><p><a href="/images/2014/import-systemvm-template.png"><img src="/images/2014/import-systemvm-template.png" alt="import-systemvm-template"></a></p>
<p>等待。。。</p>
<p>导入完毕后卸载二级存储：</p>
<pre><code>[root@management ~]# umount /opt
</code></pre><p>进入WEB管理界面点击”我以前使用过 CloudStack，跳过此指南“，进入全局设置选项</p>
<p>设置存储所在网段：</p>
<p><a href="/images/2014/secstorage.png"><img src="/images/2014/secstorage.png" alt="secstorage"></a></p>
<p>设置延时时间（删除VM等等操作的延时）：</p>
<p><a href="/images/2014/expunge.png"><img src="/images/2014/expunge.png" alt="expunge"></a></p>
<p>重启management：</p>
<pre><code>[root@management ~]# service cloudstack-management restart
Stopping cloudstack-management:                            [  OK  ]
Starting cloudstack-management:                            [  OK  ]
</code></pre><p>配置Agent：</p>
<p>安装qemu等组件支持，不然待会添加主机会加不上；</p>
<pre><code>[root@agent ~]# yum -y install qemu* virt* libvirt*
</code></pre><p><a href="/images/2014/install-qemu.png"><img src="/images/2014/install-qemu.png" alt="install-qemu"></a></p>
<pre><code>[root@agent ~]# yum -y install cloudstack-agent
</code></pre><p>编辑/etc/libvirt/qemu.conf找到vnc_listen = &ldquo;0.0.0.0&quot;取消注释</p>
<p><a href="/images/2014/qemu.png"><img src="/images/2014/qemu.png" alt="qemu"></a></p>
<p>编辑/etc/cgconfig.conf添加：</p>
<pre><code>group virt {
cpu {
cpu.shares = 9216;
}
}
</code></pre><p><a href="/images/2014/cgconfig.png"><img src="/images/2014/cgconfig.png" alt="cgconfig"></a></p>
<p>启动服务：</p>
<pre><code>[root@agent ~]# service cgconfig start
Starting cgconfig service:                                 [  OK  ]
[root@agent ~]# service libvirtd restart
Stopping libvirtd daemon:                                  [  OK  ]
Starting libvirtd daemon:                                  [  OK  ]
[root@agent ~]# chkconfig cgconfig on
[root@agent ~]# chkconfig libvirtd on
</code></pre><p>注意：此时cloudstack-agent服务不需要启动，management添加该主机时会自动启动</p>
<p>访问http://10.10.16.250:8080/client management端开始配置cloudstack：</p>
<p><a href="/images/2014/cloudstack-1.png"><img src="/images/2014/cloudstack-1.png" alt="cloudstack-1"></a></p>
<p>修改新密码继续：</p>
<p><a href="/images/2014/cloudstack-pass.png"><img src="/images/2014/cloudstack-pass.png" alt="cloudstack-pass"></a></p>
<p>区域类似一个数据中心；</p>
<p><a href="/images/2014/add-area.png"><img src="/images/2014/add-area.png" alt="add-area"></a></p>
<p>添加提供点：我的理解是给CloudStack内部系统用的IP，如系统VM</p>
<p><a href="/images/2014/add-offer.png"><img src="/images/2014/add-offer.png" alt="add-offer"></a></p>
<p>来宾网络：我的理解是给我们创建的VM用的IP</p>
<p><a href="/images/2014/add-guest-network.png"><img src="/images/2014/add-guest-network.png" alt="add-guest-network"></a></p>
<p><a href="/images/2014/add-cluster.png"><img src="/images/2014/add-cluster.png" alt="add-cluster"></a></p>
<p>添加主机：就是添加agent端，输入IP、用户名和密码即可</p>
<p><a href="/images/2014/add-host.png"><img src="/images/2014/add-host.png" alt="add-host"></a></p>
<p><a href="/images/2014/add-primary.png"><img src="/images/2014/add-primary.png" alt="add-primary"></a></p>
<p><a href="/images/2014/add-secondary.png"><img src="/images/2014/add-secondary.png" alt="add-secondary"></a></p>
<p>最后点击启动，等待数分钟</p>
<p><a href="/images/2014/cs-successfully.png"><img src="/images/2014/cs-successfully.png" alt="cs-successfully"></a></p>
<p>点击启动后可进入主面板，可查看agent配置信息和相关资源使用信息</p>
<p><a href="/images/2014/cs-dashboard.png"><img src="/images/2014/cs-dashboard.png" alt="cs-dashboard"></a></p>
<p>点击“基本架构”，可查看相关信息</p>
<p><a href="/images/2014/cs-base.png"><img src="/images/2014/cs-base.png" alt="cs-base"></a></p>
<p>点击系统VM下的“查看全部”可看到系统VM的状态，都为running+up则表示正常</p>
<p><a href="/images/2014/systemvm-satate.png"><img src="/images/2014/systemvm-satate.png" alt="systemvm-satate"></a></p>
<p>至此CloudStack Management Agent分离安装完毕，如果有任何批评和疑问请在此提出。</p>]]></content></item><item><title>Python3方向键乱码问题。</title><link>https://painso.com/posts/tech/2014/python3-garbled/</link><pubDate>Sun, 16 Feb 2014 14:01:15 +0000</pubDate><guid>https://painso.com/posts/tech/2014/python3-garbled/</guid><description>最近开始学习python,由于书中版本为3,所以重新安装了个3版本后发现运行后不管是方向键还是Backspace（退格键）都无法正常使用
 查阅资料后发现原因是readline的问题
做下软连接重新启动正常
ln -s /lib64/libreadline.so.6 /usr/lib64/ ln -s /lib64/libreadline.so.6.0 /usr/lib/ ln -s /lib64/libreadline.so.6.0 /usr/lib64/ 如果还是不行就需要重新编译安装py了</description><content type="html"><![CDATA[<p>最近开始学习python,由于书中版本为3,所以重新安装了个3版本后发现运行后不管是方向键还是Backspace（退格键）都无法正常使用</p>
<p><a href="/images/2014/02/python3.png"><img src="/images/2014/02/python3-300x80.png" alt="python3"></a></p>
<p> </p>
<p>查阅资料后发现原因是readline的问题</p>
<p>做下软连接重新启动正常</p>
<pre><code>ln -s  /lib64/libreadline.so.6 /usr/lib64/
ln -s  /lib64/libreadline.so.6.0 /usr/lib/
ln -s  /lib64/libreadline.so.6.0 /usr/lib64/
</code></pre><p>如果还是不行就需要重新编译安装py了</p>
]]></content></item><item><title>Open vSwitch 错误记录。</title><link>https://painso.com/posts/tech/2014/openvswitch-errors/</link><pubDate>Mon, 06 Jan 2014 13:24:06 +0000</pubDate><guid>https://painso.com/posts/tech/2014/openvswitch-errors/</guid><description> rpmbuild -bb rhel/openvswitch-kmod-rhel6.spec produces warning: Installed (but unpackaged) file(s) found: /etc/depmod.d/openvswitch.conf 解决方法:
在openvswitch-kmod-rhel6.spec末尾出添加
%files %defattr(-,root,root,-) /etc/depmod.d/openvswitch.conf</description><content type="html"><![CDATA[<ol>
<li></li>
</ol>
<pre><code>rpmbuild -bb rhel/openvswitch-kmod-rhel6.spec

produces warning:
Installed (but unpackaged) file(s) found:
/etc/depmod.d/openvswitch.conf
</code></pre><p>解决方法:</p>
<p>在openvswitch-kmod-rhel6.spec末尾出添加</p>
<pre><code>%files
%defattr(-,root,root,-)
/etc/depmod.d/openvswitch.conf
</code></pre>]]></content></item><item><title>新年快乐。</title><link>https://painso.com/posts/thinking/2014/2014-new-year/</link><pubDate>Wed, 01 Jan 2014 17:57:23 +0000</pubDate><guid>https://painso.com/posts/thinking/2014/2014-new-year/</guid><description>又一年过去了,2013年是我最工作最踏实的一年.在新的环境学到很多,希望朋友们在新的一年里工作生活顺顺利利,身体健康.也希望自己在新的一年里做自己,学会为人处事,找到目标.新年快乐!</description><content type="html"><![CDATA[<p>又一年过去了,2013年是我最工作最踏实的一年.在新的环境学到很多,希望朋友们在新的一年里工作生活顺顺利利,身体健康.也希望自己在新的一年里做自己,学会为人处事,找到目标.新年快乐!
<a href="/images/2014/01/2014.png"><img src="/images/2014/01/2014-300x244.png" alt="2014"></a></p>
]]></content></item><item><title>IP网络存储iSCSI小试。</title><link>https://painso.com/posts/tech/2013/iscsi-experiment/</link><pubDate>Mon, 28 Oct 2013 02:41:16 +0000</pubDate><guid>https://painso.com/posts/tech/2013/iscsi-experiment/</guid><description>iSCSI技术是一种由IBM公司研究开发的，是一个供硬件设备使用的可以在IP协议的上层运行的SCSI指令集，这种指令集合可以实现在IP网络上运行SCSI协议，使其能够在诸如高速千兆以太网上进行路由选择。iSCSI技术是一种新储存技术，该技术是将现有SCSI接口与以太网络(Ethernet)技术结合，使服务器可与使用IP网络的储存装置互相交换资料。(详见百科)
搭建环境：
177.208.11.199 iSCSI-Enterprise-Target - CentOS6.4 - 32 177.208.11.234 iSCSI-initiator-utils - CentOS6.4 - 32 177.208.11.103 iSCSI-Initiator - Windows Server 2003 Enterprise Edition SP2
以下以IP后3位为简称吧
199为iSCSI服务端，其他2台分别为客户端，我这里的服务端只是测试用所以只有一块普通的硬盘，如果用户生产环境的话可能需要做一些集群或者RAID之类的，现在开始吧。
首先在199(Target端)安装服务端软件：
你可以在官方网站获取：http://iscsitarget.sf.net
[root@localhost ~]# tar zxvf iscsitarget-1.4.20.2.tar.gz [root@localhost ~]# cd iscsitarget-1.4.20.2 [root@localhost iscsitarget-1.4.20.2]# make 这里我编译报错：
make[1]: Leaving directory `/root/iscsitarget-1.4.20.2/usr' make -C /lib/modules/2.6.32-358.14.1.el6.i686/build SUBDIRS=/root/iscsitarget-1.4.20.2/kernel modules make: *** /lib/modules/2.6.32-358.14.1.el6.i686/build: No such file or directory. Stop. make: *** [kernel] Error 2 安装kernel-devel和patch
[root@localhost iscsitarget-1.4.20.2]# yum -y install kernel kernel-devel patch [root@localhost iscsitarget-1.</description><content type="html"><![CDATA[<p>iSCSI技术是一种由IBM公司研究开发的，是一个供硬件设备使用的可以在IP协议的上层运行的SCSI指令集，这种指令集合可以实现在IP网络上运行SCSI协议，使其能够在诸如高速千兆以太网上进行路由选择。iSCSI技术是一种新储存技术，该技术是将现有SCSI接口与以太网络(Ethernet)技术结合，使服务器可与使用IP网络的储存装置互相交换资料。(详见百科)</p>
<p>搭建环境：</p>
<p>177.208.11.199 iSCSI-Enterprise-Target - CentOS6.4 - 32
177.208.11.234 iSCSI-initiator-utils - CentOS6.4 - 32
177.208.11.103 iSCSI-Initiator - Windows Server 2003 Enterprise Edition SP2</p>
<p>以下以IP后3位为简称吧</p>
<p>199为iSCSI服务端，其他2台分别为客户端，我这里的服务端只是测试用所以只有一块普通的硬盘，如果用户生产环境的话可能需要做一些集群或者RAID之类的，现在开始吧。</p>
<p>首先在199(Target端)安装服务端软件：</p>
<p>你可以在官方网站获取：<a href="http://iscsitarget.sf.net/">http://iscsitarget.sf.net</a></p>
<pre><code>[root@localhost ~]# tar zxvf iscsitarget-1.4.20.2.tar.gz
[root@localhost ~]# cd iscsitarget-1.4.20.2
[root@localhost iscsitarget-1.4.20.2]# make
</code></pre><p>这里我编译报错：</p>
<pre><code>make[1]: Leaving directory `/root/iscsitarget-1.4.20.2/usr'
make -C /lib/modules/2.6.32-358.14.1.el6.i686/build SUBDIRS=/root/iscsitarget-1.4.20.2/kernel modules
make: *** /lib/modules/2.6.32-358.14.1.el6.i686/build: No such file or directory.  Stop.
make: *** [kernel] Error 2
</code></pre><p>安装kernel-devel和patch</p>
<pre><code>[root@localhost iscsitarget-1.4.20.2]# yum -y install kernel kernel-devel patch
[root@localhost iscsitarget-1.4.20.2]# reboot
</code></pre><pre><code>[root@localhost iscsitarget-1.4.20.2]# rm -rf /lib/modules/`uname -r`/build
[root@localhost iscsitarget-1.4.20.2]# ln -s /usr/src/kernels/2.6.32-358.23.2.el6.i686/ /lib/modules/`uname -r`/build
[root@localhost iscsitarget-1.4.20.2]# make clean
[root@localhost iscsitarget-1.4.20.2]# make
[root@localhost iscsitarget-1.4.20.2]# make install
</code></pre><p>现在iscsitarget就已经安装好了，配置文件位置在: /etc/iet/ietd.conf
编辑该配置文件找到类似 Target iqn.2001-04.com.example:storage.disk2.sys1.xyz 行取消注释</p>
<p><img src="/images/2013/10/iscsi-conf1.jpg" alt="iscsi-conf1"></p>
<p>命名格式：<code>iqn.yyyy-mm.&lt;recversed domain name(倒过来写的域名)&gt;[:identifier]</code>
如：<code>Target iqn.2013-10.net.hacache.iscsi:storage.disk2.sys1.xyz</code>
找到类似<code> Lun 0 Path=/dev/sdc,Type=fileio,ScsiId=xyz,ScsiSN=xyz </code>行取消注释
<code>Lun 0 Path=/dev/sdc</code>，表示块设备0，映射的磁盘为/dev/sdc ，简单来说把/dev/sdc修改成你自己需要共享出去的磁盘路径就好了。
如：<code>Lun 0 Path=/dev/xvde,Type=fileio,ScsiId=xyz,ScsiSN=xyz</code></p>
<pre><code>[root@localhost iscsitarget-1.4.20.2]# service iscsi-target restart

Stopping iSCSI Target: Connection refused.
ietd: no process killed
                                                           [FAILED]
Starting iSCSI Target:                                     [  OK  ]
</code></pre><p>iSCSI-Target服务默认端口3260</p>
<p>这样一台简单的iSCSI服务器就已经搭建好了，现在我们来分别在windows和linux上添加target端(199)的磁盘</p>
<p>Windows：</p>
<p>需要安装iSCSI Initiator</p>
<p>可以在这里获取：<a href="http://www.microsoft.com/en-us/download/details.aspx?id=18986">http://www.microsoft.com/en-us/download/details.aspx?id=18986</a></p>
<p>选择相应的版本下载和安装完毕打开桌面上的Microsoft iSCSI Initiator</p>
<p><a href="/images/2013/10/iscsi-win.jpg"><img src="/images/2013/10/iscsi-win-300x263.jpg" alt="iscsi-win"></a>
如图，选择Discovery选项在Target Portals部分单击add按钮，输入iSCSI Target端的IP地址再单击OK即可</p>
<p>然后在Targets选项卡已经可以看到检测出的iSCSI Target的名称了但是还是inactive的状态</p>
<p><a href="/images/2013/10/iscsi-win2.jpg"><img src="/images/2013/10/iscsi-win2-300x285.jpg" alt="iscsi-win2"></a>
点击Log On按钮再次点击确定，现在已经变成Connected状态了</p>
<p><a href="/images/2013/10/iscsi-win3.jpg"><img src="/images/2013/10/iscsi-win3-251x300.jpg" alt="iscsi-win3"></a></p>
<p>现在你已经可以在windows的磁盘管理器中对新添加的共享磁盘进行分区、格式化等操作了。</p>
<p><a href="/images/2013/10/iscsi-win4.jpg"><img src="/images/2013/10/iscsi-win4-300x209.jpg" alt="iscsi-win4"></a></p>
<p>Linux：</p>
<p>Linux中也同样需要安装客户端软件，在CentOS中可使用yum进行安装</p>
<pre><code>[root@centos5 ~]# yum -y install iscsi-initiator-utils*
</code></pre><p>可以使用 rpm -ql iscsi-initiator-utils 来查看它安装了哪些程序</p>
<p>iscsi-initiator-utils使用比较多的就是iscsiadm命令了</p>
<p>现在开始挂载Target端的共享磁盘</p>
<p>使用 iscsiadm -m discovery &ndash;type sendtargets &ndash;portal IP地址 来搜索iSCSI Target主机划分了哪些lun</p>
<p><a href="/images/2013/10/iscsiadm.jpg"><img src="/images/2013/10/iscsiadm-300x77.jpg" alt="iscsiadm"></a></p>
<p>如图，已经搜索出来了我在199上共享出来的磁盘，现在开始连接它</p>
<p>可以使用  iscsiadm -m node -T [target-name] -p [ip-address] -l 格式连接</p>
<p>如：iscsiadm -m node -T iqn.2013-10.net.hacache.iscsi:storage.disk2.sys1.xyz -p 177.208.11.199 -l</p>
<p><a href="/images/2013/10/iscsiadm1.jpg"><img src="/images/2013/10/iscsiadm1-300x69.jpg" alt="iscsiadm1"></a></p>
<p>可以看到图中我已经连接成功了，</p>
<p><a href="/images/2013/10/iscsiadm2.jpg"><img src="/images/2013/10/iscsiadm2-300x190.jpg" alt="iscsiadm2"></a></p>
<p>使用fdisk -l 可以看到我已经多出了一块名为sdb的64G的磁盘</p>
<p>其他配置：</p>
<p>iSCSI-Target主机以IP认证方式获取资源</p>
<p>编辑/etc/iet/ietd.conf</p>
<pre><code>Target iqn.2013-10.net.hacache.iscsi:xvde1
Lun 0 Path=/dev/xvde1,Type=fileio
Target iqn.2013-10.net.hacache.iscsi:xvde2
Lun 0 Path=/dev/xvde2,Type=fileio
Target iqn.2013-10.net.hacache.iscsi:xvde3
Lun 0 Path=/dev/xvde3,Type=fileio
</code></pre><p>编辑/etc/iet/initiator.allow</p>
<p>注释掉ALL.ALL</p>
<p>添加如下格式的配置重启服务即可完成基于IP的资源验证</p>
<pre><code>iqn.2013-10.net.hacache.iscsi:xvde1 192.168.0.11
iqn.2013-10.net.hacache.iscsi:xvde2 192.168.0.12
iqn.2013-10.net.hacache.iscsi:xvde3 177.208.11.68
</code></pre>]]></content></item><item><title>CentOS桌面环境安装</title><link>https://painso.com/posts/tech/2013/centos-install-desktop/</link><pubDate>Mon, 30 Sep 2013 12:41:48 +0000</pubDate><guid>https://painso.com/posts/tech/2013/centos-install-desktop/</guid><description>由于历史悠久，本篇文章图片已失效
测试环境 CentOS6.4 64位 首先需要安装桌面环境包 yum -y groupinstall &amp;quot;KDE Desktop&amp;quot; yum -y groupinstall &amp;quot;X Window System&amp;quot; 默认源里好像只有KDE需要GNOME的可自行GOOGLE 等待安装完毕 安装完毕后再安装一下语言支持 yum -y groupinstall &amp;quot;Chinese Support&amp;quot;
装VNC yum -y install tigervnc-server
编辑一下配置文件 vim /etc/sysconfig/vncservers 修改如图
输入vncpasswd设置管理密码
启动服务
现在你已经可以使用vnc client来连接你的服务器了
这里使用的是TigerVNC,你可以去官方下载：http://www.tightvnc.com/download.php
官方默认是安装包（服务端和客户端一起的）
设置桌面语言
选择左下CENTOS图标-点击System Settings
进入面板后选择 Regional Language
点击Add Lanuage下拉菜单的Simplified Chinese(简体中文)
然后点击右下的Apply按钮应用，这时候系统会提示你需要重启 按照它说的办吧！
OK现在已经全部显示成中文了，高端大气上档次！</description><content type="html"><![CDATA[<p>由于历史悠久，本篇文章图片已失效</p>
<hr>
<h4 id="测试环境-centos64-64位">测试环境 CentOS6.4 64位</h4>
<h4 id="首先需要安装桌面环境包">首先需要安装桌面环境包</h4>
<pre><code>yum -y groupinstall &quot;KDE Desktop&quot;
yum -y groupinstall &quot;X Window System&quot;
</code></pre><h4 id="默认源里好像只有kde需要gnome的可自行google">默认源里好像只有KDE需要GNOME的可自行GOOGLE</h4>
<h4 id="等待安装完毕">等待安装完毕</h4>
<p>安装完毕后再安装一下语言支持
<code>yum -y groupinstall &quot;Chinese Support&quot;</code></p>
<p>装VNC
<code>yum -y install tigervnc-server</code></p>
<p>编辑一下配置文件
<code>vim /etc/sysconfig/vncservers</code>
修改如图</p>
<p>输入vncpasswd设置管理密码</p>
<p>启动服务</p>
<p>现在你已经可以使用vnc client来连接你的服务器了</p>
<p>这里使用的是TigerVNC,你可以去官方下载：<a href="http://www.tightvnc.com/download.php">http://www.tightvnc.com/download.php</a></p>
<p>官方默认是安装包（服务端和客户端一起的）</p>
<p>设置桌面语言</p>
<p>选择左下CENTOS图标-点击<code>System Settings</code></p>
<p>进入面板后选择 <code>Regional Language</code></p>
<p>点击<code>Add Lanuage</code>下拉菜单的<code>Simplified Chinese(简体中文)</code></p>
<p>然后点击右下的<code>Apply</code>按钮应用，这时候系统会提示你需要重启 按照它说的办吧！</p>
<p>OK现在已经全部显示成中文了，高端大气上档次！</p>
]]></content></item><item><title>Linux Xen和OpenVZ架构安装PPTP VPN。</title><link>https://painso.com/posts/tech/2013/linux-xen-openvz-pptp-services/</link><pubDate>Wed, 14 Aug 2013 14:25:05 +0000</pubDate><guid>https://painso.com/posts/tech/2013/linux-xen-openvz-pptp-services/</guid><description>之前有好几次安装VPN服务都失败了，最近再次有安装几次发现非常的简单，特写此文章供参考。
Xen系统环境：CentOS release 6.4 (Final) 64位 首先检查是否支持PPP（一般都支持的） 执行modprobe ppp-compress-18 无返回结果则OK
[root@localhost ~]# modprobe ppp-compress-18 [root@localhost ~]# 下载pptp安装包
官方: (http://poptop.sourceforge.net/yum/stable/packages/) （需翻X）
[root@localhost ~]# ls pptpd-1.3.4-2.el6.x86_64.rpm [root@localhost ~]# rpm -ivh pptpd-1.3.4-2.el6.x86_64.rpm warning: pptpd-1.3.4-2.el6.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 862acc42: NOKEY error: Failed dependencies: /usr/bin/perl is needed by pptpd-1.3.4-2.el6.x86_64 perl(strict) is needed by pptpd-1.3.4-2.el6.x86_64 执行安装的时候出现如上错误，原因是没有安装perl
yum -y install perl
编辑ppp配置文件：vim /etc/ppp/options.pptpd
先按键盘上的 dG 清空默认配置添加下面的配置上去保存退出。
name pptpd refuse-pap refuse-chap refuse-mschap require-mschap-v2 require-mppe-128 proxyarp lock nobsdcomp novj novjccomp nologfd ms-dns 8.</description><content type="html"><![CDATA[<p>之前有好几次安装VPN服务都失败了，最近再次有安装几次发现非常的简单，特写此文章供参考。</p>
<p>Xen系统环境：CentOS release 6.4 (Final) 64位
首先检查是否支持PPP（一般都支持的）
执行modprobe ppp-compress-18 无返回结果则OK</p>
<pre><code>[root@localhost ~]# modprobe ppp-compress-18
[root@localhost ~]#
</code></pre><p>下载pptp安装包</p>
<p>官方: (<a href="http://poptop.sourceforge.net/yum/stable/packages/">http://poptop.sourceforge.net/yum/stable/packages/</a>) （需翻X）</p>
<pre><code>[root@localhost ~]# ls
pptpd-1.3.4-2.el6.x86_64.rpm
[root@localhost ~]# rpm -ivh pptpd-1.3.4-2.el6.x86_64.rpm 
warning: pptpd-1.3.4-2.el6.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 862acc42: NOKEY
error: Failed dependencies:
/usr/bin/perl is needed by pptpd-1.3.4-2.el6.x86_64
perl(strict) is needed by pptpd-1.3.4-2.el6.x86_64
</code></pre><p>执行安装的时候出现如上错误，原因是没有安装perl</p>
<pre><code>yum -y install perl
</code></pre><p><a href="/images/2013/08/install-perl.png"><img src="/images/2013/08/install-perl-300x201.png" alt="install-perl"></a></p>
<p>编辑ppp配置文件：vim /etc/ppp/options.pptpd</p>
<p>先按键盘上的 dG 清空默认配置添加下面的配置上去保存退出。</p>
<pre><code>name pptpd 
refuse-pap 
refuse-chap 
refuse-mschap 
require-mschap-v2 
require-mppe-128 
proxyarp 
lock 
nobsdcomp 
novj 
novjccomp 
nologfd 
ms-dns 8.8.8.8
ms-dns 8.8.4.4
</code></pre><p>编辑IP地址池等信息：vim /etc/pptpd.conf</p>
<p>同样键入dG清空默认配置添加下方配置保存退出。（localip和remoteip可根据自己的需要配置）</p>
<pre><code>option /etc/ppp/options.pptpd 
logwtmp 
localip 172.16.0.1 
remoteip 172.16.0.2-254
</code></pre><p>localip：本机PPP网卡IP（作为客户端连接时的网关）</p>
<p>remoteip：客户端获取IP的范围（从2到254个IP顺序获取）</p>
<p>编辑VPN帐号密码信息：vim /etc/ppp/chap-secrets</p>
<p>格式为：登录帐号 协议 登录密码 指定客户端获取的IP</p>
<p>如：vpn pptpd vpn *  - 这样为帐号密码是vpn 获取的ip会从/etc/pptpd.conf配置的地址池中获取</p>
<p>vpn pptpd vpn 172.16.0.55 - 这样我就为该帐号设置了一个固定的IP，请不要设置123.3.4.5这样的IP 否则上不了网。</p>
<p>开启ipv4内核转发：vim /etc/sysctl.conf</p>
<p>把 net.ipv4.ip_forward = 0 修改为 net.ipv4.ip_forward = 1</p>
<p>执行 sysctl -p</p>
<p><a href="/images/2013/08/ipv4-forward.png"><img src="/images/2013/08/ipv4-forward-300x201.png" alt="ipv4-forward"></a></p>
<p>现在我们的VPN服务基本已经配置完毕了，现在执行最后的操作</p>
<p>添加iptables NAT转发规则</p>
<pre><code>iptables -A INPUT -p tcp --dport 1723 -j ACCEPT

iptables -A INPUT -p tcp --dport 47 -j ACCEPT

iptables -A INPUT -p gre -j ACCEPT

iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -o eth0 -j MASQUERADE
</code></pre><p>如果你的iptables策略并不需要如此严格其实添加下面这1条就可以了</p>
<pre><code>iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -o eth0 -j MASQUERADE
</code></pre><p>保存iptables规则和启动pptp服务并设置开机启动</p>
<pre><code>service iptables save

service iptables restart

service pptpd start

chkconfig pptpd on
</code></pre><p>现在你就可以使用你的客户端连接到你的VPN服务开始翻X之旅啦！</p>
<p><a href="/images/2013/08/xen-pptp.png"><img src="/images/2013/08/xen-pptp-266x300.png" alt="xen-pptp"></a></p>
<p>OpenVZ系统环境：CentOS release 6.2 (Final) 32位</p>
<p>安装ppp和pptp</p>
<pre><code>yum -y install ppp

rpm -ivh http://soft.painso.com/Linux/pptpd/pptpd-1.3.4-2.el6.i686.rpm
</code></pre><p>同样开始编辑配置文件：</p>
<pre><code>vim /etc/ppp/options.pptpd
</code></pre><p>清空粘帖下方配置</p>
<pre><code>name pptpd 
refuse-pap 
refuse-chap 
refuse-mschap 
require-mschap-v2 
require-mppe-128 
proxyarp 
lock 
nobsdcomp 
novj 
novjccomp 
nologfd 
ms-dns 8.8.8.8
ms-dns 8.8.4.4
</code></pre><pre><code>vim /etc/pptpd.conf
</code></pre><p>清空粘帖下方配置</p>
<pre><code>option /etc/ppp/options.pptpd
logwtmp
localip 172.16.0.1
remoteip 172.16.0.2-254
</code></pre><pre><code>vim /etc/ppp/chap-secrets
</code></pre><p>添加你的pptp服务帐号</p>
<p><a href="/images/2013/08/pptp.png"><img src="/images/2013/08/pptp-300x55.png" alt="pptp"></a></p>
<p>同样修改内核配置开启ipv4转发</p>
<pre><code>vim /etc/sysctl.conf
</code></pre><p>里面的 net.ipv4.ip_forward=0 修改为 net.ipv4.ip_forward=1</p>
<pre><code>sysctl -p
</code></pre><p>添加iptables转发规则</p>
<pre><code>iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -j SNAT --to-source 67.117.22.35
</code></pre><p>这里的 67.117.22.35 修改为服务器的公网IP</p>
<p>开启相关服务并开机启动</p>
<pre><code>service iptables save

service iptables restart

service pptpd start

chkconfig pptpd on
</code></pre><p>大功告成！</p>
<p><a href="/images/2013/08/openvz.png"><img src="/images/2013/08/openvz-300x141.png" alt="openvz"></a></p>
<p>注：</p>
<p>错误1：如果出现错误619则输入命令：</p>
<pre><code>rm -r /dev/ppp
mknod /dev/ppp c 108 0
</code></pre><p>然后 reboot 重启。</p>
<p>错误2：如果出现错误800，这是因为虚拟机内核不支持mpPE，无法使用加密，用WINDOWS默认VPN连接会显示“证书信任错误”。解决方法：修改/etc/ppp/options.pptpd文件，在require-mppe-128字段前面加#即可，注释掉require-mppe-128这行就成功了</p>
<p>本地的windows系统的vpn属性改为可选加密，如下图：</p>
<p><a href="/images/2013/08/error.png"><img src="/images/2013/08/error-300x227.png" alt="error"></a></p>
<p>其实到最后你会发现2种虚拟架构配置VPN只是添加到iptables的转发规则不同。</p>
<p><del>我操！浪费老子这么多时间，这Linux还怎么玩。。。</del></p>
]]></content></item><item><title>修改mysql用户密码</title><link>https://painso.com/posts/tech/2013/change-mysql-password/</link><pubDate>Mon, 05 Aug 2013 13:08:39 +0000</pubDate><guid>https://painso.com/posts/tech/2013/change-mysql-password/</guid><description>mysqladmin命令（回目录） 格式如下（其中，USER为用户名，PASSWORD为新密码）： mysqladmin -u USER -p password PASSWORD 该命令之后会提示输入原密码，输入正确后即可修改。 例如，设置root用户的密码为123456，则
mysqladmin -u root -p password 123456 UPDATE user 语句（回目录） 这种方式必须是先用root帐户登入mysql，然后执行： UPDATE user SET password=PASSWORD('123456') WHERE user='root'; FLUSH PRIVILEGES; SET PASSWORD 语句（回目录） 这种方式也需要先用root命令登入mysql，然后执行： SET PASSWORD FOR root=PASSWORD('123456'); 忘记mysql密码（回目录） windows：在bin目录下执行 mysqld --skip-grant-tables 回车。如果没有出现提示信息，那就对了。 再开一个DOS窗口(因为刚才那个DOS窗口已经不能动了)，转到mysql\bin目录。 输入mysql回车，如果成功，将出现MySQL提示符
use mysql; update user set password=password(&amp;quot;newpassword&amp;quot;) where user=&amp;quot;root&amp;quot;; flush privileges; 注销系统，再进入，开MySQL，使用用户名root和刚才设置的新密码123456登陆。 linux：
vi /etc/my.cnf 在[mysqld]的段中加上一句：skip-grant-tables 例如：
[mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock skip-grant-tables 保存并且退出vi。 重新启动mysqld</description><content type="html"><![CDATA[<ol>
<li>mysqladmin命令（回目录）
格式如下（其中，USER为用户名，PASSWORD为新密码）：</li>
</ol>
<pre><code>mysqladmin -u USER -p password PASSWORD
</code></pre><p>该命令之后会提示输入原密码，输入正确后即可修改。
例如，设置root用户的密码为123456，则</p>
<pre><code>mysqladmin -u root -p password 123456
</code></pre><ol start="2">
<li>UPDATE user 语句（回目录）
这种方式必须是先用root帐户登入mysql，然后执行：</li>
</ol>
<pre><code>UPDATE user SET password=PASSWORD('123456') WHERE user='root';
FLUSH PRIVILEGES;
</code></pre><ol start="3">
<li>SET PASSWORD 语句（回目录）
这种方式也需要先用root命令登入mysql，然后执行：</li>
</ol>
<pre><code>SET PASSWORD FOR root=PASSWORD('123456');
</code></pre><ol start="4">
<li>忘记mysql密码（回目录）
windows：在bin目录下执行</li>
</ol>
<pre><code>mysqld --skip-grant-tables
</code></pre><p>回车。如果没有出现提示信息，那就对了。
再开一个DOS窗口(因为刚才那个DOS窗口已经不能动了)，转到mysql\bin目录。
输入mysql回车，如果成功，将出现MySQL提示符</p>
<pre><code>use mysql;
update user set password=password(&quot;newpassword&quot;) where user=&quot;root&quot;;
flush privileges;
</code></pre><p>注销系统，再进入，开MySQL，使用用户名root和刚才设置的新密码123456登陆。
linux：</p>
<pre><code>vi /etc/my.cnf
</code></pre><p>在[mysqld]的段中加上一句：skip-grant-tables
例如：</p>
<pre><code>[mysqld] 
datadir=/var/lib/mysql 
socket=/var/lib/mysql/mysql.sock 
skip-grant-tables
</code></pre><p>保存并且退出vi。
重新启动mysqld</p>
<pre><code>/etc/init.d/mysqld restart 
Stopping MySQL: [ OK ] 
Starting MySQL: [ OK ]
</code></pre><p>登录并修改MySQL的root密码</p>
<pre><code>/usr/bin/mysql #根据自己的安装目录而定
Welcome to the MySQL monitor. Commands end with ; or \g. 
Your MySQL connection id is 3 to server version: 3.23.56 
Type 'help;' or '\h' for help. Type '\c' to clear the buffer. 
mysql&gt; USE mysql ; 
Reading table information for completion of table and column names 
You can turn off this feature to get a quicker startup with -A 
Database changed 
mysql&gt; UPDATE user SET Password = password ( 'new-password' ) WHERE User = 'root' ; 
Query OK, 0 rows affected (0.00 sec) 
Rows matched: 2 Changed: 0 Warnings: 0 
mysql&gt; flush privileges ; 
Query OK, 0 rows affected (0.01 sec) 
mysql&gt; quit
</code></pre><p>Bye
5. 将MySQL的登录设置修改回来
<code>vi /etc/my.cnf</code>
将刚才在[mysqld]的段中加上的skip-grant-tables删除
保存并且退出vi。
6. 重新启动mysqld</p>
<pre><code>/etc/init.d/mysqld restart 
Stopping MySQL: [ OK ] 
Starting MySQL: [ OK ]
</code></pre>]]></content></item><item><title>[转]PHP连接MySQL主机127.0.0.1与localhost的区别</title><link>https://painso.com/posts/tech/2013/php-connect-mysql-localhost/</link><pubDate>Fri, 12 Jul 2013 23:45:53 +0000</pubDate><guid>https://painso.com/posts/tech/2013/php-connect-mysql-localhost/</guid><description>发现问题
昨天在帮同事编译安装Linux环境时，遇到一个问题： WEB服务器是apache，数据库是MySQL。 于是写了一个测试连接数据库的PHP页面： $mysql = mysql_connect('localhost','root',''); 打开 http://localhost/test.php 测试 提示：Can’t connect to local MySQL server through socket... 检查环境正常 以为是数据库没有启动，于是查看一下进程，MySQL在进程里，重启了一下MySQL. 使用mysql -u root -p 可以进入MySQL操作界面 直接使用/usr/local/php5/bin/php /web/test.php执行可以连上数据库 apache也重启了，一样无效 疑点：为何网页执行失败，命令执行却成功 这下就郁闷了，使用php命令直接执行就成功，通过网页执行就失败。难道是apache导致？网上搜索了大堆资料也没找到解决方案，重新编译安装apache问题依旧。 把localhost改成127.0.0.1成功 把localhost改成127.0.0.1后竟然连接成功了，开始陷入思考困局：localhost失败127.0.0.1却成功？ ping localhost 地址是127.0.0.1没错 打开hosts加入 127.0.0.1 qttc 使用qttc当主机连接也正常，唯独就不认localhost。 localhost连接方式不同导致 为了了解PHP连接数据库时，主机填写localhost与其它的区别阅读了大量资料，最后得知： 当主机填写为localhost时mysql会采用 unix domain socket连接 当主机填写为127.0.0.1时mysql会采用tcp方式连接 这是linux套接字网络的特性，win平台不会有这个问题 解决方法在my.cnf的[mysql]区段里添加protocol=tcp保存重启MySQL，问题解决！原文链接：http://www.qttc.net/201210228.html</description><content type="html"><![CDATA[<p>发现问题</p>
<p>昨天在帮同事编译安装Linux环境时，遇到一个问题：
WEB服务器是apache，数据库是MySQL。
于是写了一个测试连接数据库的PHP页面：
<code>$mysql = mysql_connect('localhost','root','');</code>
打开 http://localhost/test.php 测试
提示：<code>Can’t connect to local MySQL server through socket...</code>
检查环境正常
以为是数据库没有启动，于是查看一下进程，MySQL在进程里，重启了一下MySQL.
使用mysql -u root -p 可以进入MySQL操作界面
直接使用/usr/local/php5/bin/php /web/test.php执行可以连上数据库
apache也重启了，一样无效
疑点：为何网页执行失败，命令执行却成功
这下就郁闷了，使用php命令直接执行就成功，通过网页执行就失败。难道是apache导致？网上搜索了大堆资料也没找到解决方案，重新编译安装apache问题依旧。
把localhost改成127.0.0.1成功
把localhost改成127.0.0.1后竟然连接成功了，开始陷入思考困局：localhost失败127.0.0.1却成功？
ping localhost 地址是127.0.0.1没错
打开hosts加入
127.0.0.1 qttc
使用qttc当主机连接也正常，唯独就不认localhost。
localhost连接方式不同导致
为了了解PHP连接数据库时，主机填写localhost与其它的区别阅读了大量资料，最后得知：
当主机填写为localhost时mysql会采用 unix domain socket连接
当主机填写为127.0.0.1时mysql会采用tcp方式连接
这是linux套接字网络的特性，win平台不会有这个问题
<!-- raw HTML omitted -->解决方法<!-- raw HTML omitted -->
<!-- raw HTML omitted -->在my.cnf的[mysql]区段里添加<!-- raw HTML omitted -->
<!-- raw HTML omitted -->protocol=tcp<!-- raw HTML omitted -->
<!-- raw HTML omitted -->保存重启MySQL，问题解决！<!-- raw HTML omitted --></p>
<p>原文链接：<a href="http://www.qttc.net/201210228.html">http://www.qttc.net/201210228.html</a></p>
]]></content></item><item><title>PHP文件操作函数和添加图片计数器。</title><link>https://painso.com/posts/tech/2013/php-file-counter/</link><pubDate>Sun, 07 Jul 2013 14:21:03 +0000</pubDate><guid>https://painso.com/posts/tech/2013/php-file-counter/</guid><description>PHP访问文件或文件夹相关函数 filetype() //可以输出相关文件类型，如：dir / file /link echo filetype(&amp;lsquo;C:\WINDOWS&amp;rsquo;).''; 输出结果：dir echo filetype(&amp;lsquo;C:\WINDOWS\regedit.exe&amp;rsquo;).''; 输出结果：file 相关函数： clearstatcache() 来清除缓存 is_executable() 判断文件是否可执行 is_dir() 判断是否存在或是文件夹 is_file() 判断是否是文件 scandir() 遍历文件夹 / 返回一个数组
str_split 将字符串拆分为单个数组
php if(!$f=fopen(&amp;quot;num.txt&amp;quot;,&amp;quot;r&amp;quot;)){ //只读模式打开，判断num.txt不存在则输出下行 echo &amp;quot;文件不存在！！！&amp;quot;; $num=0; }else{ num = fgets(f,10); //获得9位 fclose($f); } $num++; $open = fopen(&amp;quot;num.txt&amp;quot;,&amp;quot;w&amp;quot;); //写入模式打开（如果文件不存在则创建） fwrite(open,num); //把$num里的值写入到num.txt中 fclose($open); //关闭num.txt } numarr = str_split(num); //把字符串拆分到数组中 foreach(numarr as number){ //为$numarr开始遍历 // print_r($number); echo &amp;quot;&amp;lt;img src='images\&amp;quot;.number.&amp;quot;.png'&amp;gt;&amp;quot;; //循环遍历输出number.png }</description><content type="html"><![CDATA[<p>PHP访问文件或文件夹相关函数
filetype() //可以输出相关文件类型，如：dir / file /link
echo filetype(&lsquo;C:\WINDOWS&rsquo;).'';
输出结果：dir
echo filetype(&lsquo;C:\WINDOWS\regedit.exe&rsquo;).'';
输出结果：file
相关函数：
clearstatcache() 来清除缓存
is_executable() 判断文件是否可执行
is_dir() 判断是否存在或是文件夹
is_file() 判断是否是文件
scandir() 遍历文件夹 / 返回一个数组</p>
<p>str_split 将字符串拆分为单个数组</p>
<pre><code>php
if(!$f=fopen(&quot;num.txt&quot;,&quot;r&quot;)){ //只读模式打开，判断num.txt不存在则输出下行
echo &quot;文件不存在！！！&quot;;
$num=0;
}else{
num = fgets(f,10); //获得9位
fclose($f);
}
$num++;
$open = fopen(&quot;num.txt&quot;,&quot;w&quot;); //写入模式打开（如果文件不存在则创建）
fwrite(open,num); //把$num里的值写入到num.txt中
fclose($open); //关闭num.txt
}
numarr = str_split(num); //把字符串拆分到数组中
foreach(numarr as number){ //为$numarr开始遍历
// print_r($number);
echo &quot;&lt;img src='images\&quot;.number.&quot;.png'&gt;&quot;; //循环遍历输出number.png
}
</code></pre>]]></content></item><item><title>PHP的数组、多维数组和数组函数学习笔记。</title><link>https://painso.com/posts/tech/2013/php-array-stydy/</link><pubDate>Fri, 05 Jul 2013 00:16:32 +0000</pubDate><guid>https://painso.com/posts/tech/2013/php-array-stydy/</guid><description>最近在学习PHP，想多学点东西充实自己，提升自己的能力，以后才可以回报爱我的人和我爱的人 - - 。
foreach()是一个用来遍历数组中数据的最简单有效的方法。
php title = array(&amp;quot;S.m.s&amp;quot;,&amp;quot;娱乐&amp;quot;,&amp;quot;音乐论坛&amp;quot;); //创建一个title的数组(无键值模式) //$title = array(&amp;quot;A&amp;quot;=&amp;gt;&amp;quot;S.m.s&amp;quot;,&amp;quot;B&amp;quot;=&amp;gt;&amp;quot;娱乐&amp;quot;,&amp;quot;C&amp;quot;=&amp;gt;&amp;quot;音乐论坛&amp;quot;); //有键值模式 //遍历方式1 foreach(title as value){ //无键名模式 echo value; //直接把title数组的数据从左到右依次输出 } echo &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; foreach(title as str =&amp;gt; $value){ //有键名模式(多了一个键名/下标输出) echo str.&amp;quot;=&amp;quot;.value.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;; //输出下标和键值(我上面没有定义键名，所以输出的为下标值后面跟上对应的数组值) } //题目为。要求输出$arr数组里面的所有值，每输出一个换一行。 $arr = array(array(array('a','b','c','d',1,2,3,4),'我','是','你'),array('吧','吧')); //多维数组 foreach(arr as a){ //arr数组遍历给a if(is_array($a)){ //判断$arr是否为数组类型 foreach(a as b){ //如果是的话继续把a遍历给b if(is_array($b)){ //判断$b是否为数组类型 foreach(b as c){ //如果是把b遍历给c echo c.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;; //并且输出c } }else{ echo b.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;; //如果不是直接输出b } } }else{ echo a.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;; //如果不是则输出a } } 其中foreach遍历原理还不是很清楚</description><content type="html"><![CDATA[<p>最近在学习PHP，想多学点东西充实自己，提升自己的能力，以后才可以回报爱我的人和我爱的人 - - 。</p>
<p>foreach()是一个用来遍历数组中数据的最简单有效的方法。</p>
<pre><code>php
title = array(&quot;S.m.s&quot;,&quot;娱乐&quot;,&quot;音乐论坛&quot;);  //创建一个title的数组(无键值模式)
//$title = array(&quot;A&quot;=&gt;&quot;S.m.s&quot;,&quot;B&quot;=&gt;&quot;娱乐&quot;,&quot;C&quot;=&gt;&quot;音乐论坛&quot;);  //有键值模式
//遍历方式1
foreach(title as value){    //无键名模式
echo value;                     //直接把title数组的数据从左到右依次输出
}
echo &quot;&lt;br&gt;&quot;;
foreach(title as str =&gt; $value){   //有键名模式(多了一个键名/下标输出)
echo str.&quot;=&quot;.value.&quot;&lt;br&gt;&quot;;         //输出下标和键值(我上面没有定义键名，所以输出的为下标值后面跟上对应的数组值)
}
//题目为。要求输出$arr数组里面的所有值，每输出一个换一行。
$arr = array(array(array('a','b','c','d',1,2,3,4),'我','是','你'),array('吧','吧')); //多维数组
foreach(arr as a){ //arr数组遍历给a
if(is_array($a)){ //判断$arr是否为数组类型
foreach(a as b){ //如果是的话继续把a遍历给b
if(is_array($b)){ //判断$b是否为数组类型
foreach(b as c){ //如果是把b遍历给c
echo c.&quot;&lt;br&gt;&quot;; //并且输出c
}
}else{
echo b.&quot;&lt;br&gt;&quot;; //如果不是直接输出b
}
}
}else{
echo a.&quot;&lt;br&gt;&quot;; //如果不是则输出a
}
}
</code></pre><p>其中foreach遍历原理还不是很清楚</p>
<p>这里有好几层数组 ，为什么判断2次就全部输出了</p>
<p>注意事项：有键的数值不能使用下标方式调用</p>
]]></content></item><item><title>Nginx 301域名重定向。</title><link>https://painso.com/posts/tech/2013/nginx-301/</link><pubDate>Tue, 18 Jun 2013 16:55:21 +0000</pubDate><guid>https://painso.com/posts/tech/2013/nginx-301/</guid><description>闲来无事又整了几个电影站，资源空着也是空着，把设置301域名重定向规则记录下来，省的每次都Google；
在Nginx虚拟主机配置文件的server段中添加如下配置：
server_name domain.com www.domain.com; if ($host != 'www.domain.com' ) { rewrite ^/(.*) http://www.domain.com/1 permanent; } 访问domain.com重定向到www.domain.com;
nginx -t nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful service nginx reload OK..</description><content type="html"><![CDATA[<p>闲来无事又整了几个电影站，资源空着也是空着，把设置301域名重定向规则记录下来，省的每次都Google；</p>
<p>在Nginx虚拟主机配置文件的server段中添加如下配置：</p>
<pre><code>server_name domain.com www.domain.com;
if ($host != 'www.domain.com' ) {
rewrite ^/(.*) http://www.domain.com/1 permanent;
}
</code></pre><p>访问domain.com重定向到www.domain.com;</p>
<pre><code>nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
service nginx reload
OK..
</code></pre>]]></content></item><item><title>thread.error: can't start new thread 解决办法</title><link>https://painso.com/posts/tech/2013/thread-error-cant-start-new-thread/</link><pubDate>Thu, 30 May 2013 09:23:04 +0000</pubDate><guid>https://painso.com/posts/tech/2013/thread-error-cant-start-new-thread/</guid><description>最近折腾VPS安装各种应用，在YUM安装软件时报错 。GOOGLE了一下，发现是YUM的一个配置文件导致
Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile Traceback (most recent call last): File &amp;quot;/usr/bin/yum&amp;quot;, line 29, in &amp;amp;lt;module&amp;amp;gt; yummain.user_main(sys.argv[1:], exit_code=True) File &amp;quot;/usr/share/yum-cli/yummain.py&amp;quot;, line 276, in user_main errcode = main(args) File &amp;quot;/usr/share/yum-cli/yummain.py&amp;quot;, line 129, in main result, resultmsgs = base.doCommands() File &amp;quot;/usr/share/yum-cli/cli.py&amp;quot;, line 434, in doCommands self._getTs(needTsRemove) File &amp;quot;/usr/lib/python2.6/site-packages/yum/depsolve.py&amp;quot;, line 99, in _getTs self._getTsInfo(remove_only) File &amp;quot;/usr/lib/python2.6/site-packages/yum/depsolve.py&amp;quot;, line 110, in _getTsInfo pkgSack = self.pkgSack File &amp;quot;/usr/lib/python2.6/site-packages/yum/__init__.py&amp;quot;, line 883, in &amp;amp;lt;lambda&amp;amp;gt; pkgSack = property(fget=lambda self: self.</description><content type="html"><![CDATA[<p>最近折腾VPS安装各种应用，在YUM安装软件时报错 。GOOGLE了一下，发现是YUM的一个配置文件导致</p>
<pre><code>Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
Traceback (most recent call last):
File &quot;/usr/bin/yum&quot;, line 29, in &amp;lt;module&amp;gt;
yummain.user_main(sys.argv[1:], exit_code=True)
File &quot;/usr/share/yum-cli/yummain.py&quot;, line 276, in user_main
errcode = main(args)
File &quot;/usr/share/yum-cli/yummain.py&quot;, line 129, in main
result, resultmsgs = base.doCommands()
File &quot;/usr/share/yum-cli/cli.py&quot;, line 434, in doCommands
self._getTs(needTsRemove)
File &quot;/usr/lib/python2.6/site-packages/yum/depsolve.py&quot;, line 99, in _getTs
self._getTsInfo(remove_only)
File &quot;/usr/lib/python2.6/site-packages/yum/depsolve.py&quot;, line 110, in _getTsInfo
pkgSack = self.pkgSack
File &quot;/usr/lib/python2.6/site-packages/yum/__init__.py&quot;, line 883, in &amp;lt;lambda&amp;gt;
pkgSack = property(fget=lambda self: self._getSacks(),
File &quot;/usr/lib/python2.6/site-packages/yum/__init__.py&quot;, line 668, in _getSacks
self.repos.populateSack(which=repos)
File &quot;/usr/lib/python2.6/site-packages/yum/repos.py&quot;, line 265, in populateSack
self.doSetup()
File &quot;/usr/lib/python2.6/site-packages/yum/repos.py&quot;, line 92, in doSetup
self.ayum.plugins.run('postreposetup')
File &quot;/usr/lib/python2.6/site-packages/yum/plugins.py&quot;, line 184, in run
func(conduitcls(self, self.base, conf, **kwargs))
File &quot;/usr/lib/yum-plugins/fastestmirror.py&quot;, line 202, in postreposetup_hook
all_urls = FastestMirror(all_urls).get_mirrorlist()
File &quot;/usr/lib/yum-plugins/fastestmirror.py&quot;, line 369, in get_mirrorlist
self._poll_mirrors()
File &quot;/usr/lib/yum-plugins/fastestmirror.py&quot;, line 413, in _poll_mirrors
pollThread.start()
File &quot;/usr/lib/python2.6/threading.py&quot;, line 474, in start
_start_new_thread(self.__bootstrap, ())
thread.error: can't start new thread
</code></pre><p>vim /etc/yum/pluginconf.d/fastestmirror.conf //编辑该文件
将enable=1改为0即可</p>
]]></content></item><item><title>CentOS取消图形化界面及进度条。</title><link>https://painso.com/posts/tech/2013/centos-cancel-graphical/</link><pubDate>Tue, 14 May 2013 09:13:47 +0000</pubDate><guid>https://painso.com/posts/tech/2013/centos-cancel-graphical/</guid><description>新版的CentOS启动方式改成了以图形化进度条的形式启动系统，非常不利于新手学习LINUX，所以建议取消掉，采用正常的命令行形式启动。
vi /boot/grub/grub.conf default=0 timeout=5 splashimage=(hd0,0)/boot/grub/splash.xpm.gz hiddenmenu title centos (2.6.32-71.el6.i686) root (hd0,0) kernel /boot/vmlinuz-2.6.32-71.el6.i686 ro root=UUID=0ecaaa50-2f52-490b-a9b5-a22918c9f485 rd_NO_LUKS rd_NO_LVM rd_NO_MD rd_NO_DM LANG=zh_CN.UTF-8 KEYBOARDTYPE=pc KEYTABLE=us crashkernel=auto rhgb quiet initrd /boot/initramfs-2.6.32-71.el6.i686.img 把上方红色字体部分删除rhgb（redhat graphics boot）保存即可
另外如果想取消图形化界面的可以更改init运行级别
vi /etc/inittab id:5:initdefault: 把上方的5改为3即可
init级别：
0 - 停机(千万不能把initdefault 设置为0) 1 - 单用户模式 2 - 多用户，没有 NFS 3 - 完全多用户模式(标准的运行级) 4 - 没有用到 5 - X11 （xwindow) 6 - 重新启动 （千万不要把initdefault 设置为6 ）</description><content type="html"><![CDATA[<p>新版的CentOS启动方式改成了以图形化进度条的形式启动系统，非常不利于新手学习LINUX，所以建议取消掉，采用正常的命令行形式启动。</p>
<pre><code>vi /boot/grub/grub.conf


default=0

timeout=5

splashimage=(hd0,0)/boot/grub/splash.xpm.gz

hiddenmenu

title centos (2.6.32-71.el6.i686)

root (hd0,0)

kernel /boot/vmlinuz-2.6.32-71.el6.i686 ro root=UUID=0ecaaa50-2f52-490b-a9b5-a22918c9f485 rd_NO_LUKS rd_NO_LVM rd_NO_MD rd_NO_DM LANG=zh_CN.UTF-8 KEYBOARDTYPE=pc KEYTABLE=us crashkernel=auto rhgb quiet

initrd /boot/initramfs-2.6.32-71.el6.i686.img
</code></pre><p>把上方红色字体部分删除<code>rhgb</code>（redhat graphics boot）保存即可</p>
<p>另外如果想取消图形化界面的可以更改init运行级别</p>
<pre><code>vi /etc/inittab


id:5:initdefault:
</code></pre><p>把上方的5改为3即可</p>
<p>init级别：</p>
<ul>
<li>0 - 停机(千万不能把initdefault 设置为0)</li>
<li>1 - 单用户模式</li>
<li>2 - 多用户，没有 NFS</li>
<li>3 - 完全多用户模式(标准的运行级)</li>
<li>4 - 没有用到</li>
<li>5 - X11 （xwindow)</li>
<li>6 - 重新启动 （千万不要把initdefault 设置为6 ）</li>
</ul>
]]></content></item><item><title>想念。</title><link>https://painso.com/posts/thinking/2013/missing-you/</link><pubDate>Tue, 09 Apr 2013 18:45:31 +0000</pubDate><guid>https://painso.com/posts/thinking/2013/missing-you/</guid><description>今天要来厦大办事情，途中时不时会想起你，但是又有些怕真正见到你 ，呵呵 不知道为什么 什么感觉，这边电脑正好可以上网，想送个东西给你 也不知道你喜欢啥 ，买了件衣服 ，希望你会喜欢 ，你可能不知道是谁送的 只要你喜欢就OK了 ，好了 得找工作了 ，不然以后哪有钱请你吃饭啊 呵呵 就这样。</description><content type="html">&lt;p>今天要来厦大办事情，途中时不时会想起你，但是又有些怕真正见到你 ，呵呵 不知道为什么 什么感觉，这边电脑正好可以上网，想送个东西给你 也不知道你喜欢啥 ，买了件衣服 ，希望你会喜欢 ，你可能不知道是谁送的  只要你喜欢就OK了 ，好了 得找工作了 ，不然以后哪有钱请你吃饭啊 呵呵 就这样。&lt;/p></content></item><item><title>小内存VPS优化(LNMP+WordPress环境)</title><link>https://painso.com/posts/tech/2013/small-memory-vps-optimized/</link><pubDate>Fri, 01 Mar 2013 21:35:25 +0000</pubDate><guid>https://painso.com/posts/tech/2013/small-memory-vps-optimized/</guid><description>之前的服务商跑路了,2个站 一个博客和一个论坛 没备份 懒 .直到现在才后悔莫及 备份是1年前的,悲剧了 换了个VR的San Jose机房速度还可以 256M的内存然后把1年前的备份放上去了,用了几天空闲内存总是剩个1-2十M 有些担心,网上查了查 于是决定还是优化下
我现在的系统配置是:
双核,256M内存,Ubuntu系统,军哥的Lnmp
1.充分利用多核
修改Nginx的配置文件,默认是没有被配置的,文件位置在/usr/local/nginx/conf/nginx.conf
worker_processes 2; worker_cpu_affinity 01 10; worker_processes :有多少核就填几了 worker_cpu_affinity : 同上,这里我是2核所以就是 01 10,如果是4核 worker_processes 4; worker_cpu_affinity 0001 0010 0100 1000;(第一个进程对应的CPU核心,第二个,第三个&amp;hellip;)
顺序要搞清楚
填到 user www www;下面就好,如上图
2.安装eAccelerator
lnmp安装目录默认有带的
直接进入LNMP安装目录输入
./eaccelerator.sh 接下来会提示安装的版本,输入new 然后等等就装好了
再找到php的配置文件/usr/local/php/etc/php.ini
拉到这下面有eaccelerator针对PHP的配置文件,这是我的配置
[eaccelerator] zend_extension=&amp;quot;/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/eaccelerator.so&amp;quot; eaccelerator.shm_size=&amp;quot;16&amp;quot; eaccelerator.cache_dir=&amp;quot;/usr/local/eaccelerator_cache&amp;quot; eaccelerator.enable=&amp;quot;1&amp;quot; eaccelerator.optimizer=&amp;quot;1&amp;quot; eaccelerator.check_mtime=&amp;quot;1&amp;quot; eaccelerator.debug=&amp;quot;0&amp;quot; eaccelerator.filter=&amp;quot;&amp;quot; eaccelerator.shm_max=&amp;quot;0&amp;quot; eaccelerator.shm_ttl=&amp;quot;3600&amp;quot; eaccelerator.shm_prune_period=&amp;quot;3600&amp;quot; eaccelerator.shm_only=&amp;quot;0&amp;quot; eaccelerator.compress=&amp;quot;1&amp;quot; eaccelerator.compress_level=&amp;quot;9&amp;quot; eaccelerator.keys = &amp;quot;disk_only&amp;quot; eaccelerator.sessions = &amp;quot;disk_only&amp;quot; eaccelerator.content = &amp;quot;disk_only&amp;quot; 主要就是eaccelerator.</description><content type="html"><![CDATA[<p>之前的服务商跑路了,2个站 一个博客和一个论坛 没备份 懒 .直到现在才后悔莫及 备份是1年前的,悲剧了 换了个VR的San Jose机房速度还可以 256M的内存然后把1年前的备份放上去了,用了几天空闲内存总是剩个1-2十M 有些担心,网上查了查 于是决定还是优化下</p>
<p>我现在的系统配置是:</p>
<p>双核,256M内存,Ubuntu系统,军哥的Lnmp</p>
<p>1.充分利用多核</p>
<p>修改Nginx的配置文件,默认是没有被配置的,文件位置在/usr/local/nginx/conf/nginx.conf</p>
<pre><code>worker_processes 2;


worker_cpu_affinity 01 10;
worker_processes :有多少核就填几了

worker_cpu_affinity : 同上,这里我是2核所以就是 01 10,如果是4核
worker_processes 4;
</code></pre><p>worker_cpu_affinity 0001 0010 0100 1000;(第一个进程对应的CPU核心,第二个,第三个&hellip;)
<a href="/images/2013/03/nginx.jpg"><img src="/images/2013/03/nginx-150x150.jpg" alt="nginx"></a></p>
<p>顺序要搞清楚<a href="/images/2013/03/nginx.jpg">
</a></p>
<p>填到 user www www;下面就好,如上图</p>
<p>2.安装eAccelerator</p>
<p>lnmp安装目录默认有带的</p>
<p>直接进入LNMP安装目录输入</p>
<pre><code>./eaccelerator.sh
</code></pre><p>接下来会提示安装的版本,输入new 然后等等就装好了</p>
<p>再找到php的配置文件/usr/local/php/etc/php.ini</p>
<p>拉到这下面有eaccelerator针对PHP的配置文件,这是我的配置</p>
<pre><code>[eaccelerator]

zend_extension=&quot;/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/eaccelerator.so&quot;

eaccelerator.shm_size=&quot;16&quot;

eaccelerator.cache_dir=&quot;/usr/local/eaccelerator_cache&quot;

eaccelerator.enable=&quot;1&quot;

eaccelerator.optimizer=&quot;1&quot;

eaccelerator.check_mtime=&quot;1&quot;

eaccelerator.debug=&quot;0&quot;

eaccelerator.filter=&quot;&quot;

eaccelerator.shm_max=&quot;0&quot;

eaccelerator.shm_ttl=&quot;3600&quot;

eaccelerator.shm_prune_period=&quot;3600&quot;

eaccelerator.shm_only=&quot;0&quot;

eaccelerator.compress=&quot;1&quot;

eaccelerator.compress_level=&quot;9&quot;

eaccelerator.keys = &quot;disk_only&quot;

eaccelerator.sessions = &quot;disk_only&quot;

eaccelerator.content = &quot;disk_only&quot;
</code></pre><p>主要就是eaccelerator.shm_size 这个参数了,就是eaccelerator用来缓存的内存大小,我只有256就给小点了,</p>
<p>完了记得要重启lnmp</p>
<p>3.给Wordpress安装Wp-super-cache</p>
<p>装完给启用就差不多了</p>
<p><a href="/images/2013/03/Wp-super-cache.jpg"><img src="/images/2013/03/Wp-super-cache-300x195.jpg" alt="Wp-super-cache"></a></p>
]]></content></item><item><title>伍佰 - 世界第一等</title><link>https://painso.com/posts/share/2012/wubai/</link><pubDate>Sun, 02 Sep 2012 12:15:17 +0000</pubDate><guid>https://painso.com/posts/share/2012/wubai/</guid><description>感觉比刘德华唱的好听 (:Q</description><content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=jPu3u8kfxCw" title=""><img src="http://img.youtube.com/vi/jPu3u8kfxCw/0.jpg" alt=""></a></p>
<p>感觉比刘德华唱的好听 (:Q</p>
]]></content></item><item><title>Linux ssh端口更改。</title><link>https://painso.com/posts/tech/2012/linux-ssh-port-change/</link><pubDate>Sun, 02 Sep 2012 12:12:15 +0000</pubDate><guid>https://painso.com/posts/tech/2012/linux-ssh-port-change/</guid><description>&lt;p>为了防止一些蛋疼的人暴力破解SSH密码啥啥的，还是建议大家把SSH端口改一下：&lt;/p>
&lt;p>vi /etc/ssh/sshd_config&lt;/p></description><content type="html"><![CDATA[<p>为了防止一些蛋疼的人暴力破解SSH密码啥啥的，还是建议大家把SSH端口改一下：</p>
<p>vi /etc/ssh/sshd_config</p>
<p><a href="/images/2012/09/ssh.jpg"><img src="/images/2012/09/ssh-300x217.jpg" alt="" title="ssh"></a></p>
<p>图中port 22就是了可以把22修改成自己想要的端口，完了之后重启一下就O了。</p>]]></content></item><item><title>玩转DNSPOD-自定义使用节点DNS</title><link>https://painso.com/posts/play/2012/play-dnspod-for-fun/</link><pubDate>Thu, 19 Apr 2012 03:24:29 +0000</pubDate><guid>https://painso.com/posts/play/2012/play-dnspod-for-fun/</guid><description>由于历史悠久，此篇文章图片已丢失:( 人生在于折腾，不折腾会蛋疼，这是一篇比较蛋疼的文章，如果你也和我一样蛋疼那就看看吧，目的是把DNSPOD的DNS服务器绑定，在别人看来看似是自己的DNS服务器，首先看看效果吧，我的域名已经使用了快一个多月了没问题
如图：Whois信息和nsookup看到的都是自己定义的DNS域名，下面开始具体的操作吧。
首先在DNSPOD把自己需要的记录值都添加好之后会提示把你的域名DNS更改到F1G1NS1.DNSPOD.NET和F1G1NS2.DNSPOD.NET，不用理会，大部分免费的DNS都是即使没有把域名DNS指过去当你添加完记录的时候已经把你的域名信息和纪录值都添加到它的DNS服务器里面了，下面获取一下DNSPOD的2个DNS域名的所有服务器IP，在BGP.HE.NET上查询
如图：我们已经得到2个域名下的DNS服务器IP分别是
F1G1NS1.DNSPOD.NET：119.167.195.6, 183.60.52.217, 180.153.10.150, 122.225.217.192 F1G1NS2.DNSPOD.NET：112.90.143.29, 180.153.10.151, 122.225.217.191, 180.153.162.150 上面的IP随便选择哪个都行，因为我们域名的纪录值信息都已经全部分发写入上去了，我的域名是在GODADDY注册的，去后台添加一下（这里注意一下GODADDY里添加DNS直接用A记录解析的方式是不行的，会提示Nameserver not registered.），登陆账号
选择你要设置为DNS服务器的域名，点击launch进入控制面板，在下方会有个Host Summary点击add
输入DNS二级域名，下方填写刚刚获取DNSPOD的服务器IP，一个二级域名绑定1个IP也行多个也行，随便自己啦，完了之后点击OK，再把自己的域名DNS设置成自己刚刚添加的域名，如图我的是ns1.nilaozi.com，设置好之后再回来DNSPOD控制面板
把f1g1ns1.dnspod.net和f1g1ns2.dnspod.net删掉添加新的NS纪录把自己的填上去，以后修改纪录值什么的还是在DNSPOD里面，至于提示域名DNS还未修改直接无视就可以了，此方法不仅应用于DNSPOD，我想其他免费DNS应该都一样的，差不多就是这个样子了。</description><content type="html"><![CDATA[<ul>
<li>由于历史悠久，此篇文章图片已丢失:(</li>
</ul>
<hr>
<p>人生在于折腾，不折腾会蛋疼，这是一篇比较蛋疼的文章，如果你也和我一样蛋疼那就看看吧，目的是把DNSPOD的DNS服务器绑定，在别人看来看似是自己的DNS服务器，首先看看效果吧，我的域名已经使用了快一个多月了没问题</p>
<p>如图：Whois信息和nsookup看到的都是自己定义的DNS域名，下面开始具体的操作吧。</p>
<p>首先在DNSPOD把自己需要的记录值都添加好之后会提示把你的域名DNS更改到F1G1NS1.DNSPOD.NET和F1G1NS2.DNSPOD.NET，不用理会，大部分免费的DNS都是即使没有把域名DNS指过去当你添加完记录的时候已经把你的域名信息和纪录值都添加到它的DNS服务器里面了，下面获取一下DNSPOD的2个DNS域名的所有服务器IP，在BGP.HE.NET上查询</p>
<p>如图：我们已经得到2个域名下的DNS服务器IP分别是</p>
<pre><code>F1G1NS1.DNSPOD.NET：119.167.195.6, 183.60.52.217, 180.153.10.150, 122.225.217.192
F1G1NS2.DNSPOD.NET：112.90.143.29, 180.153.10.151, 122.225.217.191, 180.153.162.150
</code></pre><p>上面的IP随便选择哪个都行，因为我们域名的纪录值信息都已经全部分发写入上去了，我的域名是在GODADDY注册的，去后台添加一下（这里注意一下GODADDY里添加DNS直接用A记录解析的方式是不行的，会提示Nameserver not registered.），登陆账号</p>
<p>选择你要设置为DNS服务器的域名，点击launch进入控制面板，在下方会有个Host Summary点击add</p>
<p>输入DNS二级域名，下方填写刚刚获取DNSPOD的服务器IP，一个二级域名绑定1个IP也行多个也行，随便自己啦，完了之后点击OK，再把自己的域名DNS设置成自己刚刚添加的域名，如图我的是ns1.nilaozi.com，设置好之后再回来DNSPOD控制面板</p>
<p>把f1g1ns1.dnspod.net和f1g1ns2.dnspod.net删掉添加新的NS纪录把自己的填上去，以后修改纪录值什么的还是在DNSPOD里面，至于提示域名DNS还未修改直接无视就可以了，此方法不仅应用于DNSPOD，我想其他免费DNS应该都一样的，差不多就是这个样子了。</p>
]]></content></item><item><title>科学使用GAE(Google App Engine)+谷歌浏览器搭建代理上网。</title><link>https://painso.com/posts/tech/2012/gae-proxy-browser/</link><pubDate>Sat, 24 Mar 2012 04:56:49 +0000</pubDate><guid>https://painso.com/posts/tech/2012/gae-proxy-browser/</guid><description>大家都知道在CN有个GFW，它会屏蔽掉一些他们认为“不合适”的网站，怎么越过这道墙呢？为了上个Twitter还要天天去找免费VPN/代理，找的你蛋碎，还不如自己搞一个自己用，进入正题吧。
首先打开appengine.google.com，有谷歌账户的可以直接登录(不推荐在appengine.google.com下用别的邮箱注册，否则你会蛋疼的)，没有则在gmail.com注册一个邮箱，到时候就在appengine.google.com输入你的GMAIL邮箱账户密码登录，我就在现在已经新注册了一个账户，在appengine.google.com登录 登录后会出现下面的页面
点击 Create Application (创建应用)会出现下面的页面
第一项选择Other，第二项输入手机号码获取验证码，如+8613888888888输入完成之后点击Send发送验证码到手机，不久会收到GAE发来的短信，把验证码输入以下激活即可正式开始使用GAE，初次登陆会出现下面的页面
红色部分是我之前创建的，新账号是没有的，点击Create Application。会出现下面的页面
1、应用名称(填写英文字母)
2、应用描述，建议和名称一样
3、创建应用OK
完成之后会显示在应用列表里，可以返回appengine.google.com查看的到
下面就开始给GAE空间安装代理程序啦。
这里下载：(集成Proxy SwitchySharp和配置文件)
这里首先把这2个程序都下载过来，解压Server端文件运行uploader.bat
1、输入刚刚在APPENGINE创建应用时填写的APP ID
2、输入GMAIL账号
3、输入GMAIL密码回车等待上传完毕会提示完成
然后解压Local文件，鼠标选中SwitchySharp-0.9-beta-r37.crx拖到谷歌浏览器中，下方会出现
点击继续、安装好后会出现以下页面
选择导入导出项、从文件恢复、选择SwitchyOptions.bak即可
然后修改Local里的proxy.ini文件
修改以下appid = goagent ，goagent 修改成你自己的GAE ID
然后运行goagent.exe即可开启代理了，需要上代理的时候点击谷歌浏览器右上角的球
1、不使用代理连接
2、开启代理模式
再说明一下，第一次上传了Server端程序后就不用再传了，下次在别的地方上网只需要下载Local程序就OK了
PS：有了GAE Twitter、Facebook、youtube神马都是浮云</description><content type="html"><![CDATA[<p>大家都知道在CN有个GFW，它会屏蔽掉一些他们认为“不合适”的网站，怎么越过这道墙呢？为了上个Twitter还要天天去找免费VPN/代理，找的你蛋碎，还不如自己搞一个自己用，进入正题吧。</p>
<p>首先打开appengine.google.com，有谷歌账户的可以直接登录(不推荐在appengine.google.com下用别的邮箱注册，否则你会蛋疼的)，没有则在gmail.com注册一个邮箱，到时候就在appengine.google.com输入你的GMAIL邮箱账户密码登录，我就在现在已经新注册了一个账户，在appengine.google.com登录
登录后会出现下面的页面</p>
<p>点击 Create Application (创建应用)会出现下面的页面</p>
<p>第一项选择Other，第二项输入手机号码获取验证码，如+8613888888888输入完成之后点击Send发送验证码到手机，不久会收到GAE发来的短信，把验证码输入以下激活即可正式开始使用GAE，初次登陆会出现下面的页面</p>
<p>红色部分是我之前创建的，新账号是没有的，点击Create Application。会出现下面的页面</p>
<p>1、应用名称(填写英文字母)</p>
<p>2、应用描述，建议和名称一样</p>
<p>3、创建应用OK</p>
<p>完成之后会显示在应用列表里，可以返回appengine.google.com查看的到</p>
<p>下面就开始给GAE空间安装代理程序啦。</p>
<p>这里下载：(集成Proxy SwitchySharp和配置文件)</p>
<p>这里首先把这2个程序都下载过来，解压Server端文件运行uploader.bat</p>
<p>1、输入刚刚在APPENGINE创建应用时填写的APP ID</p>
<p>2、输入GMAIL账号</p>
<p>3、输入GMAIL密码回车等待上传完毕会提示完成</p>
<p>然后解压Local文件，鼠标选中SwitchySharp-0.9-beta-r37.crx拖到谷歌浏览器中，下方会出现</p>
<p>点击继续、安装好后会出现以下页面</p>
<p>选择导入导出项、从文件恢复、选择SwitchyOptions.bak即可</p>
<p>然后修改Local里的proxy.ini文件</p>
<p>修改以下appid = goagent   ，goagent 修改成你自己的GAE ID</p>
<p>然后运行goagent.exe即可开启代理了，需要上代理的时候点击谷歌浏览器右上角的球</p>
<p>1、不使用代理连接</p>
<p>2、开启代理模式</p>
<p>再说明一下，第一次上传了Server端程序后就不用再传了，下次在别的地方上网只需要下载Local程序就OK了</p>
<p>PS：有了GAE  Twitter、Facebook、youtube神马都是浮云</p>
]]></content></item><item><title>Nginx修改Header信息。</title><link>https://painso.com/posts/tech/2012/the-nginx-modify-header-information/</link><pubDate>Thu, 15 Mar 2012 00:58:48 +0000</pubDate><guid>https://painso.com/posts/tech/2012/the-nginx-modify-header-information/</guid><description>Header信息是访客访问你的网站时，web服务返回给客户端的一段信息，包含了网页的一些基本情况。那么为什么要修改 header信息呢？主要是为了防止被居心不良的人利用来获取漏洞信息，例如：通过最最简单的获取Header信息发现你的web服务器版本是 nginx/1.0.13，现在又已知这个版本的nginx有某个漏洞，那么就可以利用这个漏洞来攻击你了。互联网信息更新非常快，web服务程序的更新 也是很频繁，我们很多时候由于种种原因不能及时打上补丁，对服务器安全很不利，如果修改header信息达到隐藏web服务器版本的效果，就可以在某种程 度上消除一些隐患。 首先需要修改nginx.h这个文件，一般在安装目录下面的src/core/nginx.h。因为之前我装的是LNMP一键安装包，所以就在LNMP目录下的nginx-x.x.x.x下面，
vi 编辑一下nginx.h/*
Copyright (C) Igor Sysoev */ ifndef NGINX_HINCLUDED_ define NGINX_HINCLUDED_ define nginx_version 1000010 define NGINX_VERSION &amp;quot;1.0.0.1&amp;quot; define NGINX_VER &amp;quot;nginx/&amp;quot; NGINX_VERSION define NGINX_VAR &amp;quot;NGINX&amp;quot; define NGX_OLDPID_EXT &amp;quot;.oldbin&amp;quot; endif /* NGINX_HINCLUDED_ */ 只需要修改
define NGINX_VERSION 对应的版本值，不填的话留空 如&amp;rdquo;&amp;rdquo;
define NGINX_VER &amp;quot;nginx/&amp;quot; NGINX_VERSION  在这里&amp;quot;nginx/&amp;rdquo; nginx/修改成你想显示的Server信息 /看不填，看个人需求。
编辑好以后回到NGINX安装目录下面输入：
./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-ipv6 再输入
make
编译完成后的NGINX文件在 objs文件夹下，先备份一下原来的
cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak 把新的NGINX文件复制过去，需先停止NGINX服务哦：service nginx stop cp objs/nginx /usr/local/nginx/sbin/ service nginx start</description><content type="html"><![CDATA[<blockquote>
<p>Header信息是访客访问你的网站时，web服务返回给客户端的一段信息，包含了网页的一些基本情况。那么为什么要修改 header信息呢？主要是为了防止被居心不良的人利用来获取漏洞信息，例如：通过最最简单的获取Header信息发现你的web服务器版本是 nginx/1.0.13，现在又已知这个版本的nginx有某个漏洞，那么就可以利用这个漏洞来攻击你了。互联网信息更新非常快，web服务程序的更新 也是很频繁，我们很多时候由于种种原因不能及时打上补丁，对服务器安全很不利，如果修改header信息达到隐藏web服务器版本的效果，就可以在某种程 度上消除一些隐患。
首先需要修改nginx.h这个文件，一般在安装目录下面的src/core/nginx.h。因为之前我装的是LNMP一键安装包，所以就在LNMP目录下的nginx-x.x.x.x下面，</p>
</blockquote>
<p>vi 编辑一下nginx.h/*</p>
<pre><code>Copyright (C) Igor Sysoev

*/

ifndef NGINX_HINCLUDED_

define NGINX_HINCLUDED_

define nginx_version 1000010

define NGINX_VERSION &quot;1.0.0.1&quot;

define NGINX_VER &quot;nginx/&quot; NGINX_VERSION

define NGINX_VAR &quot;NGINX&quot;

define NGX_OLDPID_EXT &quot;.oldbin&quot;

endif /* NGINX_HINCLUDED_ */
</code></pre><p>只需要修改</p>
<p><code>define NGINX_VERSION</code> 对应的版本值，不填的话留空 如&rdquo;&rdquo;</p>
<p><code>define NGINX_VER          &quot;nginx/&quot; NGINX_VERSION </code>  在这里&quot;nginx/&rdquo;  nginx/修改成你想显示的Server信息 /看不填，看个人需求。</p>
<p>编辑好以后回到NGINX安装目录下面输入：</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">./configure --user<span class="o">=</span>www --group<span class="o">=</span>www --prefix<span class="o">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-ipv6
</code></pre></div><p>再输入</p>
<p><code>make</code></p>
<p>编译完成后的NGINX文件在 objs文件夹下，先备份一下原来的</p>
<blockquote>
<p>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak
把新的NGINX文件复制过去，需先停止NGINX服务哦：service nginx stop
cp objs/nginx /usr/local/nginx/sbin/
service nginx start</p>
</blockquote>
<p>2013.6.13更新：</p>
<p>有些按照上方操作还是无法修改Header信息，经查看还需要修改 安装目录下的src/http/ngx_http_header_filter_module.c</p>
<p><a href="/images/2012/03/nginx-header-filter.jpg"><img src="/images/2012/03/nginx-header-filter-300x169.jpg" alt="nginx-header-filter"></a></p>
<p>如图，按照自己的喜好修改即可，这样设置完毕后发现出现默认Nginx 404页面时底部还是会显示nginx相关的信息，原因为nginx.conf里的server_tokens关闭，编辑nginx.conf找到server_tokens = off;将off改为on即可</p>
<p>大功告成。</p>
<p><a href="/images/2012/03/nginx.jpg"><img src="/images/2012/03/nginx-300x110.jpg" alt="nginx"></a></p>
]]></content></item><item><title>自定义使用Incapsula的CDN节点。</title><link>https://painso.com/posts/tech/2012/custom-incapsula-cdn-nodes/</link><pubDate>Sat, 03 Mar 2012 18:29:20 +0000</pubDate><guid>https://painso.com/posts/tech/2012/custom-incapsula-cdn-nodes/</guid><description>由于历史悠久，本篇文章图片已失效
在Incapsula添加好站点后一般都会给你一个CNAME让你解析过去，但是我的DZ论坛用它默认的解析效果并不是很理想，有时候解析到美国速度就没啥差别了，还不如按照自己的意愿来设置 (:O
方法如下：
首先确定你需要使用哪个节点，多个不同地段的节点也OK的，在just-ping.com上ping一下www.incapsula.com 得到它的各个节点的IP地址。
当然日本节点到国内是最快的了，这里就哪日本节点演示，日本节点IP是103开头 我这里找到一个
103.28.249.100
找到以后就到DNS设置里面把原来的CNAME指向换成A记录把IP填上去
可以填写多个哦，以防不测 (:F
再告诉大家一个小窍门，为了防止和其他站点公用这个103.28.249.100节点可以把它换成103.28.249.119或者其他，只要在浏览器上打开是下面这个页面就证明是Incapsula的节点服务器可以解析，这样就可以避免被Q掉。
2012.3.28更新：
经测试大家使用日本节点时尽量使用103.28.249.1-100 的段，200以上的我测试过不行了
2012.7.29更新：
Incapsula日本节点IP段更新从103.28.249.1-255 更改为103.28.248.1-255</description><content type="html"><![CDATA[<p>由于历史悠久，本篇文章图片已失效</p>
<hr>
<p>在Incapsula添加好站点后一般都会给你一个CNAME让你解析过去，但是我的DZ论坛用它默认的解析效果并不是很理想，有时候解析到美国速度就没啥差别了，还不如按照自己的意愿来设置 (:O</p>
<p>方法如下：</p>
<p>首先确定你需要使用哪个节点，多个不同地段的节点也OK的，在just-ping.com上ping一下www.incapsula.com 得到它的各个节点的IP地址。</p>
<p>当然日本节点到国内是最快的了，这里就哪日本节点演示，日本节点IP是103开头 我这里找到一个</p>
<p><code>103.28.249.100</code></p>
<p>找到以后就到DNS设置里面把原来的CNAME指向换成A记录把IP填上去</p>
<p>可以填写多个哦，以防不测 (:F</p>
<p>再告诉大家一个小窍门，为了防止和其他站点公用这个<code>103.28.249.100</code>节点可以把它换成<code>103.28.249.119</code>或者其他，只要在浏览器上打开是下面这个页面就证明是Incapsula的节点服务器可以解析，这样就可以避免被Q掉。</p>
<p>2012.3.28更新：</p>
<p>经测试大家使用日本节点时尽量使用<code>103.28.249.1-100</code> 的段，200以上的我测试过不行了</p>
<p>2012.7.29更新：</p>
<p>Incapsula日本节点IP段更新从<code>103.28.249.1-255</code> 更改为<code>103.28.248.1-255</code></p>
]]></content></item><item><title>解决MYSQL不能远程访问。</title><link>https://painso.com/posts/tech/2012/solve-mysql-can-not-remote-access/</link><pubDate>Tue, 28 Feb 2012 16:54:23 +0000</pubDate><guid>https://painso.com/posts/tech/2012/solve-mysql-can-not-remote-access/</guid><description>最近在网上找了个免费网站备份的网站，Dropmysite.com 提供2.3个G的备份空间，提供网站数据、数据库数据以及邮箱数据的自动备份，可按月，周，日，时为单位来备份，很方便，但是在用到MYSQL备份的时候老是提示不能访问远程数据库，网上找了一下资料，经实践 最简单的方法就是在PHPMYADMIN后台改一下数据表，应为我的是lnmp的环境默认带phpmysql这个网页数据库管理的功能 ，打开PHPMYADMIN后台登陆，选择mysql数据库里面最下面的user数据表，把第一行的localhost改成%即可。
这个dropmysite.com不错哟，有兴趣的朋友可以试试。</description><content type="html"><![CDATA[<p>最近在网上找了个免费网站备份的网站，Dropmysite.com 提供2.3个G的备份空间，提供网站数据、数据库数据以及邮箱数据的自动备份，可按月，周，日，时为单位来备份，很方便，但是在用到MYSQL备份的时候老是提示不能访问远程数据库，网上找了一下资料，经实践 最简单的方法就是在PHPMYADMIN后台改一下数据表，应为我的是lnmp的环境默认带phpmysql这个网页数据库管理的功能 ，打开PHPMYADMIN后台登陆，选择mysql数据库里面最下面的user数据表，把第一行的localhost改成%即可。</p>
<p><a href="/images/2012/02/mysql.jpg"><img src="/images/2012/02/mysql.jpg" alt=""></a></p>
<p><a href="/images/2012/02/mysql-300x114.jpg"><img src="/images/2012/02/mysql-300x114.jpg" alt="" title="解决MYSQL不能远程访问。"></a></p>
<p>这个dropmysite.com不错哟，有兴趣的朋友可以试试。</p>
<p><a href="/images/2012/02/dropmysite.jpg"><img src="/images/2012/02/dropmysite-300x102.jpg" alt="" title="dropmysite"></a></p>
]]></content></item><item><title>Ubuntu永久禁止Ping。</title><link>https://painso.com/posts/tech/2012/ubuntu-deny-ping/</link><pubDate>Wed, 15 Feb 2012 21:48:03 +0000</pubDate><guid>https://painso.com/posts/tech/2012/ubuntu-deny-ping/</guid><description>echo 1 &amp;gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 添加上面的规则到启动脚本rc.local vi /etc/rc.local
保存后重启之后也会生效。</description><content type="html"><![CDATA[<ol>
<li><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></li>
<li>添加上面的规则到启动脚本rc.local</li>
</ol>
<p><code>vi /etc/rc.local</code></p>
<p>保存后重启之后也会生效。</p>
]]></content></item><item><title>Ubuntu永久修改主机名称。</title><link>https://painso.com/posts/tech/2012/ubuntu-permanently-modify-the-host-name/</link><pubDate>Wed, 15 Feb 2012 21:34:20 +0000</pubDate><guid>https://painso.com/posts/tech/2012/ubuntu-permanently-modify-the-host-name/</guid><description>&lt;ul>
&lt;li>修改etc下的hostname文件&lt;/li>
&lt;/ul>
&lt;p>&lt;code>vi /etc/hostname&lt;/code>&lt;/p>
&lt;p>a,第一行输入你的主机名称&lt;/p>
&lt;p>&lt;code>esc ,: ,x,&lt;/code>回车保存&lt;/p></description><content type="html"><![CDATA[<ul>
<li>修改etc下的hostname文件</li>
</ul>
<p><code>vi /etc/hostname</code></p>
<p>a,第一行输入你的主机名称</p>
<p><code>esc ,: ,x,</code>回车保存</p>
<ul>
<li><code> vi /etc/hosts</code></li>
</ul>
<p>第一行的 <code>localhost.localdomain    localhost</code></p>
<p>修改成 如<code> www.baidu     baidu</code></p>
<p>经实践，第二步可以忽略 (:E</p>]]></content></item><item><title>Wordpress修改评论者链接结构</title><link>https://painso.com/posts/tech/2012/wordpress-modify-the-link-structure-of-the-reviewers/</link><pubDate>Tue, 14 Feb 2012 10:30:47 +0000</pubDate><guid>https://painso.com/posts/tech/2012/wordpress-modify-the-link-structure-of-the-reviewers/</guid><description>&lt;blockquote>
&lt;p>nofollow标签的算法变更和百度对该标签的不认可，导致wordpress评论区域最好也据此来做相应的调整。使用robots.txt对自身地址进行屏蔽，从而规避非法链接对自身权重的影响。
1、打开wp-includes文件夹下的comment-template.php文件&lt;/p>
&lt;/blockquote></description><content type="html"><![CDATA[<blockquote>
<p>nofollow标签的算法变更和百度对该标签的不认可，导致wordpress评论区域最好也据此来做相应的调整。使用robots.txt对自身地址进行屏蔽，从而规避非法链接对自身权重的影响。
1、打开wp-includes文件夹下的comment-template.php文件</p>
</blockquote>
<blockquote>
<p>2、找到$return = “&lt;a href=’$url’ rel=’external nofollow’ class=’url’&gt;$author&lt;/a&gt;”;语句，大约在154行（Notepad2中查看）
3、链接修改为$return = “&lt;a href=’jump.php?$url’ rel=’external nofollow’ class=’url’&gt;$author&lt;/a&gt;”;</p>
</blockquote>
<p>这里的jump.php名字可以根据自己需求更改。
4、替换上传</p>
<p>jump.php代码：</p>
<p>Apache:</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span><span class="o">&gt;</span> 
<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;location: &#34;</span><span class="o">.</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REDIRECT_QUERY_STRING&#39;</span><span class="p">]);</span><span class="o">&gt;</span> 
<span class="cp">?&gt;</span>
</code></pre></div><p>Nginx:</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span><span class="o">&gt;</span> 
<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;location: &#34;</span><span class="o">.</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;QUERY_STRING&#39;</span><span class="p">]);</span><span class="o">&gt;</span> 
<span class="cp">?&gt;</span>
</code></pre></div><p>保存成刚刚修改的comment-template.php里的名字上传至根目录
多谢Lite3指教。
robots.txt添加</p>
<!-- raw HTML omitted -->]]></content></item><item><title>Linux拒绝单个IP地址访问。</title><link>https://painso.com/posts/tech/2012/linux-refused-access-to-a-single-ip-address/</link><pubDate>Sun, 12 Feb 2012 22:05:51 +0000</pubDate><guid>https://painso.com/posts/tech/2012/linux-refused-access-to-a-single-ip-address/</guid><description>&lt;p>从博客开始就一直有垃圾评论，点开看看发现大部分都是一个IP地址的，在Ubuntu添加一条规则拒绝垃圾评论的IP这样它的IP就无法访问啦 (:O&lt;/p>
&lt;p>屏蔽单个IP：&lt;/p>
&lt;p>&lt;code>iptables -A INPUT -p tcp -s ip地址 -j DROP&lt;/code>&lt;/p>
&lt;p>-A是添加一条新规则add缩写我想是，INPUT 进 ，-p 协议 是 tcp 网站80端口就是tcp，-s - source 源IP ，-j DROP 拒绝的意思吧 呵呵。&lt;/p></description><content type="html"><![CDATA[<p>从博客开始就一直有垃圾评论，点开看看发现大部分都是一个IP地址的，在Ubuntu添加一条规则拒绝垃圾评论的IP这样它的IP就无法访问啦 (:O</p>
<p>屏蔽单个IP：</p>
<p><code>iptables -A INPUT -p tcp -s ip地址 -j DROP</code></p>
<p>-A是添加一条新规则add缩写我想是，INPUT 进 ，-p 协议 是 tcp 网站80端口就是tcp，-s - source 源IP ，-j DROP 拒绝的意思吧 呵呵。</p>
<p>例子：拒绝192.168.1.1 ip访问</p>
<p><code>iptables -A INPUT -p tcp -s 192.168.1.1 -j DROP</code></p>
<p>######封整个段即从192.0.0.1到192.255.255.254的命令
<code>iptables -I INPUT -s 192.0.0.0/8 -j DROP</code></p>
<p>######封IP段即从192.45.0.1到192.45.255.254的命令
<code>iptables -I INPUT -s 124.45.0.0/16 -j DROP</code></p>
<p>######封IP段即从192.45.6.1到192.45.6.254的命令
<code>iptables -I INPUT -s 192.45.6.0/24 -j DROP</code></p>
<p>注意如命令错误注意大小写。</p>
<p>删除iptables规则：</p>
<p>先查看规则编号</p>
<p><code>iptables -L -n --line-number</code></p>
<p><a href="/images/2012/02/1.jpg"><img src="/images/2012/02/1-300x96.jpg" alt="" title="Linux拒绝单个IP地址访问。"></a></p>
<p>如图，我的DROP规则是1，</p>
<p>输入<code>iptables -D INPUT 1</code></p>
<p><a href="/images/2012/02/21.jpg"><img src="/images/2012/02/21-300x101.jpg" alt="" title="Linux拒绝单个IP地址访问。"></a></p>
<p>已经删除了，iptables规则重启后会失效</p>
<p>编辑/etc/rc.local</p>
<p>添加协议</p>
<p><code>iptables -A INPUT -p tcp -s 8.8.8.8 -j DROP</code></p>
<p><a href="http://img.painso.com/image/5052-iptables.jpg"><img src="http://img.painso.com/image/5052-iptables.jpg" alt="" title="Linux拒绝单个IP地址访问"></a></p>]]></content></item><item><title>不开代理上谷歌。</title><link>https://painso.com/posts/tech/2012/do-not-open-proxy-on-google/</link><pubDate>Tue, 07 Feb 2012 22:44:13 +0000</pubDate><guid>https://painso.com/posts/tech/2012/do-not-open-proxy-on-google/</guid><description>国内的www.google.com.hk虽然一般情况下都可以打开，但是搜索了几下就无法打开了，不知道可能是搜索了不和谐内容还是什么的
方法比较简单，上不了的时候就
ping一下 gmail.com
C:\WINDOWS&amp;gt;ping gmail.com Pinging gmail.com [74.125.71.18] with 32 bytes of data: Reply from 74.125.71.18: bytes=32 time=49ms TTL=50 Reply from 74.125.71.18: bytes=32 time=46ms TTL=50 取74.125.71.18直接在浏览器输入 - 回车
ping 谷歌其他站点也是可以的呵呵
C:\WINDOWS&amp;gt;ping code.google.com Pinging code.l.google.com [74.125.71.101] with 32 bytes of data: Reply from 74.125.71.101: bytes=32 time=48ms TTL=50 Reply from 74.125.71.101: bytes=32 time=44ms TTL=50</description><content type="html"><![CDATA[<p>国内的www.google.com.hk虽然一般情况下都可以打开，但是搜索了几下就无法打开了，不知道可能是搜索了不和谐内容还是什么的</p>
<p>方法比较简单，上不了的时候就</p>
<p>ping一下 gmail.com</p>
<pre><code>C:\WINDOWS&gt;ping gmail.com

Pinging gmail.com [74.125.71.18] with 32 bytes of data:

Reply from 74.125.71.18: bytes=32 time=49ms TTL=50
Reply from 74.125.71.18: bytes=32 time=46ms TTL=50
</code></pre><p>取74.125.71.18直接在浏览器输入 - 回车</p>
<p>ping 谷歌其他站点也是可以的呵呵</p>
<pre><code>C:\WINDOWS&gt;ping code.google.com

Pinging code.l.google.com [74.125.71.101] with 32 bytes of data:

Reply from 74.125.71.101: bytes=32 time=48ms TTL=50
Reply from 74.125.71.101: bytes=32 time=44ms TTL=50
</code></pre>]]></content></item><item><title>DNSPOD+Incapsula CDN实现文件国内用户可下载Dropbox文件以及外链</title><link>https://painso.com/posts/tech/2012/dropbox-dnspod-incapsula-cdn-file-domestic-users-can-download-the-dropbox-file/</link><pubDate>Sun, 05 Feb 2012 23:07:54 +0000</pubDate><guid>https://painso.com/posts/tech/2012/dropbox-dnspod-incapsula-cdn-file-domestic-users-can-download-the-dropbox-file/</guid><description>&lt;p>大家现在都知道Dropbox国内用户无法下载dl.dropbox.com/xxx.xxx 这样以及 dl-web.dropbox.com/xxx.xxx 的文件&lt;/p>
&lt;p>现在即可通过Dropbox+DNSPOD+Incapsula实现下载咯&lt;/p></description><content type="html"><![CDATA[<p>大家现在都知道Dropbox国内用户无法下载dl.dropbox.com/xxx.xxx 这样以及 dl-web.dropbox.com/xxx.xxx 的文件</p>
<p>现在即可通过Dropbox+DNSPOD+Incapsula实现下载咯</p>
<p>第一步在DNSPOD添加CNAME解析到dl.dropbox.com</p>
<p>我的是解析了dl.dropbox.com的几个节点IP</p>
<p>都一样的啦，然后进入Incapsula.com注册一个账号</p>
<p>注册过程就不说了，直接添加</p>
<p>这里以www.baidu.com为示例，点下一步next，等待一段时间后会提示你继续的，一直点Continue就是啦</p>
<p>点击继续</p>
<p>继续</p>
<p>完了之后会给出叫你解析到他的地址，如我刚刚添加的百度.com的是 eh939.x.incapdns.net 把给你的地址复制下来回到dnspod把刚刚解析到dl.dropbox.com的记录值dl.dropbox.com替换成eh939.x.incapdns.net</p>
<p>然后修改一下Dropbox给出的下载地址，默认是http://dl.dropbox.com/u/6767676/Photo/testimg.jpg</p>
<p>修改成http://你的域名/u/6767676/Photo/testimg.jpg</p>]]></content></item><item><title>Ubuntu下安装vsftpd</title><link>https://painso.com/posts/tech/2012/ubuntu-install-vsftpd/</link><pubDate>Sun, 05 Feb 2012 05:07:54 +0000</pubDate><guid>https://painso.com/posts/tech/2012/ubuntu-install-vsftpd/</guid><description>装了lnmp后FTP管理装的是pureftpd，后来感觉不好用，后台管理那里用户的UID和GID搞不懂，登陆上权限也不够，后来安装了lnmp自带的vsftpd好像也不能用，还是不用它的吧，
先卸载。
cd / (切换根目录) 停止pureftpd进程，运行命令： /root/pureftpd stop 删除文件，运行命令： rm -rf /usr/local/pureftpd rm -rf /home/wwwroot/ftp （管理程序的位置，请根据实际情况设置） rm /root/pureftpd 安装vsftpd
sudo apt-get install vsftpd 这个命令的确可以安装，但是搞不懂 有的这个可以用，有的就不行
我84的VPS执行这个命令返回的就是
root@272929:~# sudo apt-get install vsftpd Reading package lists... Done Building dependency tree... Done E: Couldn't find package vsftpd root@272929:~# 安装好以后配置一下
可以vi etc/vsftpd.conf 进行编辑也可以用winscp
#独立运行 listen=YES&amp;gt; #是否启用匿名访问 anonymous_enable=no #本地用户登录 local_enable=YES #FTP目录 local_root=/soft #访问端口 listen_port=21 #下面3段是后来加的，解决了本地用户不能登录的问题 #好像是vsftpd首先要检测拒绝的账号列表，如果没有这个列表就会全部认为是拒绝的 chroot_local_user=YES userlist_enable=YES userlist_deny=YES #允许本地用户写入和删除 write_enable=YES dirmessage_enable=YES use_localtime=YES xferlog_enable=YES connect_from_port_20=no secure_chroot_dir=/var/run/vsftpd/empty pam_service_name=ftp rsa_cert_file=/etc/ssl/private/vsftpd.</description><content type="html"><![CDATA[<p>装了lnmp后FTP管理装的是pureftpd，后来感觉不好用，后台管理那里用户的UID和GID搞不懂，登陆上权限也不够，后来安装了lnmp自带的vsftpd好像也不能用，还是不用它的吧，</p>
<p>先卸载。</p>
<ol>
<li>cd / (切换根目录)</li>
<li>停止pureftpd进程，运行命令： /root/pureftpd stop</li>
<li>删除文件，运行命令：</li>
</ol>
<pre><code>rm -rf /usr/local/pureftpd
rm -rf /home/wwwroot/ftp （管理程序的位置，请根据实际情况设置）
rm /root/pureftpd
</code></pre><p>安装vsftpd</p>
<pre><code>sudo apt-get install vsftpd
</code></pre><p>这个命令的确可以安装，但是搞不懂 有的这个可以用，有的就不行</p>
<p>我84的VPS执行这个命令返回的就是</p>
<pre><code>root@272929:~# sudo apt-get install vsftpd
Reading package lists... Done
Building dependency tree... Done
E: Couldn't find package vsftpd
root@272929:~#
</code></pre><p>安装好以后配置一下</p>
<p>可以vi etc/vsftpd.conf 进行编辑也可以用winscp</p>
<pre><code>#独立运行
listen=YES&gt;

#是否启用匿名访问
anonymous_enable=no

#本地用户登录
local_enable=YES

#FTP目录
local_root=/soft

#访问端口
listen_port=21

#下面3段是后来加的，解决了本地用户不能登录的问题
#好像是vsftpd首先要检测拒绝的账号列表，如果没有这个列表就会全部认为是拒绝的
chroot_local_user=YES
userlist_enable=YES
userlist_deny=YES
#允许本地用户写入和删除
write_enable=YES
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=no
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=ftp
rsa_cert_file=/etc/ssl/private/vsftpd.pem
</code></pre><p>将以上配置复制替换掉原etc/vsftpd.conf文件即可</p>
<p>重启vsftpd : service vsftpd restart</p>
<p>添加FTP账号</p>
<p><code>useradd -d (用户家目录) -s /sbin/nologin 用户名</code></p>
<p>如：</p>
<p><code>useradd -d /soft -s /sbin/nologin ftpuser01</code></p>
<p>设置密码：</p>
<p><code>passwd ftpuser01</code></p>
<p>重复输入2次即可</p>
<p>目录的权限要给FTP的账号</p>
<p>先修改目录的权限然后赋予FTP账号</p>
<p><code>chmod -R 775 目录</code></p>
<p><code>chown -R 用户名.用户组 目录</code></p>
<p>比如我的wordpress网站根目录作为FTP的目录，为了不让www用户对博客目录的权限发生改变，可以这样写</p>
<p><code>chown -R www.FTP用户名 /home/wwwroot</code></p>
<p>这样FTP用户可以访问上传删除，我WP博客安装插件又不用填写FTP信息</p>
<p>无法登陆FTP是因为没有添加拒绝账号列表</p>
<p>在/etc 目录下建立vsftpd.user_list 这个文件，添加拒绝登录的账号“root就可以了，一行一个</p>
<p>好了，好像差不多了，新手 如有不足之处望指教。</p>
]]></content></item><item><title>回来了。</title><link>https://painso.com/posts/thinking/2012/im-back/</link><pubDate>Wed, 01 Feb 2012 16:49:51 +0000</pubDate><guid>https://painso.com/posts/thinking/2012/im-back/</guid><description>准备上班咯，烦得很，</description><content type="html">&lt;p>准备上班咯，烦得很，&lt;/p></content></item><item><title>明天回家了！</title><link>https://painso.com/posts/thinking/2012/go-home/</link><pubDate>Mon, 16 Jan 2012 19:31:28 +0000</pubDate><guid>https://painso.com/posts/thinking/2012/go-home/</guid><description>站票，不知道挤不挤，只要能喘气就行。</description><content type="html">&lt;p>站票，不知道挤不挤，只要能喘气就行。&lt;/p></content></item><item><title>启用新域名PainSo.com</title><link>https://painso.com/posts/thinking/2012/opening-of-the-new-domain-name-painso-com/</link><pubDate>Mon, 16 Jan 2012 16:45:48 +0000</pubDate><guid>https://painso.com/posts/thinking/2012/opening-of-the-new-domain-name-painso-com/</guid><description>可等死我了，买了Godaddy的backorder过了好几个月了，天天查whois 天天查删除时间啊，这个算比较中意的域名了，以后就用这个了 友情链接的朋友看到麻烦请更新一下</description><content type="html">&lt;p>可等死我了，买了Godaddy的backorder过了好几个月了，天天查whois 天天查删除时间啊，这个算比较中意的域名了，以后就用这个了 友情链接的朋友看到麻烦请更新一下&lt;/p></content></item><item><title>wordpress修改默认登录用户名</title><link>https://painso.com/posts/tech/2011/wordpress-login-user-name-changes-to-the-default/</link><pubDate>Fri, 25 Nov 2011 11:25:16 +0000</pubDate><guid>https://painso.com/posts/tech/2011/wordpress-login-user-name-changes-to-the-default/</guid><description>wordpress修改默认登录用户名 首先进入你的phpadmin 之后选择你的wordpress博客的数据库  选择wp_blogserusers数据表  选择-编辑  这里大概都看懂了把，完了之后点击执行就搞定了。</description><content type="html"><![CDATA[<h1 id="wordpress修改默认登录用户名">wordpress修改默认登录用户名</h1>
<ol>
<li>首先进入你的phpadmin</li>
<li>之后选择你的wordpress博客的数据库</li>
<li> 选择wp_blogserusers数据表</li>
<li> 选择-编辑</li>
<li> 这里大概都看懂了把，完了之后点击执行就搞定了。</li>
</ol>
]]></content></item><item><title>博客终于搬家！</title><link>https://painso.com/posts/thinking/2011/blog-has-finally-moved/</link><pubDate>Thu, 24 Nov 2011 23:55:33 +0000</pubDate><guid>https://painso.com/posts/thinking/2011/blog-has-finally-moved/</guid><description>免费的还是用的不踏实啊
下次做个搬家教程。。</description><content type="html">&lt;p>免费的还是用的不踏实啊&lt;/p>
&lt;p>下次做个搬家教程。。&lt;/p></content></item><item><title>我从来不看AV</title><link>https://painso.com/posts/share/2011/i-never-see-av/</link><pubDate>Wed, 23 Nov 2011 14:57:36 +0000</pubDate><guid>https://painso.com/posts/share/2011/i-never-see-av/</guid><description>我从来不看AV 我是一个极其讨厌AV和看AV的人，我从来不看AV 像什么:原田由香, 日置由香, 前园友香, 松井友香, 中森友香, 大西结花, 立原友香, 福井裕佳梨, 萩原, 由纪, 广濑由香, 北原由纪, 木崎友纪, 工藤夕贵, 松冈由树, 西野优辉, 筱崎由纪, 庄司友希, 田崎友希（牧本千幸）, 内田有纪, 仲间由纪惠, 伊藤由贵子, 染谷由纪子, 渡边由纪子, 山口由纪子, 穴井夕子, 青木裕子, 滨野裕子, 石桥佑子, 石倭裕子, 河合佑子, 北村裕子, 纪藤裕子, 小林有子, 三轮裕子, 水岛裕子, 森山佑子, 小优子, 坂木优子, 杉村阳子, 高滨优子, 竹内结子, 足立佑美, 江川有未, 早川优美, 平井由美, 久留须留美, 中村裕美, 小野田优美, 坂井优美, 芹泽优美, 新堂有望, 寺尾友美, 林由美香, 早川由美子, 阪谷佑三子, 释由美子, 嶋由美子, 杉本由美香, 高桥由美子, 夏生优奈, 上原优奈, 麻宫淳子, 安藤有里, 小室友里, 河野友里, 三井百合, 西尾佑里, 大原佑里, 吉田由莉, 芳贺优里雅, 细川百合子, 石田百合子, 彗月优, 片桐优, 野村佑香第二份，和上面有些重复的葵あげは, 日吉亚衣, 饭岛爱, 加藤爱, 君岛爱, 黑泽爱, 水木爱, 水野爱, 长瀬爱, 冈崎爱, 立木爱, 爱叶るび, 爱田友, 三浦爱佳, 饭岛爱子, 水岛爱奈, 中里爱菜, ＡＩＲＡ, （あいら）, 松下爱来, 雨宫あいり, 河合あいり, 黒木アイリ, 岛谷爱梨, 相泽梦, 相泽唯衣, 水野茜, 赤坂ルナ, 爱叶亜希, 藤崎秋, 片#124;亚纪, 佐仓亜希, 泽宫有希, 友崎亜希, 吉泽明步, 河村亜希子, 秋元优奈, （あきら）, 友坂あきら, 渡瀬晶, 天衣, 鮎川亚美, 日向あみ, 三本亜美, （, ), 水野亜美（吉野纱莉）, 中村あみ, 西村あみ, 樱木亜美, 翔野あみ, 杉浦あみ, 铃木亚美, 山崎亜弥, 仓木杏, 三月あん, 南波杏, 松下可怜, 小仓杏, 秋月杏奈, 姬木杏奈, 香月安娜, 宫下杏奈, 泽田杏奈, 凉风杏菜, 结城杏奈, 星野杏里, みずなあんり, 青羽未来, 宫沢あおい, 青木絵里, 青木玲, 青木沙罗, 青山和希, 青山くるみ, 有川真生, 水咲ありみ, （ありさ）, 本田亚里沙, 真木亚里沙, 野宫ありす, 朝比奈ゆい, 朝美雾唯, 城麻美, 早纪麻未, 平山朝香, 神田アサカ, 朝香美穗, 朝仓まりあ, 浅仓みるく, 杏野明日香, 森村あすか, 小川明日香, 大空明日香, 阪卷明日香, 浅仓みるく, 川奈あつみ, あや, 藤木亚弥, 姫野あや, 本城彩, 神崎あや, 小泉彩, 小池亚弥, 香咲绫, 水来亜矢, 水嶋彩, 中原绫, 夏树亜矢, 音咲绚, 白石あや, 铃木あや, 藤彩香, 藤崎彩花, 星野绫香, 大石, 四季彩香, 木田彩水, 樱井彩美, 彩名杏子, 持田彩菜, あやの, 寿绫乃, 望月あやの, 紫彩乃, 真弓あゆ, 秋吉あゆみ, 一色鮎美, 岩本亚由美, 小山渉, 黒沢あゆみ, 美树亚由美, 田原步, 吉田あゆみ, 麻布レオナ, 川岛和津实, 小泽, 美, 上条あずさ, 宫永あずさ, 长野あずさ, ペクチヨン, 金泽文子, 原千晶, 岛津千秋, 青沼知朝, 松原ちえ, 観月千穂, 叶月千穗, 井上千寻, 中野千夏, 伊藤千夏（三田有穗）, 成宫智香, 上原ちか, 川村千里（三原夕香）, 绮罗ちさと, 德田千圣, 筱宫知世, （こころ）, 七海ここな, ウングレアーヌ, デヴィ, 新藤惠美, 惠美梨, 中上絵奈, 赤川絵理, 林絵里（元光月夜也）, 本城爱里, 石田★り, 菊池英里, 汤川えり, 姫宫エリカ, 上条えりか, 君原エリカ, 上原絵里香, 後藤えり子, 苍吹雪, 樱井风花, 藤木那奈, 藤森エレナ, 原史奈, 佐佐木和佳, 大叶由, 山, 一步, 春菜, 原田春奈, 春菜まい, 上村春奈, 冲遥, 小泉春香, 遥优衣, 水野春树, 叶山小姫, 芳本叶月, 来生光, 沢口ひかり, 宇美野ひかり, (), 古都光, 星野光, かわいひかる, 大石ひかる, うさだひかる, 卑弥呼, 爱川日奈, 可爱ひな, 七瀬ひな, 木村ひなの, 中山ひなの, 矢口ひなの, ひなこ, 立花ひろみ, 広瀬晴美, 爱川瞳, 青木仁美, 芦屋瞳, 藤志吕仁美, 浜ひとみ, 长谷川瞳, 早坂仁美, 星崎瞳, 池野瞳, 小林仁美（小林瞳）, 国府田ひとみ, 工藤ひとみ, 松田瞳, 森尾ひとみ, 望月瞳, 二阶堂仁美, 沢木仁美, 白石瞳, 高野ひとみ, 吉野瞳, 忧木瞳, 小春, 白石日和, 森村ハニー, 麻井帆野香, 河合ほのか, 橘ほのか, 星ありす(星), 星川ヒカル, 星野瑠海, うづきほたる, 苍吹雪, 藤城なの, 樱井风花, 冬月ひなの, 河合いいな, 饭岛ことみ, 一色志乃, 伊#124;梨花, いつか, 沙罗树, 飞鸟美, 长谷川瞳, 森川いづみ, 森野泉, 田诨美, 上原いずみ, 山田いずみ, 朝仓纯, 速水纯, 河合纯, 草风纯, 唯川纯, 朝比奈顺子, 麻宫淳子, 真山润, 岬じゅん, 桃井じゅん, 冈田纯菜, 朝比奈树里, 松坂树梨, 竹田树理, 桥本树里, 若林树里, 若月树里, 可爱あずさ, 藤崎枫, 松岛枫, 中谷カイト, 彩波花穂, 饭田夏帆, 木村果步, 藤谷かな, 坂口华奈, 藤沢かんな, 内藤花苗, 藤森加奈子, 岸加奈子, 杉森风绪, 安部かおり, （あべかおり）, 爱川香理, 藤森かおり, 速水かおり, 姫野香, (, ), 北条香理, きららかおり, 岸田香织, 森下香织, 仲谷香织, 清水香织, 筱原かおり, 盐见香织, 椿香织, 浅见薫, 持田薫, 松尾薰, 黒木香, 桜沢かおる, 梅宫かおる, 井上可奈, 山崎华奈, 榎木加奈子, 松嶋加奈子, 华歌恋, 林かれん, 笠木忍, 春日みゆき, 朝霞美, 伊藤かすみ, 美里かすみ, 大野かすみ, 片瀬まひろ, 片瀬梨音, 可爱亚织沙, 河井ゆう, （かわいゆう）, 川村りさ, （けい）, 浅见伽椰, 香山圣, 加山由衣, 小峰佳世, 园部かづは, 青山和希, 一夜かずみ, 冈本圭, 中泽庆子, 高嶋圭子, 朝吹ケイト, 菊池らん, キムギョンジュ, 森村きみえ, 松坂季実子, 伊丹公理, 君嶋もえ, 小泉キラリ, 衣澄桐子, 木崎りの, 来生ひかり, 杉浦清香, 香田ゆみ, 远野小春, 饭岛恋, 小泉麻由, 斉藤ここみ, 天野こころ, 安井小径, 葵小夏, 长谷川小夏, 双叶このみ, 桜このみ, 青木琴美, くすのき琴美, 坂井ことみ, 諝迮^美, 琴野まゆ, 琴乃夕夏, 岸田小雪, 雪乃小春, 五十岚こずえ, 松嶋こずえ, 桃瀬くらら, 森下来美, 爱川京香, 恭香, 爱染恭子, &amp;lsquo;, 彩名杏子, 福沢京子, 中村凉子, 西原京子, 立花杏子, 京乃あづさ, うさみ恭香, 森咲小雪, 藤泽京子, 西荻恭子, 小野今日子, 沢村杏子, 岛久美子, 星野くるみ, 城源寺くるみ, ロレッタリー, **ミロソビッチ, 星野まどか, 松叶まどか, 内田, 原口まほ, 速水真保(真帆, ), まい, 朝霞舞, 浅仓舞, （, )麻生舞（泽口丽奈）, 荻原舞, 星乃舞, 星乃舞, 神崎麻衣, かつら舞, 川本舞, 小夏まい, 仓本麻衣, 中条舞, 夏美舞, 坂下麻衣, 早乙女舞, 佐藤舞, 樱月舞, 椎名舞, 凉白舞, 田村麻衣, 月咲舞, 上原舞, 真中みすず, 星野マキ, 椎名真希, 筱塚真树子, 日向まこ, 风野舞子, 君矢摩子, 木下まこ, 神崎麻子, 夕树舞子, 筱原真琴（筱原凉）, 後藤まみ, 早咲まみ, 宫本真美, 铃木麻奈美, 吉川真奈美, 广#124;真夏, ひろせまなつ, #123;泽舞音, 三咲真绪, 筱原真女, 橘真央, 未来, 绫#124;麻理, 鮎川真理, 春日部まり, 美里真里, 山田まり, 日高マリア, 平井まりあ, 梦野まりあ, 神乃球绘, 杉本まりえ, 高野まりえ, 浅井真理子, 树まりこ, 川奈まり子, 盛本真理子, 本木真梨子, 乃木真梨子, 青木まりん, 小早川麻玲, 胡桃沢麻里奈, 松本麻里奈, 加藤爱美, 京野真里奈, 松嶋まりな, 矢吹麻里奈, 麻生まりも, 折原まりの, 葵マリー, 松井夏穂, 小沢园, 橘ますみ, 星野真弥, 木谷麻耶, 远野麻耶, 爱田まゆ, 小山内まゆ, 持月真由, 岩崎真由美, 金泽美, 泽木美帆, 田村真由实, 辻めぐ, 安来めぐ, 相原めぐみ, 石原美, 大泽惠, 小野寺めぐみ, メイファ, 小鸠美爱, 金子みえ, 松冈美江, 冴嶋みどり, 小野美晴, 羽田, 有贺美穗, 赤坂美歩, 深田美穗, 岩崎美穂, 鹿岛美和, 望月美穂, 仲井美帆, 成瀬美穂, 齐藤美保, 铃木美帆, 寺田美穂, 吉野美穂, 常夏みかん, 秋元实花, 根本美香, 三上翔子, 相川未希, 青山美树, 藤谷美纪, 深山真希, 井上美树, 伊藤未来, 岩下美季, 神保美喜, 久保美希, 大西美希, 酒井未希, 早乙女美树, 沢井美树, 翔巳辉, 橘未稀, 上原美纪, 吉井美希, 塚本美纪, 叶山美湖, 阿立未来, 浅仓未来, 藤冈未玖, 长谷川美红, 堀越みく, 水桥みく, 中山美玖, 筱原未来, 远野未来, 高岭みく, 高根みく, 水原美美, 水原美美, 峯不二子, 佐伯美奈, 藤本圣名子, 小川美那奈, 上杉みなこ, みなみ, 青山みなみ, 南彩菜, 星川みなみ, 仲本みなみ, 栗原美奈美, 吉川美奈美, みなみゆい, 葵实, 麻川美绪, 朝仓海音, 小森美王, 冈崎美女, 三枝实央, 舞岛美织, 松嶋美织, 未来, 星川みらい, 宏冈みらい, 星崎未来, 朝冈实岭, すぎはら览, 森田美丽, 田中子, 草莓牛奶, 日野美沙, 西田美沙, 手塚みさ, 三咲まお, 樱井美树, 白石, 柴崎未永, 天衣みつ, 雨宫沙纪, 宫下希帆, 深芳野, あづき美由, 藤原美忧, 北原美由, 夏木美夕, 野宫美忧, 立河みゆ, 山瀬美优, 美幸, 宝来美由纪, 小松美幸, 乃原深雪, 真藤みゆき, 白石美由纪, 庄司みゆき, 杉山美雪, 水原美々, みずほ, 榎本瑞怆, 加#123;瑞穗, 瑞穂このみ, 中川美志穗, 椎名みずき, 水森一叶, 水野彩香, 美月莲, 水谷麻子, 水沢ゆうな, 水嶋彩, 水岛凉子, 君嵨, 西村萌, 沢木萌, 山咲萌, 高木萌美, 相田桃, 藤田睦月, 姫野もも, 星野桃, 白井もも, 手束桃, 相马もみじ, 百华, （ももか）, 桃香, 纹舞らん, 森原由纪, 森町ここみ, 森高千春, ミュウ, 滩ジュン, 流星ラム, 汐见なぎさ, なごみもえ, 小泽菜穗, 中川珠代, 仲山うさぎ, 広末奈绪, 百瀬奈绪, 及川奈央, 冴岛奈绪, 有吉奈生子, 広瀬奈央美, 麻田奈美, 白鸟奈未, 舞田奈美, 小沢奈美, 高原奈美, 宝生奈奈, 夏目奈奈, 堀内奈奈, 宝生奈奈, 川嶋なな, 松嶋菜々, 瑞树なな, 三和なな, 樱沢菜菜子, 里美(里见)奈奈子, 仓沢七海, 北原ななせ, 中川奈奈, 广末奈绪, 及川奈央, 禤奈绪, 白石奈绪, 竹中, 森永奈绪美, 白川なるみ, 立花ナツ, 安倍夏树, 日向なつき, 夏树りさ, 田坂菜月, なつみ, 神崎奈津美, 川滨奈美, 一色志乃, 野原奈津美, 野坂奈津美, 嶋田奈津美, 相原夏海, 夏目しおん, 望月ねね, 小川音子, 森永のあ, 月岛のあ, 青木のあ, 野原りん, 乃原深雪, 羽山典子, 兰望美, 桃井望, 松田千夏, 小野谷実穂, 流星ラム, 朝河兰, 贵水らん, 高野らん, 宝城らら, 姫川丽, 伊#124;怜, 村上レイ, 矢吹丽, 有森玲香, 饭岛丽华, 菊池丽香, 望月れいか, 杉崎丽香, 立花丽华, 吉泽レイカ, 秋本玲子, 叶山丽子, 镜丽子, 水越丽子, 水野礼子, 高田礼子, 山口玲子, 青木レミ, 叶丽美, 稻森丽奈, 神崎レイナ, 小桥礼奈, 近藤れいな, 桜井レイナ, 进藤玲菜, 山口レナ, 铃川玲理, 一色丽矢, 光咲玲奈, 村上丽奈, 七海りあ, 浅井理#123;, 松冈理#123;, みさき理絵, 手塚莉絵, 小林里穂, 七瀬里帆, 相原梨花, 秋吉里香, 浅井リカ, 芝山, 上原里香, 上杉里香, 世良, （, )秋菜里子（美崎凉香）, 青山梨子, 片瀬理子, 立花里子, 水城凛, 野々宫りん, 青木まりん, 友崎怜, 冈田りな, 相沢梨菜, 藤泽理名, 藤原リナ, 北原梨奈, 高瀬りな, 富田梨#123;, 内山理名, 臼井利奈, 卯月梨奈, 冈田丽奈, 上原铃华(绫香), 爱原梨央, 朝永里绪, 河井梨绪, 大沢莉央, 三宫里绪, 宫沢璃音, 森下理音, 坂巻リオナ, 由树莉莉, 朝比奈りり子, 璃纱, （りさ）, 水野理沙, 仲村梨沙, 新山理沙, 野村理沙, 小野, 大塚梨沙, 内田理沙, 美竹凉子（树本凉子）, 田中露央沙, 望月るあ, 望月ルイ, 樱树蕾, 若林るい, 爱田るか, 藤代流花, 小川流果, 红兰, 红月, 高原流美, 长谷川留美子, 绫瀬ルリ, 池ノ内るり, 池乃内るり, 橘瑠璃, 麻生凉, 瞳亮, 高见凉, 小泉凉子, 美竹凉子, 水泽良子, 樱井凉子, 沢山凉子, 橘凉子, 有贺凉, 深田凉子, 原田りょうこ, 水咲凉子, 杉原凉子, 赤木佐知, 小沢幸子, 池端さえ, 池川小咏, 三枝美忧, Ｓａｉｋｏ, （さいこ）, 斉藤つかさ, 深沢沙希, 一条沙希, 桐岛咲, 小野寺沙希, 音野さき, 床田早纪, 间宫沙希子, 樱朱音, |田, 桜もも, 桜菜々, 樱田桜田さくら, 可爱さくら, 白鸟樱花, 桜井风花, 桜田由加里, 吉野 , 中岛佐奈, 大塚纱奈, 吉崎纱南, 朝比奈さなえ, 麻生早苗, 佐佐木, 加藤, 牧野さおり, 美雪沙织, 中山, 奈奈见沙织, 露木沙织, 山本早织, 苍井空专集, 裕木サラ, 青木沙罗, 田嶋さとみ, 有马, 高村なつき, 沢口あすか, 沢木まゆみ, 沢见ひかり, 泽宫有希, 冰高小夜, 杉本小夜, 上戸さや, 沙也加, さやか, 榎本さやか, 藤野さやか, 萩原さやか, 圣さやか, 楠木さやか, 乙伊沙也加, 三浦沙耶香, 仲西さやか, 樱井沙也加, 高城さやか, 立石さやか, 堤さやか, 西野由, 阿木さゆり, 本城小百合, 河野小百合, 本田圣名, , 泉星香, 黑崎扇菜, 若菜#124;奈, セヴェリナ, 朝仓しほ, 藤原史歩, 西川しほ, 铃木志穂, 岸本志麻, 清水かおり, いとうしいな, 一色志乃, 永衣志帆, 井川しのぶ, 笠木忍, 零忍, 宫木汐音, 秋本诗织, 秋野しおり, 青木诗央里, 青野诗织, 藤谷しおり, 神谷诗织, 折原栞, 白石ひより, しろいうさぎ, 市井静香, 真木静香, 松本静香, 月野静玖, 今木翔子, 夏目しおん, 佐々木空, 冬木さおり, 北原翔子, 姫咲しゅり, すばる, 町田梨乃, 铃木くるみ, 木暮すづな, 铃里ちさと, 立花里子, 高树玛莉亚, 高原ジュリ, 高冈初美, 高杉あこ, 井上千寻, 川村智花, 千夏, 远野小春, 友田真希, 藤森智子, 菊池智子, 鮎川ともみ, 水野朋美, 七瀬ともみ, 佐藤智美, 奥菜つばさ, (冲那), 菅野つぼみ, 星野つぐみ, 宫岛司, 辻さやか, ＴＳＵＫＡＳＡ, （つかさ）, 绀堂, 早乙女つくし, 津野田薰, 露木阳子, ティアラ, 海野真珠, (), 三原夕香, 北村うるか, 逢乃うさぎ, 高田うさぎ, 小森诗, うちだまひろ, 矢吹さゆり, 矢田あき, 山咲あかり, 光月夜也, 松岛やや, 午後野弥生, 寺田弥生, 杉浦清香, 星野洋子, 永井阳子, 中原遥子, 高賱坐, 矢泽阳子, 麻生优, 安里佑加, 今井优香, 夕树舞子, 具志坚阳子, 高嶋阳子, 长谷川有奈, 吉田あゆみ, 吉永ゆりあ, 吉野サリー, 吉冈なつみ, 村上ゆう, 青叶ゆうな, 爱田由, 忧花かすみ, 安里佑加, 相沢优衣, 雨宫优衣, 遥优衣, 风间由衣, 舞坂由衣, 松浦唯, 长瀬ゆい, 沙里奈ユイ, 斉藤唯, #124;户由衣, 徳井唯, 上野结, 浅野由香, 中根ゆか, 小野由佳, 坂上友香, 纱月结花, 松本ゆかり, 樱田由加里, 関口ゆかり, 田口ゆかり, 广#124;由香, 美穂由纪, 持田ゆき, 森原由纪, 墨田ユキ, 当真, 田崎友希（牧本千幸）, 雪村, 爱田ゆう子, 浅间夕子, 麻生叶子, 饭塚友子, 前原佑子, 小仓优子, 中根由真, 中田由真, 相泽梦, 松浦梦, 川岛梦, 相田由美, 远藤悠美, 早川优美, 平井由美, 新堂有望, 林由美香, 諝悇 , 杉本由美香, 山下由美子, 小室优奈, 七瀬由奈, 岛田由菜, 中里优奈, 麻宫淳子, 小泉ゆり, 小室友里, 水树ゆり, 西泽友里, 大原佑里, 寺尾佑里, 加藤ゆりあ, 仓持ゆりあ, 美崎ゆりあ, 三里ゆりか, 水沢ゆりか, 里美由梨香, 芳野ゆりか, 细川百合子, 游佐七海, 青木ゆう, 片桐优, 片瀬ゆう, 可爱ゆう, 筒见友, 三田友穂, ゆう香, 安里佑加, 泉ゆうか, 五十岚ゆうか, 白鸟ゆうか, 爱叶ゆうき, 雨木夕纪, 结城杏奈, 夕树舞子, 前原优树, 吉泽ゆうこ, 明乃夕奈, 秋本优奈, 宫泽ゆうな, 冈崎结由, 徐若樱, 树若菜上面写的这些人我一个也不认识，当然她们的片子我也从来没看过!</description><content type="html"><![CDATA[<h1 id="我从来不看av"><strong>我从来不看AV</strong></h1>
<p>我是一个极其讨厌AV和看AV的人，我从来不看AV
像什么:原田由香, 日置由香, 前园友香, 松井友香, 中森友香, 大西结花, 立原友香, 福井裕佳梨, 萩原, 由纪, 广濑由香, 北原由纪, 木崎友纪, 工藤夕贵, 松冈由树, 西野优辉, 筱崎由纪, 庄司友希, 田崎友希（牧本千幸）, 内田有纪, 仲间由纪惠, 伊藤由贵子, 染谷由纪子, 渡边由纪子, 山口由纪子, 穴井夕子, 青木裕子, 滨野裕子, 石桥佑子, 石倭裕子, 河合佑子, 北村裕子, 纪藤裕子, 小林有子, 三轮裕子, 水岛裕子, 森山佑子, 小优子, 坂木优子, 杉村阳子, 高滨优子, 竹内结子, 足立佑美, 江川有未, 早川优美, 平井由美, 久留须留美, 中村裕美, 小野田优美, 坂井优美, 芹泽优美, 新堂有望, 寺尾友美, 林由美香, 早川由美子, 阪谷佑三子, 释由美子, 嶋由美子, 杉本由美香, 高桥由美子, 夏生优奈, 上原优奈, 麻宫淳子, 安藤有里, 小室友里, 河野友里, 三井百合, 西尾佑里, 大原佑里, 吉田由莉, 芳贺优里雅, 细川百合子, 石田百合子, 彗月优, 片桐优, 野村佑香第二份，和上面有些重复的葵あげは, 日吉亚衣, 饭岛爱, 加藤爱, 君岛爱, 黑泽爱, 水木爱, 水野爱, 长瀬爱, 冈崎爱, 立木爱, 爱叶るび, 爱田友, 三浦爱佳, 饭岛爱子, 水岛爱奈, 中里爱菜, ＡＩＲＡ, （あいら）, 松下爱来, 雨宫あいり, 河合あいり, 黒木アイリ, 岛谷爱梨, 相泽梦, 相泽唯衣, 水野茜, 赤坂ルナ, 爱叶亜希, 藤崎秋, 片#124;亚纪, 佐仓亜希, 泽宫有希, 友崎亜希, 吉泽明步, 河村亜希子, 秋元优奈, （あきら）, 友坂あきら, 渡瀬晶, 天衣, 鮎川亚美, 日向あみ, 三本亜美, （, ), 水野亜美（吉野纱莉）, 中村あみ, 西村あみ, 樱木亜美, 翔野あみ, 杉浦あみ, 铃木亚美, 山崎亜弥, 仓木杏, 三月あん, 南波杏, 松下可怜, 小仓杏, 秋月杏奈, 姬木杏奈, 香月安娜, 宫下杏奈, 泽田杏奈, 凉风杏菜, 结城杏奈, 星野杏里, みずなあんり, 青羽未来, 宫沢あおい, 青木絵里, 青木玲, 青木沙罗, 青山和希, 青山くるみ, 有川真生, 水咲ありみ, （ありさ）, 本田亚里沙, 真木亚里沙, 野宫ありす, 朝比奈ゆい, 朝美雾唯, 城麻美, 早纪麻未, 平山朝香, 神田アサカ, 朝香美穗, 朝仓まりあ, 浅仓みるく, 杏野明日香, 森村あすか, 小川明日香, 大空明日香, 阪卷明日香, 浅仓みるく, 川奈あつみ, あや, 藤木亚弥, 姫野あや, 本城彩, 神崎あや, 小泉彩, 小池亚弥, 香咲绫, 水来亜矢, 水嶋彩, 中原绫, 夏树亜矢, 音咲绚, 白石あや, 铃木あや, 藤彩香, 藤崎彩花, 星野绫香, 大石, 四季彩香, 木田彩水, 樱井彩美, 彩名杏子, 持田彩菜, あやの, 寿绫乃, 望月あやの, 紫彩乃, 真弓あゆ, 秋吉あゆみ, 一色鮎美, 岩本亚由美, 小山渉, 黒沢あゆみ, 美树亚由美, 田原步, 吉田あゆみ, 麻布レオナ, 川岛和津实, 小泽, 美, 上条あずさ, 宫永あずさ, 长野あずさ, ペクチヨン, 金泽文子, 原千晶, 岛津千秋, 青沼知朝, 松原ちえ, 観月千穂, 叶月千穗, 井上千寻, 中野千夏, 伊藤千夏（三田有穗）, 成宫智香, 上原ちか, 川村千里（三原夕香）, 绮罗ちさと, 德田千圣, 筱宫知世, （こころ）, 七海ここな, ウングレアーヌ, デヴィ, 新藤惠美, 惠美梨, 中上絵奈, 赤川絵理, 林絵里（元光月夜也）, 本城爱里, 石田★り, 菊池英里, 汤川えり, 姫宫エリカ, 上条えりか, 君原エリカ, 上原絵里香, 後藤えり子, 苍吹雪, 樱井风花, 藤木那奈, 藤森エレナ, 原史奈, 佐佐木和佳, 大叶由, 山, 一步, 春菜, 原田春奈, 春菜まい, 上村春奈, 冲遥, 小泉春香, 遥优衣, 水野春树, 叶山小姫, 芳本叶月, 来生光, 沢口ひかり, 宇美野ひかり, (), 古都光, 星野光, かわいひかる, 大石ひかる, うさだひかる, 卑弥呼, 爱川日奈, 可爱ひな, 七瀬ひな, 木村ひなの, 中山ひなの, 矢口ひなの, ひなこ, 立花ひろみ, 広瀬晴美, 爱川瞳, 青木仁美, 芦屋瞳, 藤志吕仁美, 浜ひとみ, 长谷川瞳, 早坂仁美, 星崎瞳, 池野瞳, 小林仁美（小林瞳）, 国府田ひとみ, 工藤ひとみ, 松田瞳, 森尾ひとみ, 望月瞳, 二阶堂仁美, 沢木仁美, 白石瞳, 高野ひとみ, 吉野瞳, 忧木瞳, 小春, 白石日和, 森村ハニー, 麻井帆野香, 河合ほのか, 橘ほのか, 星ありす(星), 星川ヒカル, 星野瑠海, うづきほたる, 苍吹雪, 藤城なの, 樱井风花, 冬月ひなの, 河合いいな, 饭岛ことみ, 一色志乃, 伊#124;梨花, いつか, 沙罗树, 飞鸟美, 长谷川瞳, 森川いづみ, 森野泉, 田诨美, 上原いずみ, 山田いずみ, 朝仓纯, 速水纯, 河合纯, 草风纯, 唯川纯, 朝比奈顺子, 麻宫淳子, 真山润, 岬じゅん, 桃井じゅん, 冈田纯菜, 朝比奈树里, 松坂树梨, 竹田树理, 桥本树里, 若林树里, 若月树里, 可爱あずさ, 藤崎枫, 松岛枫, 中谷カイト, 彩波花穂, 饭田夏帆, 木村果步, 藤谷かな, 坂口华奈, 藤沢かんな, 内藤花苗, 藤森加奈子, 岸加奈子, 杉森风绪, 安部かおり, （あべかおり）, 爱川香理, 藤森かおり, 速水かおり, 姫野香, (, ), 北条香理, きららかおり, 岸田香织, 森下香织, 仲谷香织, 清水香织, 筱原かおり, 盐见香织, 椿香织, 浅见薫, 持田薫, 松尾薰, 黒木香, 桜沢かおる, 梅宫かおる, 井上可奈, 山崎华奈, 榎木加奈子, 松嶋加奈子, 华歌恋, 林かれん, 笠木忍, 春日みゆき, 朝霞美, 伊藤かすみ, 美里かすみ, 大野かすみ, 片瀬まひろ, 片瀬梨音, 可爱亚织沙, 河井ゆう, （かわいゆう）, 川村りさ, （けい）, 浅见伽椰, 香山圣, 加山由衣, 小峰佳世, 园部かづは, 青山和希, 一夜かずみ, 冈本圭, 中泽庆子, 高嶋圭子, 朝吹ケイト, 菊池らん, キムギョンジュ, 森村きみえ, 松坂季実子, 伊丹公理, 君嶋もえ, 小泉キラリ, 衣澄桐子, 木崎りの, 来生ひかり, 杉浦清香, 香田ゆみ, 远野小春, 饭岛恋, 小泉麻由, 斉藤ここみ, 天野こころ, 安井小径, 葵小夏, 长谷川小夏, 双叶このみ, 桜このみ, 青木琴美, くすのき琴美, 坂井ことみ, 諝迮^美, 琴野まゆ, 琴乃夕夏, 岸田小雪, 雪乃小春, 五十岚こずえ, 松嶋こずえ, 桃瀬くらら, 森下来美, 爱川京香, 恭香, 爱染恭子, &lsquo;, 彩名杏子, 福沢京子, 中村凉子, 西原京子, 立花杏子, 京乃あづさ, うさみ恭香, 森咲小雪, 藤泽京子, 西荻恭子, 小野今日子, 沢村杏子, 岛久美子, 星野くるみ, 城源寺くるみ, ロレッタリー, **ミロソビッチ, 星野まどか, 松叶まどか, 内田, 原口まほ, 速水真保(真帆, ), まい, 朝霞舞, 浅仓舞, （, )麻生舞（泽口丽奈）, 荻原舞, 星乃舞, 星乃舞, 神崎麻衣, かつら舞, 川本舞, 小夏まい, 仓本麻衣, 中条舞, 夏美舞, 坂下麻衣, 早乙女舞, 佐藤舞, 樱月舞, 椎名舞, 凉白舞, 田村麻衣, 月咲舞, 上原舞, 真中みすず, 星野マキ, 椎名真希, 筱塚真树子, 日向まこ, 风野舞子, 君矢摩子, 木下まこ, 神崎麻子, 夕树舞子, 筱原真琴（筱原凉）, 後藤まみ, 早咲まみ, 宫本真美, 铃木麻奈美, 吉川真奈美, 广#124;真夏, ひろせまなつ, #123;泽舞音, 三咲真绪, 筱原真女, 橘真央, 未来, 绫#124;麻理, 鮎川真理, 春日部まり, 美里真里, 山田まり, 日高マリア, 平井まりあ, 梦野まりあ, 神乃球绘, 杉本まりえ, 高野まりえ, 浅井真理子, 树まりこ, 川奈まり子, 盛本真理子, 本木真梨子, 乃木真梨子, 青木まりん, 小早川麻玲, 胡桃沢麻里奈, 松本麻里奈, 加藤爱美, 京野真里奈, 松嶋まりな, 矢吹麻里奈, 麻生まりも, 折原まりの, 葵マリー, 松井夏穂, 小沢园, 橘ますみ, 星野真弥, 木谷麻耶, 远野麻耶, 爱田まゆ, 小山内まゆ, 持月真由, 岩崎真由美, 金泽美, 泽木美帆, 田村真由实, 辻めぐ, 安来めぐ, 相原めぐみ, 石原美, 大泽惠, 小野寺めぐみ, メイファ, 小鸠美爱, 金子みえ, 松冈美江, 冴嶋みどり, 小野美晴, 羽田, 有贺美穗, 赤坂美歩, 深田美穗, 岩崎美穂, 鹿岛美和, 望月美穂, 仲井美帆, 成瀬美穂, 齐藤美保, 铃木美帆, 寺田美穂, 吉野美穂, 常夏みかん, 秋元实花, 根本美香, 三上翔子, 相川未希, 青山美树, 藤谷美纪, 深山真希, 井上美树, 伊藤未来, 岩下美季, 神保美喜, 久保美希, 大西美希, 酒井未希, 早乙女美树, 沢井美树, 翔巳辉, 橘未稀, 上原美纪, 吉井美希, 塚本美纪, 叶山美湖, 阿立未来, 浅仓未来, 藤冈未玖, 长谷川美红, 堀越みく, 水桥みく, 中山美玖, 筱原未来, 远野未来, 高岭みく, 高根みく, 水原美美, 水原美美, 峯不二子, 佐伯美奈, 藤本圣名子, 小川美那奈, 上杉みなこ, みなみ, 青山みなみ, 南彩菜, 星川みなみ, 仲本みなみ, 栗原美奈美, 吉川美奈美, みなみゆい, 葵实, 麻川美绪, 朝仓海音, 小森美王, 冈崎美女, 三枝实央, 舞岛美织, 松嶋美织, 未来, 星川みらい, 宏冈みらい, 星崎未来, 朝冈实岭, すぎはら览, 森田美丽, 田中子, 草莓牛奶, 日野美沙, 西田美沙, 手塚みさ, 三咲まお, 樱井美树, 白石, 柴崎未永, 天衣みつ, 雨宫沙纪, 宫下希帆, 深芳野, あづき美由, 藤原美忧, 北原美由, 夏木美夕, 野宫美忧, 立河みゆ, 山瀬美优, 美幸, 宝来美由纪, 小松美幸, 乃原深雪, 真藤みゆき, 白石美由纪, 庄司みゆき, 杉山美雪, 水原美々, みずほ, 榎本瑞怆, 加#123;瑞穗, 瑞穂このみ, 中川美志穗, 椎名みずき, 水森一叶, 水野彩香, 美月莲, 水谷麻子, 水沢ゆうな, 水嶋彩, 水岛凉子, 君嵨, 西村萌, 沢木萌, 山咲萌, 高木萌美, 相田桃, 藤田睦月, 姫野もも, 星野桃, 白井もも, 手束桃, 相马もみじ, 百华, （ももか）, 桃香, 纹舞らん, 森原由纪, 森町ここみ, 森高千春, ミュウ, 滩ジュン, 流星ラム, 汐见なぎさ, なごみもえ, 小泽菜穗, 中川珠代, 仲山うさぎ, 広末奈绪, 百瀬奈绪, 及川奈央, 冴岛奈绪, 有吉奈生子, 広瀬奈央美, 麻田奈美, 白鸟奈未, 舞田奈美, 小沢奈美, 高原奈美, 宝生奈奈, 夏目奈奈, 堀内奈奈, 宝生奈奈, 川嶋なな, 松嶋菜々, 瑞树なな, 三和なな, 樱沢菜菜子, 里美(里见)奈奈子, 仓沢七海, 北原ななせ, 中川奈奈, 广末奈绪, 及川奈央, 禤奈绪, 白石奈绪, 竹中, 森永奈绪美, 白川なるみ, 立花ナツ, 安倍夏树, 日向なつき, 夏树りさ, 田坂菜月, なつみ, 神崎奈津美, 川滨奈美, 一色志乃, 野原奈津美, 野坂奈津美, 嶋田奈津美, 相原夏海, 夏目しおん, 望月ねね, 小川音子, 森永のあ, 月岛のあ, 青木のあ, 野原りん, 乃原深雪, 羽山典子, 兰望美, 桃井望, 松田千夏, 小野谷実穂, 流星ラム, 朝河兰, 贵水らん, 高野らん, 宝城らら, 姫川丽, 伊#124;怜, 村上レイ, 矢吹丽, 有森玲香, 饭岛丽华, 菊池丽香, 望月れいか, 杉崎丽香, 立花丽华, 吉泽レイカ, 秋本玲子, 叶山丽子, 镜丽子, 水越丽子, 水野礼子, 高田礼子, 山口玲子, 青木レミ, 叶丽美, 稻森丽奈, 神崎レイナ, 小桥礼奈, 近藤れいな, 桜井レイナ, 进藤玲菜, 山口レナ, 铃川玲理, 一色丽矢, 光咲玲奈, 村上丽奈, 七海りあ, 浅井理#123;, 松冈理#123;, みさき理絵, 手塚莉絵, 小林里穂, 七瀬里帆, 相原梨花, 秋吉里香, 浅井リカ, 芝山, 上原里香, 上杉里香, 世良, （, )秋菜里子（美崎凉香）, 青山梨子, 片瀬理子, 立花里子, 水城凛, 野々宫りん, 青木まりん, 友崎怜, 冈田りな, 相沢梨菜, 藤泽理名, 藤原リナ, 北原梨奈, 高瀬りな, 富田梨#123;, 内山理名, 臼井利奈, 卯月梨奈, 冈田丽奈, 上原铃华(绫香), 爱原梨央, 朝永里绪, 河井梨绪, 大沢莉央, 三宫里绪, 宫沢璃音, 森下理音, 坂巻リオナ, 由树莉莉, 朝比奈りり子, 璃纱, （りさ）, 水野理沙, 仲村梨沙, 新山理沙, 野村理沙, 小野, 大塚梨沙, 内田理沙, 美竹凉子（树本凉子）, 田中露央沙, 望月るあ, 望月ルイ, 樱树蕾, 若林るい, 爱田るか, 藤代流花, 小川流果, 红兰, 红月, 高原流美, 长谷川留美子, 绫瀬ルリ, 池ノ内るり, 池乃内るり, 橘瑠璃, 麻生凉, 瞳亮, 高见凉, 小泉凉子, 美竹凉子, 水泽良子, 樱井凉子, 沢山凉子, 橘凉子, 有贺凉, 深田凉子, 原田りょうこ, 水咲凉子, 杉原凉子, 赤木佐知, 小沢幸子, 池端さえ, 池川小咏, 三枝美忧, Ｓａｉｋｏ, （さいこ）, 斉藤つかさ, 深沢沙希, 一条沙希, 桐岛咲, 小野寺沙希, 音野さき, 床田早纪, 间宫沙希子, 樱朱音, |田, 桜もも, 桜菜々, 樱田桜田さくら, 可爱さくら, 白鸟樱花, 桜井风花, 桜田由加里, 吉野 , 中岛佐奈, 大塚纱奈, 吉崎纱南, 朝比奈さなえ, 麻生早苗, 佐佐木, 加藤, 牧野さおり, 美雪沙织, 中山, 奈奈见沙织, 露木沙织, 山本早织, 苍井空专集, 裕木サラ, 青木沙罗, 田嶋さとみ, 有马, 高村なつき, 沢口あすか, 沢木まゆみ, 沢见ひかり, 泽宫有希, 冰高小夜, 杉本小夜, 上戸さや, 沙也加, さやか, 榎本さやか, 藤野さやか, 萩原さやか, 圣さやか, 楠木さやか, 乙伊沙也加, 三浦沙耶香, 仲西さやか, 樱井沙也加, 高城さやか, 立石さやか, 堤さやか, 西野由, 阿木さゆり, 本城小百合, 河野小百合, 本田圣名, 　, 泉星香, 黑崎扇菜, 若菜#124;奈, セヴェリナ, 朝仓しほ, 藤原史歩, 西川しほ, 铃木志穂, 岸本志麻, 清水かおり, いとうしいな, 一色志乃, 永衣志帆, 井川しのぶ, 笠木忍, 零忍, 宫木汐音, 秋本诗织, 秋野しおり, 青木诗央里, 青野诗织, 藤谷しおり, 神谷诗织, 折原栞, 白石ひより, しろいうさぎ, 市井静香, 真木静香, 松本静香, 月野静玖, 今木翔子, 夏目しおん, 佐々木空, 冬木さおり, 北原翔子, 姫咲しゅり, すばる, 町田梨乃, 铃木くるみ, 木暮すづな, 铃里ちさと, 立花里子, 高树玛莉亚, 高原ジュリ, 高冈初美, 高杉あこ, 井上千寻, 川村智花, 千夏, 远野小春, 友田真希, 藤森智子, 菊池智子, 鮎川ともみ, 水野朋美, 七瀬ともみ, 佐藤智美, 奥菜つばさ, (冲那), 菅野つぼみ, 星野つぐみ, 宫岛司, 辻さやか, ＴＳＵＫＡＳＡ, （つかさ）, 绀堂, 早乙女つくし, 津野田薰, 露木阳子, ティアラ, 海野真珠, (), 三原夕香, 北村うるか, 逢乃うさぎ, 高田うさぎ, 小森诗, うちだまひろ, 矢吹さゆり, 矢田あき, 山咲あかり, 光月夜也, 松岛やや, 午後野弥生, 寺田弥生, 杉浦清香, 星野洋子, 永井阳子, 中原遥子, 高賱坐, 矢泽阳子, 麻生优, 安里佑加, 今井优香, 夕树舞子, 具志坚阳子, 高嶋阳子, 长谷川有奈, 吉田あゆみ, 吉永ゆりあ, 吉野サリー, 吉冈なつみ, 村上ゆう, 青叶ゆうな, 爱田由, 忧花かすみ, 安里佑加, 相沢优衣, 雨宫优衣, 遥优衣, 风间由衣, 舞坂由衣, 松浦唯, 长瀬ゆい, 沙里奈ユイ, 斉藤唯, #124;户由衣, 徳井唯, 上野结, 浅野由香, 中根ゆか, 小野由佳, 坂上友香, 纱月结花, 松本ゆかり, 樱田由加里, 関口ゆかり, 田口ゆかり, 广#124;由香, 美穂由纪, 持田ゆき, 森原由纪, 墨田ユキ, 当真, 田崎友希（牧本千幸）, 雪村, 爱田ゆう子, 浅间夕子, 麻生叶子, 饭塚友子, 前原佑子, 小仓优子, 中根由真, 中田由真, 相泽梦, 松浦梦, 川岛梦, 相田由美, 远藤悠美, 早川优美, 平井由美, 新堂有望, 林由美香, 諝悇 , 杉本由美香, 山下由美子, 小室优奈, 七瀬由奈, 岛田由菜, 中里优奈, 麻宫淳子, 小泉ゆり, 小室友里, 水树ゆり, 西泽友里, 大原佑里, 寺尾佑里, 加藤ゆりあ, 仓持ゆりあ, 美崎ゆりあ, 三里ゆりか, 水沢ゆりか, 里美由梨香, 芳野ゆりか, 细川百合子, 游佐七海, 青木ゆう, 片桐优, 片瀬ゆう, 可爱ゆう, 筒见友, 三田友穂, ゆう香, 安里佑加, 泉ゆうか, 五十岚ゆうか, 白鸟ゆうか, 爱叶ゆうき, 雨木夕纪, 结城杏奈, 夕树舞子, 前原优树, 吉泽ゆうこ, 明乃夕奈, 秋本优奈, 宫泽ゆうな, 冈崎结由, 徐若樱, 树若菜上面写的这些人我一个也不认识，当然她们的片子我也从来没看过!!!!!</p>
]]></content></item><item><title>Gabry Ponte live at Aquafan, 14 agosto 2011</title><link>https://painso.com/posts/share/2011/gabry-ponte-live-at-aquafan-14-agosto-2011/</link><pubDate>Tue, 22 Nov 2011 11:57:44 +0000</pubDate><guid>https://painso.com/posts/share/2011/gabry-ponte-live-at-aquafan-14-agosto-2011/</guid><description>Gabry Ponte live at Aquafan, 14 agosto 2011</description><content type="html"><![CDATA[<h1 id="gabry-ponte-live-at-aquafan-14-agosto-2011"><strong>Gabry Ponte live at Aquafan, 14 agosto 2011</strong></h1>
<p><a href="http://www.youtube.com/watch?v=w25cdu8R_VU" title=""><img src="http://img.youtube.com/vi/w25cdu8R_VU/0.jpg" alt=""></a></p>
]]></content></item><item><title>Electro 大神 | (SWAGGA MIX) DJ BL3ND</title><link>https://painso.com/posts/share/2011/electro-e5-a4-a7-e7-a5-9e-swagga-mix-dj-bl3nd/</link><pubDate>Tue, 22 Nov 2011 11:47:09 +0000</pubDate><guid>https://painso.com/posts/share/2011/electro-e5-a4-a7-e7-a5-9e-swagga-mix-dj-bl3nd/</guid><description>Electro 大神 | (SWAGGA MIX) DJ BL3ND
最近才发现这人的，我特意从YOUTUBE下载的超清，太麻烦了，最终还是搞定了嘿嘿</description><content type="html"><![CDATA[<h1 id="electro-大神--swagga-mix-dj-bl3nd"><strong>Electro 大神 | (SWAGGA MIX) DJ BL3ND</strong></h1>
<p><a href="http://www.youtube.com/watch?v=PzjFQhj2aFY" title=""><img src="http://img.youtube.com/vi/PzjFQhj2aFY/0.jpg" alt=""></a></p>
<p>最近才发现这人的，我特意从YOUTUBE下载的超清，太麻烦了，最终还是搞定了嘿嘿</p>
]]></content></item><item><title>Le Castle Vania at Escape From Wonderland 2011</title><link>https://painso.com/posts/share/2011/le-castle-vania-at-escape-from-wonderland-2011/</link><pubDate>Mon, 21 Nov 2011 19:25:43 +0000</pubDate><guid>https://painso.com/posts/share/2011/le-castle-vania-at-escape-from-wonderland-2011/</guid><description>Le Castle Vania at Escape From Wonderland 2011
Le Castle Vania 又来新视频了，帅啊帅的一B</description><content type="html"><![CDATA[<h1 id="le-castle-vania-at-escape-from-wonderland-2011">Le Castle Vania at Escape From Wonderland 2011</h1>
<p><a href="http://www.youtube.com/watch?v=k1_iNS_lm-w" title=""><img src="http://img.youtube.com/vi/k1_iNS_lm-w/0.jpg" alt=""></a></p>
<p>Le Castle Vania 又来新视频了，帅啊帅的一B</p>
]]></content></item><item><title>Brothers - The Moon OFFICIAL VIDEO</title><link>https://painso.com/posts/share/2011/brothers-the-moon-official-video/</link><pubDate>Mon, 21 Nov 2011 18:07:18 +0000</pubDate><guid>https://painso.com/posts/share/2011/brothers-the-moon-official-video/</guid><description>Brothers - The Moon OFFICIAL VIDEO
今天刚从youtube下载的，我了个擦这货不是Brothers吧？
就这个清晰了，你能叫我怎么办</description><content type="html"><![CDATA[<h1 id="brothers---the-moon-official-video">Brothers - The Moon OFFICIAL VIDEO</h1>
<p><a href="http://www.youtube.com/watch?v=tGzkqKpSFSY" title=""><img src="http://img.youtube.com/vi/tGzkqKpSFSY/0.jpg" alt=""></a></p>
<p>今天刚从youtube下载的，我了个擦这货不是Brothers吧？</p>
<p>就这个清晰了，你能叫我怎么办</p>
]]></content></item><item><title>000webhost三蛋空间全新自定义404及其他错误页面方法</title><link>https://painso.com/posts/play/2011/000webhost-custom-error-pages/</link><pubDate>Fri, 18 Nov 2011 17:02:06 +0000</pubDate><guid>https://painso.com/posts/play/2011/000webhost-custom-error-pages/</guid><description>000webhost三蛋空间全新自定义404及其他错误页面方法
今天整了一个三蛋空间做WP，差不多都弄好了，最后剩下个404页面让我很蛋疼 于是我就去度娘那搜相关文章，按照他们的方法都不行，后来无意中我访问错误页面的时候跳到了正常的404，我马上进FTP下载了空间上的.htaccess文件看了看
我把这段代码同样复制到另外一个三蛋BBS站上去也OK了，
代码如下：
Options -Indexes ErrorDocument 403 /sorry.php ErrorDocument 404 /sorry.php ErrorDocument 500 /sorry.php &amp;lt;IfModule mod_rewrite.c&amp;gt; RewriteEngine On RewriteBase / RewriteRule ^index.php$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /404.htm [L] &amp;lt;/IfModule&amp;gt; 只要把这段代码复制保存成.htaccess 文件即可 （如果不可以保存的话可以先随便保存一个文件名，传到空间后再改回来）
然后RewriteRule . /404.htm [L]这里的404.htm换成你的错误页面文件名
大功告成试试
三蛋的速度还是比较快的嘿嘿
btw: 听说给000webhost挂友链可以降低被封几率</description><content type="html"><![CDATA[<p><strong>000webhost三蛋空间全新自定义404及其他错误页面方法</strong></p>
<p>今天整了一个三蛋空间做WP，差不多都弄好了，最后剩下个404页面让我很蛋疼
于是我就去度娘那搜相关文章，按照他们的方法都不行，后来无意中我访问错误页面的时候跳到了正常的404，我马上进FTP下载了空间上的.htaccess文件看了看</p>
<p>我把这段代码同样复制到另外一个三蛋BBS站上去也OK了，</p>
<p>代码如下：</p>
<pre><code>Options -Indexes

ErrorDocument 403 /sorry.php

ErrorDocument 404 /sorry.php

ErrorDocument 500 /sorry.php

&lt;IfModule mod_rewrite.c&gt;

RewriteEngine On

RewriteBase /

RewriteRule ^index.php$ - [L]

RewriteCond %{REQUEST_FILENAME} !-f

RewriteCond %{REQUEST_FILENAME} !-d

RewriteRule . /404.htm [L]

&lt;/IfModule&gt;

</code></pre><p>只要把这段代码复制保存成.htaccess 文件即可 （如果不可以保存的话可以先随便保存一个文件名，传到空间后再改回来）</p>
<p>然后<code>RewriteRule . /404.htm [L]</code>这里的404.htm换成你的错误页面文件名</p>
<p>大功告成试试</p>
<p>三蛋的速度还是比较快的嘿嘿</p>
<p>btw: 听说给000webhost挂友链可以降低被封几率</p>
]]></content></item><item><title>冯巩 郭冬临 郭月《得寸进尺》</title><link>https://painso.com/posts/share/2011/guo-feng-gong-guo-pro-insatiable-month/</link><pubDate>Fri, 18 Nov 2011 14:08:26 +0000</pubDate><guid>https://painso.com/posts/share/2011/guo-feng-gong-guo-pro-insatiable-month/</guid><description>冯巩 郭冬临 郭月《得寸进尺》</description><content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=ohm29TYeDl4" title=""><img src="http://img.youtube.com/vi/ohm29TYeDl4/0.jpg" alt=""></a></p>
<p>冯巩 郭冬临 郭月《得寸进尺》</p>
]]></content></item><item><title>冯巩 牛群《小偷公司》</title><link>https://painso.com/posts/share/2011/feng-gong-cattle-thiefs/</link><pubDate>Fri, 18 Nov 2011 14:06:07 +0000</pubDate><guid>https://painso.com/posts/share/2011/feng-gong-cattle-thiefs/</guid><description>冯巩 牛群《小偷公司》</description><content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=oeJv0wbHsMs" title=""><img src="http://img.youtube.com/vi/oeJv0wbHsMs/0.jpg" alt=""></a></p>
<p>冯巩 牛群《小偷公司》</p>
]]></content></item><item><title>Dia feat Nurbek Altynai ( Kyrgyzstan ) Kyrgyz song</title><link>https://painso.com/posts/share/2011/dia-feat-nurbek-altynai-kyrgyzstan-kyrgyz-song/</link><pubDate>Fri, 18 Nov 2011 13:53:18 +0000</pubDate><guid>https://painso.com/posts/share/2011/dia-feat-nurbek-altynai-kyrgyzstan-kyrgyz-song/</guid><description>貌似最近好多人都在找这歌</description><content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=FCjzeFwKbOw" title=""><img src="http://img.youtube.com/vi/FCjzeFwKbOw/0.jpg" alt=""></a></p>
<p>貌似最近好多人都在找这歌</p>
]]></content></item><item><title>DHT - Listen to Your Heart</title><link>https://painso.com/posts/share/2011/dht-listen-to-your-heart/</link><pubDate>Fri, 18 Nov 2011 13:37:38 +0000</pubDate><guid>https://painso.com/posts/share/2011/dht-listen-to-your-heart/</guid><description>在youtu上面下的高清，原版没混音版本好听丫</description><content type="html"><![CDATA[<p><a href="http://www.youtube.com/watch?v=C4HJ0zfZ-EM" title=""><img src="http://img.youtube.com/vi/C4HJ0zfZ-EM/0.jpg" alt=""></a></p>
<p>在youtu上面下的高清，原版没混音版本好听丫</p>
]]></content></item><item><title>被强奸了怎么忍受</title><link>https://painso.com/posts/share/2011/how-to-endure-being-raped/</link><pubDate>Fri, 18 Nov 2011 10:34:00 +0000</pubDate><guid>https://painso.com/posts/share/2011/how-to-endure-being-raped/</guid><description>小时候，第一次恋爱时，我们希望对方也是第一次谈恋爱。再大一点，对方是不是第一次恋爱我们不在意了，只要是初吻就好。再大一点，
对方是不是初吻我们不在意了， 还是第一次就好。
再大一点，
对方是不是第一次我们不在意了，只要和自己之前别有过太多人就好。
再大一点，
对方是不是在认识我们之前跟过很多人我们不在意了，只要和我们在一起后别再和之前的那些人联系了就好。
再大一点，
对方是不是还和之前那些人联系我们不在意了，只要他们不再见面了就好。
再大一点，
对方是不是和之前那些人还见面我们不在意了，只要别做出格的事就好。
再大一点，
对方是不是和之前的人做了出格的事我们不在意了，只要别再有新人了就好。
再大一点，
对方是不是有新人了我们不在意了，只要对方和第三者在一起只是玩玩，不是真心的就好。
再大一点，
对方是不是和第三者真心在一起我们也不在意了，但只要别让我知道就好&amp;hellip;&amp;hellip;&amp;hellip;..
是我们是真的不在意了吗？
是我们成熟了，可承受的残缺越来越多了？
是我们妥协了，不得不选择去承受越来越多的残缺？
是现实社会和生活越来越多的展现出它真实的残缺？
真想反问，我们到底是成长了还是被他妈的生活强奸了后不得不呐喊出来的叫床声。</description><content type="html"><![CDATA[<p>小时候，第一次恋爱时，我们希望对方也是第一次谈恋爱。再大一点，对方是不是第一次恋爱我们不在意了，只要是初吻就好。再大一点，</p>
<p>对方是不是初吻我们不在意了， 还是第一次就好。</p>
<p>再大一点，</p>
<p>对方是不是第一次我们不在意了，只要和自己之前别有过太多人就好。</p>
<p>再大一点，</p>
<p>对方是不是在认识我们之前跟过很多人我们不在意了，只要和我们在一起后别再和之前的那些人联系了就好。</p>
<p>再大一点，</p>
<p>对方是不是还和之前那些人联系我们不在意了，只要他们不再见面了就好。</p>
<p>再大一点，</p>
<p>对方是不是和之前那些人还见面我们不在意了，只要别做出格的事就好。</p>
<p>再大一点，</p>
<p>对方是不是和之前的人做了出格的事我们不在意了，只要别再有新人了就好。</p>
<p>再大一点，</p>
<p>对方是不是有新人了我们不在意了，只要对方和第三者在一起只是玩玩，不是真心的就好。</p>
<p>再大一点，</p>
<p>对方是不是和第三者真心在一起我们也不在意了，但只要别让我知道就好&hellip;&hellip;&hellip;..</p>
<p>是我们是真的不在意了吗？</p>
<p>是我们成熟了，可承受的残缺越来越多了？</p>
<p>是我们妥协了，不得不选择去承受越来越多的残缺？</p>
<p>是现实社会和生活越来越多的展现出它真实的残缺？</p>
<p>真想反问，我们到底是成长了还是被他妈的生活强奸了后不得不呐喊出来的叫床声。</p>
]]></content></item><item><title>用php+mysql写一个刷新页面显示不同的内容</title><link>https://painso.com/posts/tech/2011/used-to-write-a-php-mysql-refresh-the-page-to-display-different-content/</link><pubDate>Fri, 18 Nov 2011 04:31:39 +0000</pubDate><guid>https://painso.com/posts/tech/2011/used-to-write-a-php-mysql-refresh-the-page-to-display-different-content/</guid><description>用php+mysql写一个刷新页面显示不同的内容
&amp;lt;? $conn=mysql_connect(&amp;#34;localhost&amp;#34;,&amp;#34;user&amp;#34;,&amp;#34;pwd&amp;#34;); $sql=&amp;#34;select * from tab where 1&amp;#34;; result=mysql_db_query(&amp;#34;database_name&amp;#34;,sql); row_num=mysql_num_rows(result); rand=rand(0,row_num); mysql_data_seek(result, rand); row=mysql_fetch_assoc(result); echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;; print_r($row); echo &amp;#34;/&amp;lt;pre&amp;gt;&amp;#34;; ?&amp;gt;</description><content type="html"><![CDATA[<p>用php+mysql写一个刷新页面显示不同的内容</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?</span>
<span class="nv">$conn</span><span class="o">=</span><span class="nx">mysql_connect</span><span class="p">(</span><span class="s2">&#34;localhost&#34;</span><span class="p">,</span><span class="s2">&#34;user&#34;</span><span class="p">,</span><span class="s2">&#34;pwd&#34;</span><span class="p">);</span>
<span class="nv">$sql</span><span class="o">=</span><span class="s2">&#34;select * from tab where 1&#34;</span><span class="p">;</span>
<span class="nx">result</span><span class="o">=</span><span class="nx">mysql_db_query</span><span class="p">(</span><span class="s2">&#34;database_name&#34;</span><span class="p">,</span><span class="nx">sql</span><span class="p">);</span>
<span class="nx">row_num</span><span class="o">=</span><span class="nx">mysql_num_rows</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
<span class="nx">rand</span><span class="o">=</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">row_num</span><span class="p">);</span>
<span class="nx">mysql_data_seek</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">rand</span><span class="p">);</span>
<span class="nx">row</span><span class="o">=</span><span class="nx">mysql_fetch_assoc</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
<span class="k">echo</span> <span class="s2">&#34;&lt;pre&gt;&#34;</span><span class="p">;</span>
<span class="nx">print_r</span><span class="p">(</span><span class="nv">$row</span><span class="p">);</span>
<span class="k">echo</span> <span class="s2">&#34;/&lt;pre&gt;&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</code></pre></div>]]></content></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on ephz3nt</title><link>https://painso.com/tags/java/</link><description>Recent content in java on ephz3nt</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 29 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://painso.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java ExcelUtil 库导出Excel表格报错问题</title><link>https://painso.com/posts/tech/2020/java-in-docker-alpine-font-issue/</link><pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate><guid>https://painso.com/posts/tech/2020/java-in-docker-alpine-font-issue/</guid><description>环境信息 运行环境: Docker 使用镜像: adoptopenjdk/openjdk11:alpine 问题概述 同事新写的接口，功能大概是访问提供某些参数会返回一个 Excel 表格。在本机测试正常，但是部署到测试环境下载下来的表格内容是 ||| |&amp;mdash;-| &amp;mdash;-| | {&amp;ldquo;code&amp;rdquo;:500 | data&amp;rdquo;:null,&amp;ldquo;message&amp;rdquo;:&amp;ldquo;Handler dispatch failed; nested exception is java.lang.InternalError: java.lang.reflect.InvocationTargetException&amp;rdquo;} |
控制台报错信息 org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.InternalError: java.lang.reflect.InvocationTargetException at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.2.RELEASE.jar!/:5.2.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.29.jar!/:9.0.29] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.29.jar!/:9.0.29] at org.</description></item><item><title>Java 基础</title><link>https://painso.com/posts/tech/2020/java-basic/</link><pubDate>Sun, 23 Aug 2020 17:25:46 +0800</pubDate><guid>https://painso.com/posts/tech/2020/java-basic/</guid><description>狂神说JAVA学习笔记 - JavaSE基础部分 Bilibili: https://www.bilibili.com/video/av68373450
当前观看至: https://www.bilibili.com/video/av68373450?p=77
运算符 不同类型运算返回值
double a = 55; float b = 10F; long c = 10; int d = 20; short e = 25; byte f = 25; 如果变量a+b+c+d相加，返回值类型为double 如果变量b+c+d+e相加，返回值类型为float
如果d+e相加，返回值为int 如果e+f相加，返回值为int 。。。 结论
如果一组不同类型的变量进行运算，返回值取类型最大数据类型 如果其中最大的数据类型为int，返回值为int
如果小于int的类型，返回int 自增、自减 ++ --
package operator; public class Demo01 { public static void main(String[] args) { int a = 1; int b = a++; int c = ++a; System.</description></item><item><title>Java 变量作用域</title><link>https://painso.com/posts/tech/2020/java-variable-scope/</link><pubDate>Sun, 23 Aug 2020 16:50:36 +0800</pubDate><guid>https://painso.com/posts/tech/2020/java-variable-scope/</guid><description>Java 变量分为: 类变量 实例变量 局部变量 类变量 需要在变量前添加修饰符static，可以在方法中直接调用
public class Hello { static int number = 10; // 定义类变量 public static void main(String[] args) { System.out.println(number); // 直接调用 } } 实例变量 定义格式为String &amp;lt;type&amp;gt; &amp;lt;name&amp;gt; = &amp;lt;value&amp;gt;;
实例变量从属于对象，使用时需要进行初始化
public class Hello { // 定义实例变量 String name = &amp;#34;Benjamin&amp;#34;; int age = 18; public static void main(String[] args) { Hello instance = new Hello() ; // new 一个当前的Hello对象 System.</description></item></channel></rss>